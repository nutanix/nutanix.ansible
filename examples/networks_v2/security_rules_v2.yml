---
# Summary:
# This playbook will do:
# 1. Create a security rule
# 2. Update the security rule
# 3. Fetch the security rule info
# 4. Delete the security rule

- name: Security rules playbook
  hosts: localhost
  gather_facts: false
  module_defaults:
    group/nutanix.ncp.ntnx:
      nutanix_host: <pc_ip>
      nutanix_username: <user>
      nutanix_password: <pass>
      validate_certs: false
  tasks:
    - name: Setting Variables
      ansible.builtin.set_fact:
        security_rule_name: "ansible_security_rule"
        security_rule_uuid: "f1b1b1b1-1b1b-1b1b-1b1b-1b1b1b1b1b1b"
        service_group_id: "25412365-9999-9999-8888-1b1b1b1b1b1b"
        address_group_ext_id: "78963254-1111-0000-0000-1b1b1b1b1b1b"
        vpc_id: "f1b1b1b1-1b1b-1b1b-1b1b-1b1b1b1b1b1b"
        category1_uuid: "12345678-1122-2233-4455-365478214587"
        category2_uuid: "87654321-2211-3322-6655-963258741258"
        category3_uuid: "11223355-9632-8520-4455-365478214587"
        category4_uuid: "22113344-9632-8520-4455-365478214587"
        category5_uuid: "33221155-9632-8520-4455-365478214587"

    - name: Create basic application security rule for certain VPC scope with intra group traffic not allowed
      nutanix.ncp.ntnx_security_rules_v2:
        name: "{{ security_rule_name }}"
        description: Ansible created rule
        type: APPLICATION
        policy_state: ENFORCE
        scope: VPC_LIST
        vpc_references:
          - "{{ vpc_id }}"
        is_hitlog_enabled: true
        is_ipv6_traffic_allowed: false
        rules:
          - description: inbound1
            type: INTRA_GROUP
            spec:
              intra_entity_group_rule_spec:
                secured_group_category_references:
                  - "{{ category1_uuid }}"
                  - "{{ category2_uuid }}"
                secured_group_action: DENY
          - description: outbound1
            type: APPLICATION
            spec:
              application_rule_spec:
                dest_allow_spec: ALL
                secured_group_category_references:
                  - "{{ category1_uuid }}"
                  - "{{ category2_uuid }}"
                is_all_protocol_allowed: true
          - description: inbound2
            type: APPLICATION
            spec:
              application_rule_spec:
                src_allow_spec: ALL
                secured_group_category_references:
                  - "{{ category1_uuid }}"
                  - "{{ category2_uuid }}"
                is_all_protocol_allowed: true
      register: result

    - name: Create security rule with multienvisolation rule
      nutanix.ncp.ntnx_security_rules_v2:
        name: "{{ security_rule_name }}"
        description: Ansible created rule
        type: ISOLATION
        policy_state: ENFORCE
        scope: ALL_VLAN
        is_hitlog_enabled: true
        is_ipv6_traffic_allowed: false
        rules:
          - description: multienvisolation rule
            type: MULTI_ENV_ISOLATION
            spec:
              multi_env_isolation_rule_spec:
                spec:
                  all_to_all_isolation_group:
                    isolation_groups:
                      - group_category_references:
                          - "{{ category1_uuid }}"
                      - group_category_references:
                          - "{{ category2_uuid }}"
      register: result

    - name: Create policy with all vlan scope and using certain sources and destinations
      nutanix.ncp.ntnx_security_rules_v2:
        name: "{{ security_rule_name }}"
        description: Ansible created rule
        type: APPLICATION
        policy_state: MONITOR
        scope: ALL_VLAN
        is_hitlog_enabled: true
        is_ipv6_traffic_allowed: true
        rules:
          - description: inbound1
            type: INTRA_GROUP
            spec:
              intra_entity_group_rule_spec:
                secured_group_category_references:
                  - "{{ category4_uuid }}"
                secured_group_action: DENY
          - description: inbound2
            type: APPLICATION
            spec:
              application_rule_spec:
                secured_group_category_references:
                  - "{{ category4_uuid }}"
                src_category_references:
                  - "{{ category3_uuid }}"
                service_group_references:
                  - "{{ service_group_id }}"
          - description: inbound3
            type: APPLICATION
            spec:
              application_rule_spec:
                secured_group_category_references:
                  - "{{ category4_uuid }}"
                src_address_group_references:
                  - "{{ address_group_ext_id }}"
                tcp_services:
                  - start_port: 80
                    end_port: 90
                  - start_port: 100
                    end_port: 110
                udp_services:
                  - start_port: 120
                    end_port: 130
                  - start_port: 140
                    end_port: 150
                icmp_services:
                  - type: 3
                    code: 1
                  - type: 4
                    code: 2
          - description: inbound4
            type: APPLICATION
            spec:
              application_rule_spec:
                secured_group_category_references:
                  - "{{ category4_uuid }}"
                src_subnet:
                  value: 10.0.0.0
                  prefix_length: 24
                service_group_references:
                  - "{{ service_group_id }}"
          - description: outbound1
            type: APPLICATION
            spec:
              application_rule_spec:
                secured_group_category_references:
                  - "{{ category4_uuid }}"
                dest_category_references:
                  - "{{ category5_uuid }}"
                is_all_protocol_allowed: true
          - description: outbound2
            type: APPLICATION
            spec:
              application_rule_spec:
                secured_group_category_references:
                  - "{{ category4_uuid }}"
                dest_subnet:
                  value: 10.0.1.1
                  prefix_length: 32
                is_all_protocol_allowed: true
          - description: outbound3
            type: APPLICATION
            spec:
              application_rule_spec:
                secured_group_category_references:
                  - "{{ category4_uuid }}"
                dest_address_group_references:
                  - "{{ address_group_ext_id }}"
                is_all_protocol_allowed: true
      register: result

    - name: Update policy rules and config
      nutanix.ncp.ntnx_security_rules_v2:
        ext_id: "{{ security_rule_uuid }}"
        name: "{{ security_rule_name }}_updated"
        description: Ansible updated rule
        type: APPLICATION
        policy_state: ENFORCE
        scope: ALL_VLAN
        is_hitlog_enabled: false
        is_ipv6_traffic_allowed: false
        rules:
          - description: inbound1
            type: INTRA_GROUP
            spec:
              intra_entity_group_rule_spec:
                secured_group_category_references:
                  - "{{ category3_uuid }}"
                secured_group_action: DENY
          - description: inbound2_updated
            type: APPLICATION
            spec:
              application_rule_spec:
                secured_group_category_references:
                  - "{{ category3_uuid }}"
                src_category_references:
                  - "{{ category4_uuid }}"
                service_group_references:
                  - "{{ service_group_id }}"
          - description: inbound3_updated
            type: APPLICATION
            spec:
              application_rule_spec:
                secured_group_category_references:
                  - "{{ category3_uuid }}"
                src_address_group_references:
                  - "{{ address_group_ext_id }}"
                tcp_services:
                  - start_port: 85
                    end_port: 90
                udp_services:
                  - start_port: 125
                    end_port: 130
                icmp_services:
                  - type: 3
                    code: 2
          - description: inbound4_updated
            type: APPLICATION
            spec:
              application_rule_spec:
                secured_group_category_references:
                  - "{{ category3_uuid }}"
                src_subnet:
                  value: 10.0.1.0
                  prefix_length: 24
                service_group_references:
                  - "{{ service_group_id }}"
          - description: outbound1
            type: APPLICATION
            spec:
              application_rule_spec:
                secured_group_category_references:
                  - "{{ category3_uuid }}"
                dest_category_references:
                  - "{{ category4_uuid }}"
                service_group_references:
                  - "{{ service_group_id }}"
          - description: outbound2_updated
            type: APPLICATION
            spec:
              application_rule_spec:
                secured_group_category_references:
                  - "{{ category3_uuid }}"
                dest_subnet:
                  value: 10.0.1.2
                  prefix_length: 32
                is_all_protocol_allowed: true
          - description: outbound3
            type: APPLICATION
            spec:
              application_rule_spec:
                secured_group_category_references:
                  - "{{ category3_uuid }}"
                dest_address_group_references:
                  - "{{ address_group_ext_id }}"
                is_all_protocol_allowed: true
      register: result

    - name: Fetch security rule info
      nutanix.ncp.ntnx_security_rules_info_v2:
        ext_id: "{{ security_rule_uuid }}"
      register: result

    - name: Delete security rule
      nutanix.ncp.ntnx_security_rules_v2:
        state: absent
        ext_id: "{{ security_rule_uuid }}"
      register: result
