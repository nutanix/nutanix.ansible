---
# Summary:
# This playbook will do:
# 1. Create service account
# 2. Update service account
# 3. List all users
# 4. Fetch only service accounts using filter
# 5. Fetch service account info using user ext_id criteria
# 6. Create an API key
# 7. List all API keys
# 8. List all API keys with filter
# 9. List all API keys using limit
# 10. Get details of specific API key
# 11. Create an authorization policy (ACP)
# 12. Delete the ACP
# 13. Revoke an API key
# 14. Delete an API key

- name: Service Accounts playbook
  hosts: localhost
  gather_facts: false
  module_defaults:
    group/nutanix.ncp.ntnx:
      nutanix_host: <pc_ip>
      nutanix_username: <user>
      nutanix_password: <pass>
      validate_certs: false

  tasks:
    - name: Setting Variables
      ansible.builtin.set_fact:
        username: test-ansible-service-account-1
        email_id: test@test.com
        email_id_updated: test_updated@test.com
        service_acc_description: test-ansible-description-1
        api_key_name: test-ansible-api-key-1
        api_key_description: test-ansible-description-api-key-1

    - name: Create Service Account
      nutanix.ncp.ntnx_users_v2:
        user_type: SERVICE_ACCOUNT
        username: "{{ username }}"
        email_id: "{{ email_id }}"
        description: "{{ service_acc_description }}"
      register: result

    - name: Adding user external ID to user_ext_id variable
      ansible.builtin.set_fact:
        user_ext_id: "{{ result.ext_id }}"

    - name: Update Service Account
      nutanix.ncp.ntnx_users_v2:
        ext_id: "{{ user_ext_id }}"
        email_id: "{{ email_id_updated }}"
        description: "{{ service_acc_description }}_updated"
      register: result

    - name: List all users
      nutanix.ncp.ntnx_users_info_v2:
      register: users

    - name: Fetch only Service accounts
      nutanix.ncp.ntnx_users_info_v2:
        filter: userType eq Schema.Enums.UserType'SERVICE_ACCOUNT'
      register: result

    - name: Fetch user info using user ext_id criteria
      nutanix.ncp.ntnx_users_info_v2:
        ext_id: "{{ user_ext_id }}"
      register: result

    - name: Get current time plus 2 days in the required format
      ansible.builtin.command: date -u -d "2 days" +"%Y-%m-%dT%H:%M:%S.%3NZ"
      register: expiry_date_time
      changed_when: false

    - name: Create an API key
      nutanix.ncp.ntnx_users_api_key_v2:
        user_ext_id: "{{ user_ext_id }}"
        name: "{{ api_key_name }}"
        description: "{{ api_key_description }}"
        key_type: "API_KEY"
        expiry_time: "{{ expiry_date_time.stdout }}"
      register: result

    - name: Storing ext_id of API key
      ansible.builtin.set_fact:
        api_key_ext_id: "{{ result.ext_id }}"

    - name: Store API key value
      ansible.builtin.set_fact:
        api_key_value: "{{ result.response.key_details.api_key }}"

    - name: List all API keys
      nutanix.ncp.ntnx_users_api_key_info_v2:
        user_ext_id: "{{ user_ext_id }}"
      register: result

    - name: List all API keys with filter
      nutanix.ncp.ntnx_users_api_key_info_v2:
        user_ext_id: "{{ user_ext_id }}"
        filter: "name eq '{{ api_key_name }}'"
      register: result

    - name: List all API keys using limit
      nutanix.ncp.ntnx_users_api_key_info_v2:
        user_ext_id: "{{ user_ext_id }}"
        limit: 1
      register: result

    - name: Get Details of Specific API key
      nutanix.ncp.ntnx_users_api_key_info_v2:
        user_ext_id: "{{ user_ext_id }}"
        ext_id: "{{ api_key_ext_id }}"
      register: result

    # Create an ACP and make any API call
    - name: List all roles and filter for Prism Admin
      nutanix.ncp.ntnx_roles_info_v2:
        filter: displayName eq 'Prism Admin'
      register: result

    - name: Storing ext_id of Prism Admin Role
      ansible.builtin.set_fact:
        prism_admin_role_ext_id: "{{ result.response[0].ext_id }}"

    - name: Create an auth policy
      nutanix.ncp.ntnx_authorization_policies_v2:
        state: present
        display_name: "acp_1"
        description: ansible created acps
        role: "{{ prism_admin_role_ext_id }}"
        authorization_policy_type: USER_DEFINED
        entities:
          - images:
              "*":
                eq: "*"
          - marketplace_item:
              owner_uuid:
                eq: SELF_OWNED
        identities:
          - user:
              uuid:
                anyof:
                  - "{{ user_ext_id }}"
      register: result

    # Now, Authorization policy is created,
    # we can call any API using the API key as we can pass
    # api_key_value to the header with parameter name as x-ntnx-api-key.

    - name: Storing ACP ext_id
      ansible.builtin.set_fact:
        acp_ext_id: "{{ result.ext_id }}"

    # Delete the ACP
    - name: Delete created auth policies
      nutanix.ncp.ntnx_authorization_policies_v2:
        state: absent
        ext_id: "{{ acp_ext_id }}"
      register: result

    - name: Revoke an API key
      nutanix.ncp.ntnx_users_revoke_api_key_v2:
        user_ext_id: "{{ user_ext_id }}"
        ext_id: "{{ api_key_ext_id }}"
      register: result

    - name: Delete an API key
      nutanix.ncp.ntnx_users_api_key_v2:
        user_ext_id: "{{ user_ext_id }}"
        ext_id: "{{ api_key_ext_id }}"
        state: absent
      register: result
