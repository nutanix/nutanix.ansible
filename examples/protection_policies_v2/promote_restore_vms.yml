# Summary:
# This playbook will do the following:
# 1. Create two categories
# 2. Create two protection policies
# 3. Create two VMs and assign them to the categories
# 4. Promote one VM
# 5. Restore the other VM
# 6. Delete all created VMs
# 7. Delete all created protection policies
# 8. Delete all created categories

- name: Protection policies playbook
  hosts: localhost
  gather_facts: false
  module_defaults:
    group/nutanix.ncp.ntnx:
      nutanix_host: <pc_ip>
      nutanix_username: <user>
      nutanix_password: <pass>
      validate_certs: false
  tasks:
    - name: Generate random names and set variables
      ansible.builtin.set_fact:
        random_name: "{{query('community.general.random_string',numbers=false, special=false,length=12)[0]}}"
        label1: "{{query('community.general.random_string',numbers=false, special=false,length=12)[0]}}"
        label2: "{{query('community.general.random_string',numbers=false, special=false,length=12)[0]}}"
        suffix_name: "ansible-category"
        todelete_categories: []
        todelete: []
        cluster:
          uuid: "00062db4-a450-e685-0fda-cdf9ca935bfd"
        cluster_availability_zone:
          uuid: "00062df3-0a98-93d3-0654-e452ba9c0c25"
        availability_zone_pc_ip: "10.2.0.0"
        availability_zone_pc_uuid: "bd32fb09-8005-4655-a3a8-086b8ec1b1ea"
        domain_manager_ext_id: "1e9a1996-50e2-485f-a67c-22355cb43055"

    - name: Set ansible keys and values
      ansible.builtin.set_fact:
        keys:
          - "{{random_name}}{{suffix_name}}key1"
          - "{{random_name}}{{suffix_name}}key2"
        values:
          - "{{random_name}}{{suffix_name}}value1"
          - "{{random_name}}{{suffix_name}}value2"

    ########################################################################################

    - name: Create categories for protection policies
      nutanix.ncp.ntnx_categories_v2:
        key: "{{ keys[item] }}"
        value: "{{ values[item] }}"
        description: "ansible-category"
      register: output
      loop: "{{ range(0, 2) }}"
      loop_control:
        label: "{{ item }}"

    - name: Save external IDs to the list
      ansible.builtin.set_fact:
        todelete_categories: "{{ todelete_categories + [ item.response.ext_id ] }}"
      with_items: "{{ output.results }}"

    - name: Set categories external ids
      ansible.builtin.set_fact:
        category_ext_id_1: "{{ todelete_categories[0] }}"
        category_ext_id_2: "{{ todelete_categories[1] }}"

    ########################################################################################

    - name: Create auto retention protection policy
      nutanix.ncp.ntnx_protection_policies_v2:
        name: "ansible-name-auto-{{random_name}}"
        description: "ansible-description-auto-{{random_name}}"
        replication_locations:
          - label: "ansible-label-{{label1}}"
            domain_manager_ext_id: "{{domain_manager_ext_id}}"
            is_primary: true
            replication_sub_location:
              nutanix_cluster:
                cluster_ext_ids:
                  - "{{ cluster.uuid }}"
          - label: "ansible-label-{{label2}}"
            domain_manager_ext_id: "{{availability_zone_pc_uuid}}"
            is_primary: false
            replication_sub_location:
              nutanix_cluster:
                cluster_ext_ids:
                  - "{{ cluster_availability_zone.uuid }}"
        replication_configurations:
          - source_location_label: "ansible-label-{{label1}}"
            remote_location_label: "ansible-label-{{label2}}"
            schedule:
              recovery_point_type: "CRASH_CONSISTENT"
              recovery_point_objective_time_seconds: 60
              retention:
                auto_rollup_retention:
                  local:
                    snapshot_interval_type: "DAILY"
                    frequency: 1
                  remote:
                    snapshot_interval_type: "DAILY"
                    frequency: 1
              sync_replication_auto_suspend_timeout_seconds: 300
          - source_location_label: "ansible-label-{{label2}}"
            remote_location_label: "ansible-label-{{label1}}"
            schedule:
              recovery_point_type: "CRASH_CONSISTENT"
              recovery_point_objective_time_seconds: 60
              retention:
                auto_rollup_retention:
                  local:
                    snapshot_interval_type: "DAILY"
                    frequency: 1
                  remote:
                    snapshot_interval_type: "DAILY"
                    frequency: 1
              sync_replication_auto_suspend_timeout_seconds: 300
        category_ids:
          - "{{category_ext_id_1}}"
      register: result

    - name: Add auto retention protection policy external ID to todelete list
      ansible.builtin.set_fact:
        todelete: "{{ todelete + [result.response.ext_id] }}"

    ########################################################################################

    - name: Create Synchronous replication protection policy for VM using category2
      nutanix.ncp.ntnx_protection_policies_v2:
        name: "ansible-name-sync-vm-{{random_name}}"
        description: "ansible-description-sync-vm-{{random_name}}"
        replication_locations:
          - label: "ansible-label-{{label1}}"
            domain_manager_ext_id: "{{domain_manager_ext_id}}"
            is_primary: true
            replication_sub_location:
              nutanix_cluster:
                cluster_ext_ids:
                  - "{{ cluster.uuid }}"
          - label: "ansible-label-{{label2}}"
            domain_manager_ext_id: "{{availability_zone_pc_uuid}}"
            is_primary: false
            replication_sub_location:
              nutanix_cluster:
                cluster_ext_ids:
                  - "{{ cluster_availability_zone.uuid }}"
        replication_configurations:
          - source_location_label: "ansible-label-{{label1}}"
            remote_location_label: "ansible-label-{{label2}}"
            schedule:
              recovery_point_type: "CRASH_CONSISTENT"
              recovery_point_objective_time_seconds: 0
              sync_replication_auto_suspend_timeout_seconds: 10
          - source_location_label: "ansible-label-{{label2}}"
            remote_location_label: "ansible-label-{{label1}}"
            schedule:
              recovery_point_type: "CRASH_CONSISTENT"
              recovery_point_objective_time_seconds: 0
              sync_replication_auto_suspend_timeout_seconds: 10
        category_ids:
          - "{{category_ext_id_2}}"
      register: result

    - name: Add synchronous protection policy external ID to todelete list
      ansible.builtin.set_fact:
        todelete: "{{ todelete + [result.response.ext_id] }}"

    ########################################################################################

    - name: Create a Protected VM to be promoted
      nutanix.ncp.ntnx_vms_v2:
        name: "{{ random_name }}_ansible_protected_vm_promote"
        description: "Protected VM for promote"
        cluster:
          ext_id: "{{ cluster.uuid }}"
        categories:
          - ext_id: "{{ category_ext_id_2 }}"
      register: result

    - name: Set VM external ID
      ansible.builtin.set_fact:
        vm_ext_id_1: "{{ result.response.ext_id }}"

    - name: Create a Protected VM to be restored
      nutanix.ncp.ntnx_vms_v2:
        name: "{{ random_name }}_ansible_protected_vm_restore"
        description: "Protected VM for restore"
        cluster:
          ext_id: "{{ cluster.uuid }}"
        categories:
          - ext_id: "{{ category_ext_id_1 }}"
      register: result

    - name: Set VM external ID
      ansible.builtin.set_fact:
        vm_ext_id_2: "{{ result.response.ext_id }}"

    # Wait for the first VM to be protected
    - name: Fetch VM using ext_id
      nutanix.ncp.ntnx_vms_info_v2:
        ext_id: "{{ vm_ext_id_1 }}"
      register: result
      until: result.response.protection_type == "RULE_PROTECTED"
      retries: 60
      delay: 10

    # Wait for the second VM to be protected
    - name: Fetch VM using ext_id
      nutanix.ncp.ntnx_vms_info_v2:
        ext_id: "{{ vm_ext_id_2 }}"
      register: result
      until: result.response.protection_type == "RULE_PROTECTED"
      retries: 60
      delay: 10

    - name: Sleep for 5 minutes until VMs are protected
      ansible.builtin.pause:
        seconds: 300

    - name: Get a protected resource
      nutanix.ncp.ntnx_protected_resources_info_v2:
        ext_id: "{{ vm_ext_id_1 }}"
      register: result

    - name: Promote VM
      nutanix.ncp.ntnx_promote_protected_resources_v2:
        nutanix_host: "{{ availability_zone_pc_ip }}"
        ext_id: "{{ vm_ext_id_1 }}"
      register: result

    - name: Restore VM
      nutanix.ncp.ntnx_restore_protected_resources_v2:
        nutanix_host: "{{ availability_zone_pc_ip }}"
        ext_id: "{{ vm_ext_id_2 }}"
        cluster_ext_id: "{{ cluster_availability_zone.uuid }}"
      register: result

    ########################################################################################

    - name: Sleep for 5 minutes until VMs are promoted and restored
      ansible.builtin.pause:
        seconds: 300

    - name: Fetch all VMs on local cluster
      nutanix.ncp.ntnx_vms_info_v2:
      register: result

    - name: Filter only protected VMs
      ansible.builtin.set_fact:
        protected_vms: "{{ result.response | selectattr('name', 'search', random_name ~ '_ansible_protected_vm') | list }}"

    - name: Extract external ids of protected VMs
      ansible.builtin.set_fact:
        protected_vms_ext_ids: "{{ protected_vms | map(attribute='ext_id') | list }}"

    - name: Delete all Created VMs on local cluster
      nutanix.ncp.ntnx_vms_v2:
        state: absent
        ext_id: "{{ item }}"
      register: result
      loop: "{{ protected_vms_ext_ids }}"

    - name: Fetch all VMs on remote cluster
      nutanix.ncp.ntnx_vms_info_v2:
        nutanix_host: "{{ availability_zone_pc_ip }}"
      register: result

    - name: Filter only protected VMs
      ansible.builtin.set_fact:
        protected_vms: "{{ result.response | selectattr('name', 'search', random_name ~ '_ansible_protected_vm') | list }}"

    - name: Extract external ids of protected VMs
      ansible.builtin.set_fact:
        protected_vms_ext_ids: "{{ protected_vms | map(attribute='ext_id') | list }}"

    - name: Delete all Created VMs on remote cluster
      nutanix.ncp.ntnx_vms_v2:
        nutanix_host: "{{ availability_zone_pc_ip }}"
        state: absent
        ext_id: "{{ item }}"
      register: result
      loop: "{{ protected_vms_ext_ids }}"

    ########################################################################################

    - name: Delete all protection policies
      nutanix.ncp.ntnx_protection_policies_v2:
        ext_id: "{{ item }}"
        state: absent
      loop: "{{ todelete }}"
      register: result

    ########################################################################################

    - name: Delete Created categories
      nutanix.ncp.ntnx_categories_v2:
        ext_id: "{{item}}"
        state: absent
      register: result
      loop: "{{ todelete_categories }}"
