---
# Test scenarios sequence wise:
# This playbook will test below cases:
#   1. Generate spec for cluster create using check mode
#   2. Run cluster create prechecks
#   3. Create cluster with minimum spec and register PE PC for verifying cluster creation
#   4. Create cluster with auth keys, configs, network details, etc. and register PE PC for verifying cluster creation
#   5. Generate spec for cluster update using check mode
#   6. Update config public auth keys
#   7. Update ntp servers and dns servers and smtp server
#   8. Verify idempotency of module
#   9. Test info module for fetching cluster details
#   10. Test info module for fetching host details
#   11. Test cluster destroy

- name: Start clusters crud tests
  ansible.builtin.debug:
    msg: start clusters crud tests

- name: Generate random category key & value
  ansible.builtin.set_fact:
    random_name: "{{ query('community.general.random_string', numbers=false, special=false, length=12)[0] }}"

- name: Set prefix name for clusters
  ansible.builtin.set_fact:
    prefix_name: ansible_test

- name: Set command split for resetting cluster username and password
  ansible.builtin.set_fact:
    pe_ssh_cmd:
      sshpass -p '{{ clusters[0].pe_password }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
      {{ clusters[0].pe_username }}@{{ clusters[0].nodes[0].cvm_ip }}
    reset_username_password: /home/nutanix/prism/cli/ncli user reset-password user-name={{ username }} password={{ password }}
    cluster_status: /usr/local/nutanix/cluster/bin/cluster status

- name: Set command for resetting cluster username and password
  ansible.builtin.set_fact:
    reset_command: '{{ pe_ssh_cmd }} "{{ reset_username_password }}"'
    cluster_status_command: '{{ pe_ssh_cmd }} "{{ cluster_status }}"'

############################################## Create cluster test 1 ##############################################

- name: Create spec for cluster create with dummy values using check mode
  ntnx_clusters_v2:
    name: cluster1
    nodes:
      node_list:
        - controller_vm_ip:
            ipv4:
              value: 10.0.0.1
          host_ip:
            ipv4:
              value: 10.0.0.2
    config:
      cluster_function:
        - AOS
      authorized_public_key_list:
        - name: key1
          key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDQ6
      redundancy_factor: 1
      cluster_arch: X86_64
      fault_tolerance_state:
        domain_awareness_level: DISK
        desired_cluster_fault_tolerance: CFT_2N_OR_2D
      operation_mode: NORMAL
      encryption_in_transit_status: ENABLED
    network:
      external_address:
        ipv4:
          value: 10.0.0.3
      external_data_service_ip:
        ipv4:
          value: 10.0.0.4
      nfs_subnet_whitelist:
        - vlan.123
      ntp_server_ip_list:
        - ipv4:
            value: 10.0.0.5
        - ipv6:
            value: 2001:db8::1
        - fqdn:
            value: ntp.example.com
      name_server_ip_list:
        - ipv4:
            value: 10.0.0.6
        - ipv6:
            value: 2001:db8::2
        - fqdn:
            value: dns.example.com
      smtp_server:
        email_address: testemail@test.com
        server:
          ip_address:
            ipv4:
              value: 10.0.0.7
          port: 25
          username: test
          password: test1
        type: PLAIN
      masquerading_ip:
        ipv4:
          value: 10.0.0.8
      management_server:
        ip:
          ipv4:
            value: 10.0.0.9
        is_registered: true
        is_drs_enabled: true
      fqdn: test.example.com
      key_management_server_type: PRISM_CENTRAL
      backplane:
        vlan_tag: 123
        subnet:
          value: 10.0.0.0
          prefix_length: 24
        netmask:
          value: 255.255.255.225
      http_proxy_list:
        - ip_address:
            ipv4:
              value: 10.0.0.1
          port: 8080
          username: username_test
          password: test1
          name: name_test
          proxy_types:
            - HTTP
            - HTTPS
      http_proxy_white_list:
        - target_type: IPV4_NETWORK_MASK
          target: test
    container_name: test-container
    dryrun: true
  register: result
  check_mode: true
  ignore_errors: true

- name: Verify generated spec
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.response.name == "cluster1"
      - result.response.nodes.node_list[0].controller_vm_ip.ipv4.value == "10.0.0.1"
      - result.response.nodes.node_list[0].host_ip.ipv4.value == "10.0.0.2"
      - result.response.config.cluster_function[0] == "AOS"
      - result.response.config.authorized_public_key_list[0].name == "key1"
      - result.response.config.authorized_public_key_list[0].key == "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDQ6"
      - result.response.config.redundancy_factor == 1
      - result.response.config.cluster_arch == "X86_64"
      - result.response.config.fault_tolerance_state.domain_awareness_level == "DISK"
      - result.response.config.operation_mode == "NORMAL"
      - result.response.config.encryption_in_transit_status == "ENABLED"
      - result.response.config.fault_tolerance_state.desired_cluster_fault_tolerance == "CFT_2N_OR_2D"
      - result.response.network.external_address.ipv4.value == "10.0.0.3"
      - result.response.network.external_data_service_ip.ipv4.value == "10.0.0.4"
      - result.response.network.nfs_subnet_whitelist[0] == "vlan.123"
      - result.response.network.ntp_server_ip_list[0].ipv4.value == "10.0.0.5"
      - result.response.network.ntp_server_ip_list[1].ipv6.value == "2001:db8::1"
      - result.response.network.ntp_server_ip_list[2].fqdn.value == "ntp.example.com"
      - result.response.network.name_server_ip_list[0].ipv4.value == "10.0.0.6"
      - result.response.network.name_server_ip_list[1].ipv6.value == "2001:db8::2"
      - result.response.network.name_server_ip_list[2].fqdn.value == "dns.example.com"
      - result.response.network.smtp_server.email_address == "testemail@test.com"
      - result.response.network.smtp_server.server.ip_address.ipv4.value == "10.0.0.7"
      - result.response.network.smtp_server.server.port == 25
      - result.response.network.smtp_server.server.username == "test"
      - result.response.network.smtp_server.type == "PLAIN"
      - result.response.network.masquerading_ip.ipv4.value == "10.0.0.8"
      - result.response.network.management_server.ip.ipv4.value == "10.0.0.9"
      - result.response.network.management_server.is_registered == true
      - result.response.network.management_server.is_drs_enabled == true
      - result.response.network.fqdn == "test.example.com"
      - result.response.network.key_management_server_type == "PRISM_CENTRAL"
      - result.response.network.backplane.vlan_tag == 123
      - result.response.network.backplane.subnet.value == "10.0.0.0"
      - result.response.network.backplane.subnet.prefix_length == 24
      - result.response.network.backplane.netmask.value == "255.255.255.225"
      - result.response.network.http_proxy_list[0].ip_address.ipv4.value == "10.0.0.1"
      - result.response.network.http_proxy_list[0].port == 8080
      - result.response.network.http_proxy_list[0].username == "username_test"
      - result.response.network.http_proxy_list[0].name == "name_test"
      - result.response.network.http_proxy_list[0].proxy_types[0] == "HTTP"
      - result.response.network.http_proxy_list[0].proxy_types[1] == "HTTPS"
      - result.response.network.http_proxy_white_list[0].target_type == "IPV4_NETWORK_MASK"
      - result.response.network.http_proxy_white_list[0].target == "test"
      - result.response.container_name == "test-container"
    fail_msg: Cluster create spec is not generated as expected
    success_msg: Cluster create spec is generated as expected

- name: Generate spec for discovering unconfigured nodes using check mode
  ntnx_discover_unconfigured_nodes_v2:
    is_manual_discovery: true
    address_type: "IPV4"
    ip_filter_list:
      - ipv4:
          value: 192.168.1.30
          prefix_length: 24
    uuid_filter_list:
      - "00061de6-4a87-6b06-185b-ac1f6b6f97e2"
    interface_filter_list:
      - 10061de6-4a87-6b06-185b-ac1f6b6f97e2
    timeout: 50
  register: result
  ignore_errors: true
  check_mode: true

- name: Generate spec for discovering unconfigured nodes using check mode status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response.is_manual_discovery == true
      - result.response.address_type == "IPV4"
      - result.response.ip_filter_list[0].ipv4.value == "192.168.1.30"
      - result.response.ip_filter_list[0].ipv4.prefix_length == 24
      - result.response.uuid_filter_list[0] == "00061de6-4a87-6b06-185b-ac1f6b6f97e2"
      - result.response.interface_filter_list[0] == "10061de6-4a87-6b06-185b-ac1f6b6f97e2"
      - result.response.timeout == 50
    fail_msg: Generate spec for discovering unconfigured nodes using check mode failed
    success_msg: Generate spec for discovering unconfigured nodes using check mode passed

- name: List all clusters to get prism central external ID
  ntnx_clusters_info_v2:
    filter: "config/clusterFunction/any(t:t eq Clustermgmt.Config.ClusterFunctionRef'PRISM_CENTRAL')"
  register: result
  ignore_errors: true

- name: Get prism central external ID
  ansible.builtin.set_fact:
    prism_central_external_id: "{{ result.response[0].ext_id }}"

- name: Discover unconfigured node
  ntnx_discover_unconfigured_nodes_v2:
    address_type: "IPV4"
    ip_filter_list:
      - ipv4:
          value: "{{ clusters[0].nodes[0].cvm_ip }}"
  register: result
  ignore_errors: true

- name: Discover unconfigured node status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.cluster_ext_id is defined
      - result.task_ext_id is defined
      - result.response.ext_id is defined
      - result.response.response.node_list[0].cvm_ip.ipv4.value == "{{ clusters[0].nodes[0].cvm_ip }}"
    fail_msg: Discover unconfigured node failed
    success_msg: Discover unconfigured node passed

- name: Run cluster create prechecks
  ntnx_clusters_v2:
    name: "{{ clusters[0].name }}"
    nodes:
      node_list:
        - controller_vm_ip:
            ipv4:
              value: "{{ clusters[0].nodes[0].cvm_ip }}"
    config:
      cluster_function: "{{ clusters[0].config.cluster_functions }}"
      authorized_public_key_list:
        - name: "{{ clusters[0].config.auth_public_keys[0].name }}"
          key: "{{ clusters[0].config.auth_public_keys[0].key }}"
      redundancy_factor: "{{ clusters[0].config.redundancy_factor_cluster_crud }}"
      cluster_arch: "{{ clusters[0].config.cluster_arch }}"
      fault_tolerance_state:
        domain_awareness_level: "{{ clusters[0].config.fault_tolerance_state.domain_awareness_level_cluster_crud }}"
    network:
      external_address:
        ipv4:
          value: "{{ clusters[0].network.virtual_ip }}"
      external_data_service_ip:
        ipv4:
          value: "{{ clusters[0].network.iscsi_ip }}"
      ntp_server_ip_list:
        - fqdn:
            value: "{{ clusters[0].network.ntp_servers[0] }}"
        - fqdn:
            value: "{{ clusters[0].network.ntp_servers[1] }}"
        - fqdn:
            value: "{{ clusters[0].network.ntp_servers[2] }}"
        - fqdn:
            value: "{{ clusters[0].network.ntp_servers[3] }}"
      name_server_ip_list:
        - ipv4:
            value: "{{ clusters[0].network.dns_servers[0] }}"
        - ipv4:
            value: "{{ clusters[0].network.dns_servers[1] }}"
      smtp_server:
        email_address: "{{ clusters[0].network.smtp_server.email_address }}"
        server:
          ip_address:
            ipv4:
              value: "{{ clusters[0].network.smtp_server.ip }}"
          port: "{{ clusters[0].network.smtp_server.port }}"
          username: "{{ clusters[0].network.smtp_server.username }}"
          password: "{{ clusters[0].network.smtp_server.password }}"
        type: "{{ clusters[0].network.smtp_server.type }}"
    dryrun: true
    timeout: 1800
  register: result
  ignore_errors: true

- name: Verify cluster create prechecks run
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.task_ext_id is defined
      - result.response.status == "SUCCEEDED"
    fail_msg: Cluster create prechecks failed
    success_msg: Cluster create prechecks passed

- name: Create cluster name
  ansible.builtin.set_fact:
    cluster_name: "{{ random_name }}_{{ prefix_name }}_{{ clusters[0].name }}"

- name: Check if cluster is unconfigured or not
  ansible.builtin.command: "{{ cluster_status_command }}"
  register: result
  ignore_errors: true
  changed_when: result.rc != 0

- name: Assert that cluster is unconfigured
  ansible.builtin.assert:
    that:
      - result.rc == 1
      - result.stderr.find('Cluster is currently unconfigured') != -1
    fail_msg: Cannot create cluster, cluster is already created
    success_msg: Cluster is unconfigured

- name: Create cluster with minimum spec
  ntnx_clusters_v2:
    name: "{{cluster_name}}"
    nodes:
      node_list:
        - controller_vm_ip:
            ipv4:
              value: "{{ clusters[0].nodes[0].cvm_ip }}"
    config:
      cluster_function: "{{ clusters[0].config.cluster_functions }}"
      redundancy_factor: "{{ clusters[0].config.redundancy_factor_cluster_crud }}"
      cluster_arch: "{{ clusters[0].config.cluster_arch }}"
      fault_tolerance_state:
        domain_awareness_level: "{{ clusters[0].config.fault_tolerance_state.domain_awareness_level_cluster_crud }}"
    timeout: 1800
  register: result
  ignore_errors: true

- name: Verify cluster create task status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.task_ext_id is defined
      - result.response.status == "SUCCEEDED"
    fail_msg: Cluster create failed
    success_msg: Cluster create passed

- name: Reset username and password
  ansible.builtin.command: "{{ reset_command }}"
  register: result
  ignore_errors: true
  changed_when: result.rc != 0

- name: Generate spec for aos remote cluster PE PC registration using check mode
  ntnx_pc_registration_v2:
    ext_id: d2f9994f-44fb-4d4c-ad3c-92055316444f
    remote_cluster:
      aos_remote_cluster:
        remote_cluster:
          address:
            ipv4:
              value: 10.87.153.200
          credentials:
            authentication:
              username: admin
              password: password
  check_mode: true
  register: result
  ignore_errors: true

- name: Generate spec for aos remote cluster PE PC registration using check mode status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.ext_id == "d2f9994f-44fb-4d4c-ad3c-92055316444f"
      - result.response.remote_cluster.remote_cluster.address.ipv4.value == "10.87.153.200"
      - result.response.remote_cluster.remote_cluster.credentials.authentication.username == "admin"
    fail_msg: "Generate spec for aos remote cluster PE PC registration using check mode failed"
    success_msg: "Generate spec for aos remote cluster PE PC registration using check mode passed"

- name: Generate spec for PC and domain manager(PC) remote cluster registration using check mode
  ntnx_pc_registration_v2:
    ext_id: d2f9994f-44fb-4d4c-ad3c-92055316444f
    remote_cluster:
      domain_manager_remote_cluster:
        remote_cluster:
          address:
            ipv4:
              value: 10.87.142.101
          credentials:
            authentication:
              username: admin
              password: password
        cloud_type: ONPREM_CLOUD
  check_mode: true
  register: result
  ignore_errors: true

- name: Generate spec for PC and domain manager(PC) remote cluster registration using check mode status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.ext_id == "d2f9994f-44fb-4d4c-ad3c-92055316444f"
      - result.response.remote_cluster.remote_cluster.address.ipv4.value == "10.87.142.101"
      - result.response.remote_cluster.remote_cluster.credentials.authentication.username == "admin"
      - result.response.remote_cluster.cloud_type == "ONPREM_CLOUD"
    fail_msg: "Generate spec for PC and domain manager(PC) remote cluster registration using check mode failed"
    success_msg: "Generate spec for PC and domain manager(PC) remote cluster registration using check mode passed"

- name: Generate spec for PC registration using cluster reference
  ntnx_pc_registration_v2:
    ext_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
    remote_cluster:
      cluster_reference:
        ext_id: d2f9994f-44fb-4d4c-ad3c-92055316444f
  check_mode: true
  register: result
  ignore_errors: true

- name: Generate spec for PC registration using cluster reference status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.ext_id == "3fa85f64-5717-4562-b3fc-2c963f66afa6"
      - result.response.remote_cluster.ext_id == "d2f9994f-44fb-4d4c-ad3c-92055316444f"
    fail_msg: "Generate spec for PC registration using cluster reference failed"
    success_msg: "Generate spec for PC registration using cluster reference passed"

- name: Run PE PC registration
  ntnx_pc_registration_v2:
    ext_id: "{{ prism_central_external_id }}"
    remote_cluster:
      aos_remote_cluster:
        remote_cluster:
          address:
            ipv4:
              value: "{{ clusters[0].nodes[0].cvm_ip }}"
          credentials:
            authentication:
              username: "{{ username }}"
              password: "{{ password }}"
  register: result
  ignore_errors: true

- name: Verify PE PC registration
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.ext_id is defined
      - result.ext_id == prism_central_external_id
      - result.response.status == 'SUCCEEDED'
      - result.task_ext_id is defined
    fail_msg: "PE PC registration failed"
    success_msg: "PE PC registration passed"

- name: Sleep for 1 minute
  ansible.builtin.pause:
    seconds: 60

- name: Fetch cluster using name
  ntnx_clusters_info_v2:
    filter: name eq '{{ cluster_name }}'
  register: result
  ignore_errors: true

- name: Verify listing
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response | length > 0
    fail_msg: Failed verifying PE PC registration
    success_msg: PE PC registration passed successfully

- name: Set cluster external ID
  ansible.builtin.set_fact:
    cluster_ext_id: "{{ result.response[0].ext_id }}"

- name: Fetch cluster info using external ID
  ntnx_clusters_info_v2:
    ext_id: "{{ cluster_ext_id }}"
  register: result
  ignore_errors: true

- name: Verify created cluster's details using cluster info
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.ext_id == cluster_ext_id
      - result.response.name == "{{ cluster_name }}"
      - result.response.nodes.node_list[0].controller_vm_ip.ipv4.value == "{{ clusters[0].nodes[0].cvm_ip }}"
      - '"{{ clusters[0].config.cluster_functions[0] }}" in "{{result.response.config.cluster_function}}"'
      - result.response.config.redundancy_factor == clusters[0].config.redundancy_factor_cluster_crud
      - result.response.config.cluster_arch == "{{ clusters[0].config.cluster_arch }}"
      - >
        result.response.config.fault_tolerance_state.domain_awareness_level ==
        "{{ clusters[0].config.fault_tolerance_state.domain_awareness_level_cluster_crud }}"
    fail_msg: Failed verifying cluster creation
    success_msg: Cluster creation passed successfully

- name: Destroy the cluster for cleanup
  ntnx_clusters_v2:
    state: absent
    ext_id: "{{ cluster_ext_id }}"
  register: result
  ignore_errors: true

- name: Verify cluster deletion
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.response.status == "SUCCEEDED"
      - result.ext_id == cluster_ext_id
    fail_msg: Failed verifying cluster deletion
    success_msg: Cluster deletion passed successfully

############################################# Create cluster test 2 ##############################################

- name: Sleep for 2 minute for pending tasks in node to finish
  ansible.builtin.pause:
    seconds: 120

- name: Check if cluster is unconfigured or not
  ansible.builtin.command: "{{ cluster_status_command }}"
  register: result
  ignore_errors: true
  changed_when: result.rc != 0

- name: Assert that cluster is unconfigured
  ansible.builtin.assert:
    that:
      - result.rc == 1
      - result.stderr.find('Cluster is currently unconfigured') != -1
    fail_msg: Cannot create cluster, cluster is already created
    success_msg: Cluster is unconfigured

- name: Create cluster with all configuration
  ntnx_clusters_v2:
    name: "{{ cluster_name }}"
    nodes:
      node_list:
        - controller_vm_ip:
            ipv4:
              value: "{{ clusters[0].nodes[0].cvm_ip }}"
    config:
      cluster_function: "{{ clusters[0].config.cluster_functions }}"
      authorized_public_key_list:
        - name: "{{ clusters[0].config.auth_public_keys[0].name }}"
          key: "{{ clusters[0].config.auth_public_keys[0].key }}"
      redundancy_factor: "{{ clusters[0].config.redundancy_factor_cluster_crud }}"
      cluster_arch: "{{ clusters[0].config.cluster_arch }}"
      fault_tolerance_state:
        domain_awareness_level: "{{ clusters[0].config.fault_tolerance_state.domain_awareness_level_cluster_crud }}"
    network:
      external_address:
        ipv4:
          value: "{{ clusters[0].network.virtual_ip }}"
      ntp_server_ip_list:
        - fqdn:
            value: "{{ clusters[0].network.ntp_servers[0] }}"
        - fqdn:
            value: "{{ clusters[0].network.ntp_servers[1] }}"
        - fqdn:
            value: "{{ clusters[0].network.ntp_servers[2] }}"
        - fqdn:
            value: "{{ clusters[0].network.ntp_servers[3] }}"
      name_server_ip_list:
        - ipv4:
            value: "{{ clusters[0].network.dns_servers[0] }}"
        - ipv4:
            value: "{{ clusters[0].network.dns_servers[1] }}"
    timeout: 1800
  register: result
  ignore_errors: true

- name: Verify cluster create task status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.task_ext_id is defined
      - result.response.status == "SUCCEEDED"
    fail_msg: Cluster create failed
    success_msg: Cluster create passed

- name: Reset username and password
  ansible.builtin.command: "{{ reset_command }}"
  register: result
  ignore_errors: true
  changed_when: result.rc != 0

- name: Run PE PC registration
  ntnx_pc_registration_v2:
    ext_id: "{{ prism_central_external_id }}"
    remote_cluster:
      aos_remote_cluster:
        remote_cluster:
          address:
            ipv4:
              value: "{{ clusters[0].nodes[0].cvm_ip }}"
          credentials:
            authentication:
              username: "{{ username }}"
              password: "{{ password }}"
  register: result
  ignore_errors: true

- name: Run PE PC registration status
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.ext_id is defined
      - result.ext_id == prism_central_external_id
      - result.response.status == 'SUCCEEDED'
      - result.task_ext_id is defined
    fail_msg: "Run PE PC registration failed"
    success_msg: "Run PE PC registration passed"

- name: Sleep for 1 minute
  ansible.builtin.pause:
    seconds: 60

- name: Fetch cluster using name
  ntnx_clusters_info_v2:
    filter: name eq '{{ cluster_name }}'
  register: result
  ignore_errors: true

- name: Verify listing
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response | length > 0
    fail_msg: Failed verifying PE PC registration
    success_msg: PE PC registration passed successfully

- name: Set cluster external ID
  ansible.builtin.set_fact:
    cluster_ext_id: "{{ result.response[0].ext_id }}"

- name: Fetch cluster info using external ID
  ntnx_clusters_info_v2:
    ext_id: "{{ cluster_ext_id }}"
  register: result
  ignore_errors: true

- name: Create list of ntp servers and dns servers fetched from cluster
  ansible.builtin.set_fact:
    ntp_servers: "{{ result.response.network.ntp_server_ip_list | map(attribute='fqdn.value') | list }}"
    dns_servers: "{{ result.response.network.name_server_ip_list | map(attribute='ipv4.value') | list }}"

- name: Keep only unique ntp servers
  ansible.builtin.set_fact:
    unique_ntp_servers: "{{ ntp_servers | unique }}"

- name: Keep only unique dns servers
  ansible.builtin.set_fact:
    unique_dns_servers: "{{ dns_servers | unique }}"

- name: Verify created cluster's details using cluster info
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.ext_id == cluster_ext_id
      - result.response.name == "{{ cluster_name }}"
      - result.response.nodes.node_list[0].controller_vm_ip.ipv4.value == "{{ clusters[0].nodes[0].cvm_ip }}"
      - '"{{ clusters[0].config.cluster_functions[0] }}" in "{{result.response.config.cluster_function}}"'
      - result.response.config.redundancy_factor == clusters[0].config.redundancy_factor_cluster_crud
      - result.response.config.cluster_arch == "{{ clusters[0].config.cluster_arch }}"
      - >
        result.response.config.fault_tolerance_state.domain_awareness_level ==
        "{{ clusters[0].config.fault_tolerance_state.domain_awareness_level_cluster_crud }}"
      - result.response.network.external_address.ipv4.value == "{{ clusters[0].network.virtual_ip }}"
      - unique_ntp_servers | length == 4
      - unique_dns_servers | length == 2
      - unique_ntp_servers[0] in "{{ clusters[0].network.ntp_servers }}"
      - unique_ntp_servers[1] in "{{ clusters[0].network.ntp_servers }}"
      - unique_ntp_servers[2] in "{{ clusters[0].network.ntp_servers }}"
      - unique_ntp_servers[3] in "{{ clusters[0].network.ntp_servers }}"
      - unique_dns_servers[0] in "{{ clusters[0].network.dns_servers }}"
      - unique_dns_servers[1] in "{{ clusters[0].network.dns_servers }}"
    fail_msg: Failed verifying cluster creation
    success_msg: Cluster creation passed successfully

############################################## Update cluster test ##############################################

- name: Create update spec for cluster using dummy values
  check_mode: true
  ntnx_clusters_v2:
    name: "{{ cluster_name }}_updated"
    ext_id: "{{ cluster_ext_id }}"
    network:
      ntp_server_ip_list:
        - fqdn:
            value: "{{ clusters[0].network.ntp_servers[1] }}"
      name_server_ip_list:
        - ipv4:
            value: "{{ clusters[0].network.dns_servers[1] }}"
      smtp_server:
        email_address: test@test.com
        server:
          ip_address:
            ipv4:
              value: 10.0.0.1
          port: "25"
          username: test
          password: test1
        type: STARTTLS
      external_address:
        ipv4:
          value: 10.0.0.2
      external_data_service_ip:
        ipv4:
          value: 10.0.0.3
    config:
      cluster_function:
        - AOS
        - ONE_NODE
      authorized_public_key_list:
        - name: key1
          key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDQ6
      redundancy_factor: 2
      cluster_arch: X86_64
      fault_tolerance_state:
        domain_awareness_level: DISK
      pulse_status:
        is_enabled: true
        pii_scrubbing_level: DEFAULT
  register: result
  ignore_errors: true

- name: Verify generated update spec
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.ext_id == cluster_ext_id
      - result.response.name == "{{ cluster_name }}_updated"
      - result.response.network.ntp_server_ip_list | length == 1
      - result.response.network.ntp_server_ip_list[0].fqdn.value == "{{ clusters[0].network.ntp_servers[1] }}"
      - result.response.network.name_server_ip_list[0].ipv4.value == "{{ clusters[0].network.dns_servers[1] }}"
      - result.response.network.smtp_server.email_address == "test@test.com"
      - result.response.network.smtp_server.server.ip_address.ipv4.value == "10.0.0.1"
      - result.response.network.smtp_server.server.port == 25
      - result.response.network.smtp_server.server.username == "test"
      - result.response.network.smtp_server.type == "STARTTLS"
      - result.response.network.external_address.ipv4.value == "10.0.0.2"
      - result.response.network.external_data_service_ip.ipv4.value == "10.0.0.3"
      - result.response.config.cluster_function[0] == "AOS"
      - result.response.config.cluster_function[1] == "ONE_NODE"
      - result.response.config.authorized_public_key_list | length == 1
      - result.response.config.authorized_public_key_list[0].name == "key1"
      - result.response.config.authorized_public_key_list[0].key == "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDQ6"
      - result.response.config.redundancy_factor == 2
      - result.response.config.cluster_arch == "X86_64"
      - result.response.config.fault_tolerance_state.domain_awareness_level == "DISK"
      - result.response.config.pulse_status.is_enabled == true
      - result.response.config.pulse_status.pii_scrubbing_level == "DEFAULT"
    fail_msg: Cluster update spec is not generated as expected
    success_msg: Cluster update spec is generated as expected

############################################## Update basic cluster config and auth public key ##############################################

- name: Fetch cluster info using external ID
  ntnx_clusters_info_v2:
    ext_id: "{{ cluster_ext_id }}"
  register: cluster_info
  ignore_errors: true

- name: Verify fetched cluster info
  ansible.builtin.assert:
    that:
      - cluster_info.response is defined
      - cluster_info.ext_id == cluster_ext_id
    fail_msg: Failed fetching cluster info
    success_msg: Fetched cluster info successfully

- name: Get auth public keys
  ansible.builtin.set_fact:
    auth_public_keys: "{{ cluster_info.response.config.authorized_public_key_list }}"

- name: Set new auth public key
  ansible.builtin.set_fact:
    new_auth_public_key:
      key: "{{ clusters[0].config.auth_public_keys[0].key }}"
      name: "{{ clusters[0].config.auth_public_keys[0].name }}"

- name: Add 1 auth public key to list
  ansible.builtin.set_fact:
    updated_auth_public_keys: "{{ auth_public_keys + [new_auth_public_key] }}"

- name: Update cluster basic configuration, add auth public keys, and enable pulse
  ntnx_clusters_v2:
    name: "{{ cluster_name }}_updated"
    ext_id: "{{ cluster_ext_id }}"
    config:
      authorized_public_key_list: "{{ updated_auth_public_keys }}"
      pulse_status:
        is_enabled: true
        pii_scrubbing_level: ALL
    timeout: 1200
  register: result
  ignore_errors: true

- name: Verify cluster update task status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.task_ext_id is defined
    fail_msg: Cluster update failed
    success_msg: Cluster update passed

# there is latency in api data update
- name: Sleep for 1 minute
  ansible.builtin.pause:
    seconds: 60

- name: Fetch cluster info using external ID
  ntnx_clusters_info_v2:
    ext_id: "{{ cluster_ext_id }}"
  register: cluster_info
  ignore_errors: true

- name: Verify fetched cluster info
  ansible.builtin.assert:
    that:
      - cluster_info.response is defined
      - cluster_info.ext_id == cluster_ext_id
    fail_msg: Failed fetching cluster info
    success_msg: Fetched cluster info successfully

- name: Verify cluster update results from cluster info
  ansible.builtin.assert:
    that:
      - cluster_info.response is defined
      - cluster_info.changed == false
      - cluster_info.response.name == "{{ cluster_name }}_updated"
      - cluster_info.response.config.authorized_public_key_list | length > auth_public_keys | length
      - cluster_info.response.config.authorized_public_key_list == updated_auth_public_keys
      - cluster_info.response.network.ntp_server_ip_list | length == 4
      - cluster_info.response.network.name_server_ip_list | length == 2
      - cluster_info.response.config.pulse_status.is_enabled == true
      - cluster_info.response.config.pulse_status.pii_scrubbing_level == "ALL"
    fail_msg: Cluster update failed
    success_msg: Cluster update passed

############################################# Update cluster ntp servers, dns servers and smtp servers ##############################################

- name: Update ntp servers, dns servers and smtp servers in cluster, and disable pulse
  ntnx_clusters_v2:
    ext_id: "{{ cluster_ext_id }}"
    config:
      pulse_status:
        is_enabled: false
    network:
      external_data_service_ip:
        ipv4:
          value: "{{ clusters[0].network.iscsi_ip1 }}"
      ntp_server_ip_list:
        - fqdn:
            value: "{{ clusters[0].network.ntp_servers[0] }}"
      name_server_ip_list:
        - ipv4:
            value: "{{ clusters[0].network.dns_servers[0] }}"
      smtp_server:
        email_address: "{{ clusters[0].network.smtp_server.email_address }}"
        server:
          ip_address:
            ipv4:
              value: "{{ clusters[0].network.smtp_server.ip }}"
          port: "{{ clusters[0].network.smtp_server.port }}"
          username: "{{ clusters[0].network.smtp_server.username }}"
          password: "{{ clusters[0].network.smtp_server.password }}"
        type: STARTTLS
    timeout: 1200
  register: result
  ignore_errors: true

- name: Verify cluster update task status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.task_ext_id is defined
    fail_msg: Cluster update failed
    success_msg: Cluster update passed

# there is latency in api data update
- name: Sleep for 1 minute
  ansible.builtin.pause:
    seconds: 60

- name: Fetch cluster info using external ID
  ntnx_clusters_info_v2:
    ext_id: "{{ cluster_ext_id }}"
  register: result
  ignore_errors: true

- name: Verify fetched cluster info
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.ext_id == cluster_ext_id
      - result.response.name == "{{ cluster_name }}_updated"
      - result.response.network.external_data_service_ip.ipv4.value == "{{ clusters[0].network.iscsi_ip1 }}"
      - result.response.network.ntp_server_ip_list | length == 1
      - result.response.network.ntp_server_ip_list[0].fqdn.value == "{{ clusters[0].network.ntp_servers[0] }}"
      - result.response.network.name_server_ip_list | length == 1
      - result.response.network.name_server_ip_list[0].ipv4.value == "{{ clusters[0].network.dns_servers[0] }}"
      - result.response.network.smtp_server.email_address == "{{ clusters[0].network.smtp_server.email_address }}"
      - result.response.network.smtp_server.server.ip_address.ipv4.value == "{{ clusters[0].network.smtp_server.ip }}"
      - result.response.network.smtp_server.server.port == clusters[0].network.smtp_server.port
      - result.response.network.smtp_server.server.username == "{{ clusters[0].network.smtp_server.username }}"
      - result.response.network.smtp_server.type == "STARTTLS"
      - result.response.config.authorized_public_key_list | length == updated_auth_public_keys | length
      - result.response.config.pulse_status.is_enabled == false
    fail_msg: Cluster updated data verification failed
    success_msg: Fetched cluster info and verified updated attribute successfully

############################################## Check idempotency ##############################################
- name: Verify idempotency
  ntnx_clusters_v2:
    name: "{{ cluster_name }}_updated"
    ext_id: "{{ cluster_ext_id }}"
    config:
      pulse_status:
        is_enabled: false
    network:
      external_data_service_ip:
        ipv4:
          value: "{{ clusters[0].network.iscsi_ip1 }}"
      ntp_server_ip_list:
        - fqdn:
            value: "{{ clusters[0].network.ntp_servers[0] }}"
      name_server_ip_list:
        - ipv4:
            value: "{{ clusters[0].network.dns_servers[0] }}"
      smtp_server:
        email_address: "{{ clusters[0].network.smtp_server.email_address }}"
        server:
          ip_address:
            ipv4:
              value: "{{ clusters[0].network.smtp_server.ip }}"
          port: "{{ clusters[0].network.smtp_server.port }}"
          username: "{{ clusters[0].network.smtp_server.username }}"
        type: STARTTLS

    timeout: 600
  register: result
  ignore_errors: true

- name: Verify cluster update task skip status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.ext_id == cluster_ext_id
      - result.failed == false
      - result.skipped == true
      - result.msg == "Nothing to change."
    fail_msg: Cluster update did not skip due to no changes
    success_msg: Cluster update skipped as expected

- name: Idempotency checks should get skipped if password is given
  ntnx_clusters_v2:
    ext_id: "{{ cluster_ext_id }}"
    network:
      smtp_server:
        email_address: "{{ clusters[0].network.smtp_server.email_address }}"
        server:
          ip_address:
            ipv4:
              value: "{{ clusters[0].network.smtp_server.ip }}"
          password: "{{ clusters[0].network.smtp_server.password }}"
          port: "{{ clusters[0].network.smtp_server.port }}"
          username: "{{ clusters[0].network.smtp_server.username }}"
        type: STARTTLS

    timeout: 600
  register: result
  ignore_errors: true

- name: Verify cluster update task status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
    fail_msg: Cluster update skipped instead of running
    success_msg: Cluster update ran as expected

############################################## Hosts & cluster info module tests ##############################################

- name: Verify listing of clusters
  ntnx_clusters_info_v2:
  register: result
  ignore_errors: true

- name: Verify listing of clusters
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.response | length >= 2
    fail_msg: Failed listing clusters
    success_msg: Listed clusters successfully

- name: Verify listing clusters using filters
  ntnx_clusters_info_v2:
    filter: name eq '{{ cluster_name }}_updated'
  register: result
  ignore_errors: true

- name: Verify listing clusters using filters
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.response | length == 1
      - result.response[0].name == "{{ cluster_name }}_updated"
      - result.response[0].ext_id == cluster_ext_id
    fail_msg: Failed listing clusters using filters
    success_msg: Listed clusters using filters successfully

- name: Verify listing clusters using wrong filters
  ntnx_clusters_info_v2:
    filter: name eq 'wrong_name'
  register: result
  ignore_errors: true

- name: Verify listing clusters using wrong filters
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.response | length == 0
    fail_msg: Listing cluster with invalid name returned data
    success_msg: Module returned no data for invalid name

- name: Verify listing clusters using limit
  ntnx_clusters_info_v2:
    limit: 1
  register: result
  ignore_errors: true

- name: Verify listing clusters using limit
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.response | length == 1
    fail_msg: Failed listing clusters using limit
    success_msg: Listed clusters using limit successfully

- name: List all hosts
  ntnx_hosts_info_v2:
  register: result
  ignore_errors: true

- name: Verify listing of hosts
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.response | length >= 2
    fail_msg: Failed listing hosts
    success_msg: Listed hosts successfully

- name: Set host related variables
  ansible.builtin.set_fact:
    host_name: "{{ result.response[0].host_name }}"
    host_ext_id: "{{ result.response[0].ext_id }}"
    cluster_uuid: "{{ result.response[0].cluster.uuid }}"

- name: Verify listing of hosts using filters
  ntnx_hosts_info_v2:
    filter: hostName eq '{{ host_name }}'
  register: result
  ignore_errors: true

- name: Verify listing of hosts using filters
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.response | length == 1
      - result.response[0].host_name == host_name
      - result.response[0].ext_id == host_ext_id
    fail_msg: Failed listing hosts using filters
    success_msg: Listed hosts using filters successfully

- name: Verify listing of hosts using wrong filters
  ntnx_hosts_info_v2:
    filter: hostName eq 'wrong_name'
  register: result
  ignore_errors: true

- name: Verify listing of hosts using wrong filters
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.response | length == 0
    fail_msg: Listing host with invalid name returned data
    success_msg: Module returned no data for invalid name

- name: Verify listing of hosts using limit
  ntnx_hosts_info_v2:
    limit: 1
  register: result
  ignore_errors: true

- name: Verify listing of hosts using limit
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.response | length == 1
    fail_msg: Failed listing hosts using limit
    success_msg: Listed hosts using limit successfully

- name: Verify fetching host using external ID
  ntnx_hosts_info_v2:
    ext_id: "{{ host_ext_id }}"
    cluster_ext_id: "{{ cluster_uuid }}"
  register: result
  ignore_errors: true

- name: Verify fetching host using external ID
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.ext_id == host_ext_id
      - result.response.host_name == host_name
      - result.response.ext_id == host_ext_id
    fail_msg: Failed fetching host using external ID
    success_msg: Fetched host using external ID successfully

- name: Fetch hosts of particular cluster
  ntnx_hosts_info_v2:
    cluster_ext_id: "{{ cluster_ext_id }}"
  register: result
  ignore_errors: true

- name: Verify fetching hosts of particular cluster
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.response | length == 1
      - result.response[0].cluster.uuid == cluster_ext_id
    fail_msg: Failed fetching hosts of particular cluster
    success_msg: Fetched hosts of particular cluster successfully

############################################## Delete cluster test ##############################################

- name: Destroy the cluster for cleanup
  ntnx_clusters_v2:
    state: absent
    ext_id: "{{ cluster_ext_id }}"
  register: result
  ignore_errors: true

- name: Verify cluster deletion
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.response.status == "SUCCEEDED"
      - result.ext_id == cluster_ext_id
    fail_msg: Failed verifying cluster deletion
    success_msg: Cluster deletion passed successfully
