---
- debug:
    msg: Start testing ntnx_karbon_clusters and ntnx_karbon_clusters_info

- set_fact:
    karbon_name:  "test-module21"

#############################
- name:  Verify check mode for PROD karbon cluster
  ntnx_karbon_clusters:
    cluster:
      uuid: "{{cluster.uuid}}"
    name: "{{karbon_name}}"
    k8s_version: "{{k8s_version}}"
    host_os: "{{host_os}}"
    node_subnet:
      name: "{{network.dhcp.name}}"
    cluster_type: PROD
    cni:
      node_cidr_mask_size:  "{{cni.node_cidr_mask_size}}"
      service_ipv4_cidr: "{{cni.service_ipv4_cidr}}"
      pod_ipv4_cidr: "{{cni.pod_ipv4_cidr}}"
      network_provider: Flannel
    storage_class:
      nutanix_cluster_password: "{{nutanix_cluster_password}}"
      nutanix_cluster_username: "{{nutanix_cluster_username}}"
      default_storage_class: True
      name: test-storage-class
      reclaim_policy: Delete
      storage_container: "{{storage_container.name}}"
      file_system: ext4
      flash_mode: False
    control_plane_virtual_ip: 10.101.0.1
    custom_node_configs:
      etcd:
        num_instances: 1
        cpu: 4
        memory_gb: 8
        disk_gb: 240
      masters:
        num_instances: 1
        cpu: 4
        memory_gb: 8
        disk_gb: 240
      workers:
        num_instances: 1
        cpu: 8
        memory_gb: 8
        disk_gb: 240
  register: result
  check_mode: true
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response.name == "{{karbon_name}}"
      - result.response.cni_config.node_cidr_mask_size == {{cni.node_cidr_mask_size}}
      - result.response.cni_config.pod_ipv4_cidr == "{{cni.pod_ipv4_cidr}}"
      - result.response.cni_config.service_ipv4_cidr ==  "{{cni.service_ipv4_cidr}}"
    success_msg: "Success: check mode spec returned  as expected"
    fail_msg: "Check mode for PROD cluster failed"
#############################

- name:  Verify check mode for ntnx_karbon_clusters
  ntnx_karbon_clusters:
    cluster:
      uuid: "{{cluster.uuid}}"
    name: "{{karbon_name}}"
    k8s_version: "{{k8s_version}}"
    host_os: "{{host_os}}"
    node_subnet:
      name: "{{network.dhcp.name}}"
    cluster_type: DEV
    cni:
      node_cidr_mask_size:  "{{cni.node_cidr_mask_size}}"
      service_ipv4_cidr: "{{cni.service_ipv4_cidr}}"
      pod_ipv4_cidr: "{{cni.pod_ipv4_cidr}}"
      network_provider: Flannel
    storage_class:
      nutanix_cluster_password: "{{nutanix_cluster_password}}"
      nutanix_cluster_username: "{{nutanix_cluster_username}}"
      default_storage_class: True
      name: test-storage-class
      reclaim_policy: Delete
      storage_container: "{{storage_container.name}}"
      file_system: ext4
      flash_mode: False
  register: result
  check_mode: true
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response.name == "{{karbon_name}}"
      - result.response.cni_config.node_cidr_mask_size == {{cni.node_cidr_mask_size}}
      - result.response.cni_config.pod_ipv4_cidr == "{{cni.pod_ipv4_cidr}}"
      - result.response.cni_config.service_ipv4_cidr ==  "{{cni.service_ipv4_cidr}}"
    success_msg: "Success: check mode spec returned  as expected"
    fail_msg: "Check mode for ntnx_karbon_clusters failed"
############################
- name: create  DEV cluster with Flannel network provider
  ntnx_karbon_clusters:
    cluster:
      uuid: "{{cluster.uuid}}"
    name: "{{karbon_name}}"
    k8s_version: "{{k8s_version}}"
    host_os: "{{host_os}}"
    node_subnet:
      name: "{{network.dhcp.name}}"
    cluster_type: DEV
    cni:
      node_cidr_mask_size:  "{{cni.node_cidr_mask_size}}"
      service_ipv4_cidr: "{{cni.service_ipv4_cidr}}"
      pod_ipv4_cidr: "{{cni.pod_ipv4_cidr}}"
      network_provider: Flannel
    storage_class:
      nutanix_cluster_password: "{{nutanix_cluster_password}}"
      nutanix_cluster_username: "{{nutanix_cluster_username}}"
      default_storage_class: True
      name: test-storage-class
      reclaim_policy: Delete
      storage_container: "{{storage_container.name}}"
      file_system: ext4
      flash_mode: False
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
      - result.cluster_uuid is defined
      - result.response.name == "{{karbon_name}}"
      - result.response.cni_config.node_cidr_mask_size == {{cni.node_cidr_mask_size}}
      - result.response.cni_config.pod_ipv4_cidr == "{{cni.pod_ipv4_cidr}}"
      - result.response.cni_config.service_ipv4_cidr ==  "{{cni.service_ipv4_cidr}}"
    fail_msg: " Fail: unable to  create  DEV cluster with Flannel network provider"
    success_msg: " Pass:  create  DEV cluster with Flannel network provider successfully "
#############################
- name: delete  dev cluster  with Flannel network provider
  ntnx_karbon_clusters:
    state: absent
    name: "{{result.response.name}}"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
      - result.response.status == "SUCCEEDED"
    fail_msg: " Fail: unable to delete  dev cluster  with Flannel network provider"
    success_msg: " Pass: delete  dev cluster  with Flannel network provider finished successfully"
#############################
- name: create  DEV cluster with Calico network provider
  ntnx_karbon_clusters:
    cluster:
      name: "{{cluster.name}}"
    name: "{{karbon_name}}"
    k8s_version: "{{k8s_version}}"
    host_os: "{{host_os}}"
    node_subnet:
      uuid: "{{network.dhcp.uuid}}"
    cni:
      node_cidr_mask_size:  "{{cni.node_cidr_mask_size}}"
      service_ipv4_cidr: "{{cni.service_ipv4_cidr}}"
      pod_ipv4_cidr: "{{cni.pod_ipv4_cidr}}"
      network_provider: Calico
    custom_node_configs:
      etcd:
        num_instances: 1
        cpu: 4
        memory_gb: 8
        disk_gb: 40
      masters:
        num_instances: 1
        cpu: 4
        memory_gb: 8
        disk_gb: 120
      workers:
        num_instances: 1
        cpu: 8
        memory_gb: 8
        disk_gb: 120
    storage_class:
      nutanix_cluster_password: "{{nutanix_cluster_password}}"
      nutanix_cluster_username: "{{nutanix_cluster_username}}"
      default_storage_class: True
      name: test-storage-class
      reclaim_policy: Retain
      storage_container: "{{storage_container.name}}"
      file_system: xfs
      flash_mode: true
  register: karbon_cluster
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - karbon_cluster.response is defined
      - karbon_cluster.changed == true
      - karbon_cluster.failed == false
      - karbon_cluster.cluster_uuid is defined
      - karbon_cluster.response.name == "{{karbon_name}}"
      - karbon_cluster.response.cni_config.node_cidr_mask_size == {{cni.node_cidr_mask_size}}
      - karbon_cluster.response.cni_config.calico_config.ip_pool_configs[0].cidr == "{{cni.pod_ipv4_cidr}}"
      - karbon_cluster.response.cni_config.service_ipv4_cidr == "{{cni.service_ipv4_cidr}}"
      - karbon_cluster.response.cni_config.pod_ipv4_cidr == "{{cni.pod_ipv4_cidr}}"
    fail_msg: " Fail: unable to create  DEV cluster with Calico network provider "
    success_msg: " Pass: create  DEV cluster with Calico network provider finished successfully"
#############################

- name: test getting  dev cluster using name
  ntnx_karbon_clusters_info:
    cluster_name: "{{karbon_cluster.response.name}}"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response.name == "{{karbon_cluster.response.name}}"
    fail_msg: " Fail: Unable to get particular Cluster "
    success_msg: " Pass: Cluster info obtained successfully  "

####################################################
- name: test getting cluster with ssh config using cluster name
  ntnx_karbon_clusters_info:
    cluster_name: "{{karbon_cluster.response.name}}"
    fetch_ssh_credentials: true
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response.certificate is defined
    fail_msg: " Fail: Unable to get particular Cluster and it's ssh config "
    success_msg: " Pass: Cluster info obtained successfully with it's ssh config  "
####################################################
- name: test getting cluster with kubeconfig config using cluster name
  ntnx_karbon_clusters_info:
    cluster_name: "{{karbon_cluster.response.name}}"
    fetch_kubeconfig: true
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response.kube_config is defined
    fail_msg: " Fail: Unable to get particular Cluster and it's kube config "
    success_msg: " Pass: Cluster info obtained successfully with it's kube config  "
#############################
- name: Generate random node_pool name
  set_fact:
    random_name: "{{query('community.general.random_string',numbers=false, special=false,length=9,upper = false)[0]}}"

- set_fact:
    suffix_name: "ansible"

- set_fact:
    node1_name:  "{{random_name}}{{suffix_name}}1"
    node2_name:  "{{random_name}}{{suffix_name}}2"
    node3_name:  "{{random_name}}{{suffix_name}}3"

- debug:
    msg: Start testing ntnx_karbon_clusters_node_pools

- name: Create node pool  with subnet uuid
  ntnx_karbon_clusters_node_pools:
    node_subnet:
      uuid: "{{network.dhcp.uuid}}"
    node_pool_name:  "{{node1_name}}"
    cluster_name:  "{{karbon_name}}"
    pool_config:
      num_instances: 2
      cpu: 4
      memory_gb: 8 # for etcd min 8
      disk_gb: 120
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.cluster_name == "{{karbon_name}}"
      - result.response is defined
      - result.node_pool_name is defined
      - result.node_pool_name=="{{node1_name}}"
    fail_msg: "Fail: Unable to Create node pool "
    success_msg: "Passed: Create node pool finished successfully "
#################################
- name: try to update node pool config with same values
  ntnx_karbon_clusters_node_pools:
    node_pool_name:  "{{node1_name}}"
    cluster_name:  "{{karbon_name}}"
    pool_config:
      num_instances: 2
      cpu: 4
      memory_gb: 8 # for etcd min 8
      disk_gb: 120
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.msg == "Nothing to change."
    fail_msg: "Fail: idempotecy check fail "
    success_msg: "Passed: Returned as expected "
#################################
- name: try to update node pool config with wrong labels
  ntnx_karbon_clusters_node_pools:
    node_pool_name:  "{{node1_name}}"
    cluster_name:  "{{karbon_name}}"
    pool_config:
      num_instances: 2
      cpu: 4
      memory_gb: 8 # for etcd min 8
      disk_gb: 120
    add_labels:
      propert.-+]y5: "string"
      propert5: "string"
      property4: "string+-.3-@"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.changed == false
      - result.failed == true
    fail_msg: "Fail: node pool updated with wrong labels "
    success_msg: "Passed: Returned as expected "
#################################
- name: update pool by increasing cpu,memory_gb,num_instances and try to add wrong labels
  ntnx_karbon_clusters_node_pools:
    wait: True
    node_pool_name:  "{{node1_name}}"
    cluster_name:  "{{karbon_name}}"
    pool_config:
        cpu: 6
        memory_gb: 10 # for etcd min 8
        disk_gb: 150
        num_instances: 4
    add_labels:
      property1: "test-property1"
      property2: "test-property2"
      property3: "test-property3"
      propert.-+]y5: "string"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.cluster_name == "{{karbon_name}}"
      - result.response is defined
      - result.node_pool_name is defined
      - result.node_pool_name=="{{node1_name}}"
      - result.skipped == true
    fail_msg: "Fail: Unable to update pool by increasing cpu,memory_gb,num_instances and try to add wrong labels "
    success_msg: "Passed: update pool by increasing cpu,memory_gb,num_instances and try to add wrong labels  finished successfully "
# #################################
- name: update pool by add  labels
  ntnx_karbon_clusters_node_pools:
    wait: True
    node_pool_name:  "{{node1_name}}"
    cluster_name:  "{{karbon_name}}"
    add_labels:
      property1: "test-property1"
      property2: "test-property2"
      property3: "test-property3"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.cluster_name == "{{karbon_name}}"
      - result.response is defined
      - result.node_pool_name is defined
      - result.node_pool_name=="{{node1_name}}"
    fail_msg: "Fail: Unable to update pool by add  labels "
    success_msg: "Passed: update pool by add  labels  finished successfully "
#################################
- name: update pool by decreasing cpu,memory_gb,num_instances and add remove labels
  ntnx_karbon_clusters_node_pools:
    wait: True
    node_pool_name:  "{{node1_name}}"
    cluster_name:  "{{karbon_name}}"
    pool_config:
        cpu: 5
        memory_gb: 9 # for etcd min 8
        disk_gb: 140
        num_instances: 3
    remove_labels:
      - property2
      - property3
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.cluster_name == "{{karbon_name}}"
      - result.response is defined
      - result.node_pool_name is defined
      - result.node_pool_name=="{{node1_name}}"
    fail_msg: "Fail: Unable to update pool by decreasing cpu,memory_gb,num_instances and add remove labels "
    success_msg: "Passed: update pool by decreasing cpu,memory_gb,num_instances and add remove labels finished successfully "
################################
- name: delete pool
  ntnx_karbon_clusters_node_pools:
    state: absent
    node_pool_name:  "{{node1_name}}"
    cluster_name:  "{{karbon_name}}"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status == 'SUCCEEDED'
      - result.failed == false
      - result.changed == true
    fail_msg: " Unable to delete node pool "
    success_msg: " node pool has been deleted successfully "
#################################

- name: Create node pool  with subnet name  with default values
  ntnx_karbon_clusters_node_pools:
    node_subnet:
      name: "{{network.dhcp.name}}"
    node_pool_name:  "{{node2_name}}"
    cluster_name:  "{{karbon_name}}"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.cluster_name == "{{karbon_name}}"
      - result.response is defined
      - result.node_pool_name is defined
      - result.node_pool_name=="{{node2_name}}"
    fail_msg: "Fail: Unable to  Create node pool  with subnet name  with default values "
    success_msg: "Passed:  Create node pool  with subnet name  with default values finished successfully "
#################################
- name: delete pool
  ntnx_karbon_clusters_node_pools:
    state: absent
    node_pool_name:  "{{node2_name}}"
    cluster_name:  "{{karbon_name}}"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status == 'SUCCEEDED'
      - result.failed == false
      - result.changed == true
    fail_msg: " Unable to delete node pool "
    success_msg: " node pool has been deleted successfully "
#################################
- name: delete  dev cluster
  ntnx_karbon_clusters:
    state: absent
    name: "{{karbon_cluster.response.name}}"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
      - result.response.status == "SUCCEEDED"
    fail_msg: " Fail: unable to delete  dev cluster  with Calico network provider"
    success_msg: " Pass: delete  dev cluster  with Calico network provider finished successfully"
#############################
