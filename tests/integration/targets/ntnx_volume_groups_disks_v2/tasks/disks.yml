- name: "Start Volume groups disks tests"
  ansible.builtin.debug:
    msg: "Start Volume groups disks tests"

- name: Generate random names
  ansible.builtin.set_fact:
    random_name: "{{query('community.general.random_string',numbers=false, special=false,length=12)[0]}}"

- name: Set VG name suffix
  ansible.builtin.set_fact:
    suffix_name: "ansible-vgs"

- name: Set VG names
  ansible.builtin.set_fact:
    vg1_name: "{{suffix_name}}-{{random_name}}1"
    vg2_name: "{{suffix_name}}-{{random_name}}2"

- name: Create Volume group for tests
  ntnx_volume_groups_v2:
    name: "{{vg1_name}}"
    description: "Volume group for disk tests"
    should_load_balance_vm_attachments: true
    sharing_status: "SHARED"
    target_prefix: "vg1"
    cluster_reference: "{{ cluster.uuid }}"
    usage_type: "USER"
    storage_features:
      flash_mode:
        is_enabled: true
  register: result
  ignore_errors: true

- name: Verify vg create
  ansible.builtin.assert:
    that:
      - result.error == None
      - result.response is defined
      - result.changed == true
      - result.ext_id is defined

    fail_msg: "Unable to create VG for tests"
    success_msg: "VG created successfully for tests"

- name: Set VG1 UUID
  ansible.builtin.set_fact:
    vg1_uuid: "{{ result.ext_id }}"

######################################### Create disk tests #########################################

- name: Create disk with check mode
  check_mode: true
  ntnx_volume_groups_disks_v2:
    state: "present"
    volume_group_ext_id: "{{ vg1_uuid }}"
    index: 0
    disk_size_bytes: 21474836480
    description: "ansible-created-disk-updated"
    disk_storage_features:
      flash_mode:
        is_enabled: true
    disk_data_source_reference:
      entity_type: "STORAGE_CONTAINER"
      ext_id: "{{ storage_container.uuid }}"
  register: result
  ignore_errors: true

- name: Verify disk spec
  ansible.builtin.assert:
    that:
      - result.error == None
      - result.response is defined
      - result.changed == false
      - result.volume_group_ext_id == "{{vg1_uuid}}"
      - result.response.index == 0
      - result.response.disk_size_bytes == 21474836480
      - result.response.description == "ansible-created-disk-updated"
      - result.response.disk_storage_features.flash_mode.is_enabled == true
      - result.response.disk_data_source_reference.entity_type == "STORAGE_CONTAINER"
      - result.response.disk_data_source_reference.ext_id == "{{storage_container.uuid}}"

    fail_msg: "Unable to create spec for disk create"
    success_msg: "Spec generated successfully for disk create"

- name: Create disk with min spec
  ntnx_volume_groups_disks_v2:
    state: "present"
    volume_group_ext_id: "{{ vg1_uuid }}"
    disk_size_bytes: 21474836480
    disk_data_source_reference:
      entity_type: "STORAGE_CONTAINER"
      ext_id: "{{ storage_container.uuid }}"
  register: result
  ignore_errors: true

- name: Verify disk create
  ansible.builtin.assert:
    that:
      - result.error == None
      - result.response is defined
      - result.changed == true
      - result.task_ext_id is defined
      - result.volume_group_ext_id == "{{vg1_uuid}}"
      - result.response.disk_storage_features.flash_mode.is_enabled == true
      - result.response.disk_size_bytes == 21474836480
      - result.response.ext_id == result.ext_id
      - result.response.storage_container_id == "{{storage_container.uuid}}"

    fail_msg: "Unable to create disk"
    success_msg: "Disk created successfully"

- name: Create disk with all attributes
  ntnx_volume_groups_disks_v2:
    state: "present"
    volume_group_ext_id: "{{ vg1_uuid }}"
    index: 1
    disk_size_bytes: 21474836480
    description: "ansible-created-disk-updated"
    disk_storage_features:
      flash_mode:
        is_enabled: true
    disk_data_source_reference:
      entity_type: "STORAGE_CONTAINER"
      ext_id: "{{ storage_container.uuid }}"
  register: result
  ignore_errors: true

- name: Verify disk create
  ansible.builtin.assert:
    that:
      - result.error == None
      - result.response is defined
      - result.changed == true
      - result.volume_group_ext_id == "{{vg1_uuid}}"
      - result.response.index == 1
      - result.response.disk_size_bytes == 21474836480
      - result.response.description == "ansible-created-disk-updated"
      - result.response.disk_storage_features.flash_mode.is_enabled == true
      - result.response.ext_id == result.ext_id
      - result.response.storage_container_id == "{{storage_container.uuid}}"

    fail_msg: "Unable to create disk"
    success_msg: "Disk created successfully"

- name: Set disk1 UUID
  ansible.builtin.set_fact:
    disk1_uuid: "{{ result.ext_id }}"

- name: Create disk with vdisk ref in check mode
  check_mode: true
  ntnx_volume_groups_disks_v2:
    state: "present"
    volume_group_ext_id: "{{ vg1_uuid }}"
    index: 1
    description: "ansible-created-disk-updated"
    disk_storage_features:
      flash_mode:
        is_enabled: true
    disk_data_source_reference:
      entity_type: "VM_DISK"
      ext_id: "{{disk1_uuid}}"
  register: result
  ignore_errors: true

- name: Verify spec of disk
  ansible.builtin.assert:
    that:
      - result.error == None
      - result.response is defined
      - result.changed == false
      - result.volume_group_ext_id == "{{vg1_uuid}}"
      - result.response.index == 1
      - result.response.description == "ansible-created-disk-updated"
      - result.response.disk_storage_features.flash_mode.is_enabled == true
      - result.response.disk_data_source_reference.entity_type == "VM_DISK"
      - result.response.disk_data_source_reference.ext_id == "{{disk1_uuid}}"

    fail_msg: "Unable to create spec for disk create"
    success_msg: "Spec generated successfully for disk create"

- name: Create disk from recovery point in check mode
  check_mode: true
  ntnx_volume_groups_disks_v2:
    state: "present"
    volume_group_ext_id: "{{ vg1_uuid }}"
    index: 1
    description: "ansible-created-disk-updated"
    disk_storage_features:
      flash_mode:
        is_enabled: true
    disk_data_source_reference:
      entity_type: "DISK_RECOVERY_POINT"
      ext_id: "{{disk1_uuid}}"
  register: result
  ignore_errors: true

- name: Verify spec of disk
  ansible.builtin.assert:
    that:
      - result.error == None
      - result.response is defined
      - result.changed == false
      - result.volume_group_ext_id == "{{vg1_uuid}}"
      - result.response.index == 1
      - result.response.description == "ansible-created-disk-updated"
      - result.response.disk_storage_features.flash_mode.is_enabled == true
      - result.response.disk_data_source_reference.entity_type == "DISK_RECOVERY_POINT"
      - result.response.disk_data_source_reference.ext_id == "{{disk1_uuid}}"

    fail_msg: "Unable to create spec for disk create"
    success_msg: "Spec generated successfully for disk create"

- name: Create disk from previously created vdisk
  ntnx_volume_groups_disks_v2:
    state: "present"
    volume_group_ext_id: "{{ vg1_uuid }}"
    index: 2
    description: "ansible-created-disk-updated"
    disk_storage_features:
      flash_mode:
        is_enabled: true
    disk_data_source_reference:
      entity_type: "VOLUME_DISK"
      ext_id: "{{disk1_uuid}}"
  register: result
  ignore_errors: true

- name: Set disk2 UUID
  ansible.builtin.set_fact:
    disk2_uuid: "{{ result.ext_id }}"

- name: Verify disk create
  ansible.builtin.assert:
    that:
      - result.error == None
      - result.response is defined
      - result.changed == true
      - result.volume_group_ext_id == "{{vg1_uuid}}"
      - result.response.index == 2
      - result.response.description == "ansible-created-disk-updated"
      - result.response.disk_storage_features.flash_mode.is_enabled == true
      - result.response.ext_id == result.ext_id

    fail_msg: "Unable to create disk"
    success_msg: "Disk created successfully"

- name: Fetch all disks from VG
  nutanix.ncp.ntnx_volume_groups_disks_info_v2:
    volume_group_ext_id: "{{ vg1_uuid }}"
  register: result

- name: Verify disk fetch
  ansible.builtin.assert:
    that:
      - result.error == None
      - result.response is defined
      - result.changed == false
      - result.response | length == 3
      - result.volume_group_ext_id == "{{vg1_uuid}}"

    fail_msg: "Unable to fetch disks"
    success_msg: "Disks fetched successfully"

- name: Fetch disks from VG using certain limit
  nutanix.ncp.ntnx_volume_groups_disks_info_v2:
    limit: 1
    volume_group_ext_id: "{{ vg1_uuid }}"
  register: result

- name: Verify disk fetch
  ansible.builtin.assert:
    that:
      - result.error == None
      - result.response is defined
      - result.changed == false
      - result.response | length == 1
      - result.volume_group_ext_id == "{{vg1_uuid}}"

    fail_msg: "Unable to fetch disks"
    success_msg: "Disks fetched successfully"

- name: Fetch certain VG disk
  nutanix.ncp.ntnx_volume_groups_disks_info_v2:
    volume_group_ext_id: "{{ vg1_uuid }}"
    ext_id: "{{ disk1_uuid }}"
  register: result

- name: Verify disk fetch
  ansible.builtin.assert:
    that:
      - result.error == None
      - result.response is defined
      - result.changed == false
      - result.response.ext_id == "{{disk1_uuid}}"
      - result.volume_group_ext_id == "{{vg1_uuid}}"

    fail_msg: "Unable to fetch disk"
    success_msg: "Disk fetched successfully"

######################################### Delete disk tests #########################################

- name: Delete disk
  nutanix.ncp.ntnx_volume_groups_disks_v2:
    state: absent
    volume_group_ext_id: "{{ vg1_uuid }}"
    ext_id: "{{ disk1_uuid }}"
  register: result

- name: Verify disk delete
  ansible.builtin.assert:
    that:
      - result.error == None
      - result.response is defined
      - result.changed == true
      - result.response.status == "SUCCEEDED"
      - result.volume_group_ext_id == "{{vg1_uuid}}"
      - result.ext_id == "{{disk1_uuid}}"
      - result.task_ext_id is defined

    fail_msg: "Unable to delete disk"
    success_msg: "Disk deleted successfully"

- name: Delete disk
  nutanix.ncp.ntnx_volume_groups_disks_v2:
    state: absent
    volume_group_ext_id: "{{ vg1_uuid }}"
    ext_id: "{{ disk2_uuid }}"
  register: result

- name: Verify disk delete
  ansible.builtin.assert:
    that:
      - result.error == None
      - result.response is defined
      - result.changed == true
      - result.response.status == "SUCCEEDED"
      - result.volume_group_ext_id == "{{vg1_uuid}}"
      - result.ext_id == "{{disk2_uuid}}"
      - result.task_ext_id is defined

    fail_msg: "Unable to delete disk"
    success_msg: "Disk deleted successfully"

######################################### Cleanup #########################################
- name: Delete Volume group
  ntnx_volume_groups_v2:
    state: absent
    ext_id: "{{ vg1_uuid }}"
  register: result
  ignore_errors: true

- name: Verify delete of VGs
  ansible.builtin.assert:
    that:
      - result.error == None
      - result.changed == true
      - result.ext_id == "{{ vg1_uuid }}"
      - result.task_ext_id is defined
      - result.response.status == "SUCCEEDED"
    fail_msg: "Unable to delete VG"
    success_msg: "VG deleted successfully"
