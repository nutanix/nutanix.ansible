---
# Variables required before running this playbook:
# - external_nat_subnet
# - vpc
# - private_ip
# - vm

- name: Create floating ip with external subnet uuid
  ntnx_floating_ips:
    state: present
    wait: true
    external_subnet:
      uuid: "{{ external_nat_subnet.uuid }}"
  register: result
  ignore_errors: true
- name: Creation Status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create floating ip with external subnet uuid "
    success_msg: " Floating ip with external subnet uuid created successfully "

- name: Adding floating ip to delete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [  result.fip_uuid ] }}"
##############################################################
- name: Create floating ip with vpc name and external subnet uuid
  ntnx_floating_ips:
    state: present
    external_subnet:
      uuid: "{{external_nat_subnet.uuid}}"
    vpc:
      name: "{{ vpc.name }}"
    private_ip: "{{ private_ip }}"
  register: result
  ignore_errors: true

- name: Creation Status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create floating ip with vpc "
    success_msg: " Floating ip with vpc name and external subnet uuid created successfully "

- name: Adding floating ip to delete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [  result.fip_uuid ] }}"
##########################################################
- name: Delete Floating ip with check mode
  ntnx_floating_ips:
    state: absent
    fip_uuid: "{{ result.fip_uuid  }}"
  register: output
  ignore_errors: true
  check_mode: true

- name: Delete Floating ip with check mode Status
  ansible.builtin.assert:
    that:
      - output.failed == false
      - output.changed == false
      - output.msg =="Floating IP with uuid:{{  result.fip_uuid }} will be deleted."
      - output.fip_uuid == "{{ result.fip_uuid   }}"
    fail_msg: "Delete floating ip with check mode failed"
    success_msg: "Delete floating ip with check mode passed"

- name: Delete all created floating ips
  ntnx_floating_ips:
    state: absent
    fip_uuid: "{{ item }}"
  register: result
  loop: "{{ todelete }}"

- name: Removing all floating ips from delete list
  ansible.builtin.set_fact:
    todelete: []
###########################################################
- name: Create floating ip with external subnet name
  ntnx_floating_ips:
    state: present
    wait: true
    external_subnet:
      name: "{{ external_nat_subnet.name }}"
  register: result
  ignore_errors: true

- name: Creation Status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create floating ip with external subnet name "
    success_msg: " Floating ip with external subnet name created successfully "

- name: Adding floating ip to delete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [  result.fip_uuid ] }}"
############################################################
- name: Create floating ip with vpc uuid and external subnet name
  ntnx_floating_ips:
    state: present
    external_subnet:
      name: "{{ external_nat_subnet.name }}"
    vpc:
      uuid: "{{ vpc.uuid }}"
    private_ip: "{{ private_ip }}"
  register: result
  ignore_errors: true

- name: Creation Status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create floating ip with vpc uuid and external subnet name "
    success_msg: " Floating ip with vpc uuid and external subnet name created successfully "

- name: Adding floating ip to delete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [  result.fip_uuid ] }}"
############################################################
- name: Delete all created floating ips
  ntnx_floating_ips:
    state: absent
    fip_uuid: "{{ item }}"
  register: result
  loop: "{{ todelete }}"
  ignore_errors: true

- name: Removing all floating ips from delete list
  ansible.builtin.set_fact:
    todelete: []
#########################################################
- name: Create floating ip with external subnet and vm name
  ntnx_floating_ips:
    state: present
    external_subnet:
      name: "{{ external_nat_subnet.name }}"
    vm:
      name: "{{ vm.name }}"
  ignore_errors: true
  register: result

- name: Creation Status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create floating ip with vm"
    success_msg: " Floating ip with external subnet and vm created successfully "

- name: Adding floating ip to delete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [  result.fip_uuid ] }}"
#########################################################
- name: Delete all created floating ips
  ntnx_floating_ips:
    state: absent
    fip_uuid: "{{ item }}"
  register: result
  loop: "{{ todelete }}"
  ignore_errors: true

- name: Removing all floating ips from delete list
  ansible.builtin.set_fact:
    todelete: []
#########################################################
- name: Create floating ip with external subnet and vm uuid
  ntnx_floating_ips:
    state: present
    external_subnet:
      name: "{{ external_nat_subnet.name }}"
    vm:
      uuid: "{{ vm.uuid }}"
  ignore_errors: true
  register: result

- name: Creation Status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create floating ip with vm"
    success_msg: " Floating ip with external subnet and vm created successfully "

- name: Adding floating ip to delete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [  result.fip_uuid ] }}"
##########################################################
- name: Delete all created floating ips
  ntnx_floating_ips:
    state: absent
    fip_uuid: "{{ item }}"
  register: result
  loop: "{{ todelete }}"
  ignore_errors: true
