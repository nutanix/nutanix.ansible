- name: Create min VPC with subnet name
  ntnx_vpcs:
    validate_certs: False
    state: present
    wait: True
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    name: MinVPC
    external_subnets:
      - subnet_name: "{{ external_subnet.name }}"
  register: result
  ignore_errors: True

- set_fact:
    todelete: "{{ todelete + [  result.vpc_uuid ] }}"

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create Min vpc with subnet name"
    success_msg: " Min vpc with subnet name created successfully "

##########################################################
- name: Create min VPC with external_subnet uuid
  ntnx_vpcs:
    validate_certs: False
    state: present
    wait: true
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    name: MinVPC
    external_subnets:
      - subnet_uuid: "{{ external_subnet.uuid }}"
  register: result
  ignore_errors: True

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create Min vpc with external subnet uuid "
    success_msg: " Min vpc with external subnet uuid created successfully "

- set_fact:
    todelete: "{{ todelete + [  result.vpc_uuid ] }}"
##########################################################
- name: Delete all created vpcs
  ntnx_vpcs:
    state: absent
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    validate_certs: False
    vpc_uuid: "{{ item }}"
  register: result
  loop: "{{ todelete }}"
  ignore_errors: True

- set_fact:
    todelete: []
##########################################################
- name: Create VPC with routable_ips
  ntnx_vpcs:
    validate_certs: False
    state: present
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    name: vpc_with_routable_ips
    routable_ips:
      - network_ip: "{{ routable_ips.network_ip }}"
        network_prefix:  "{{ routable_ips.network_prefix }}"
  register: result
  ignore_errors: True

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create vpc with routable_ips "
    success_msg: " VPC with routable ips created successfully "

- set_fact:
    todelete: "{{ todelete + [  result.vpc_uuid ] }}"
##########################################################
- name: Create VPC with routable_ips and external subnet
  ntnx_vpcs:
    validate_certs: False
    state: present
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    name: vpc_with_routable_ips and external subnet
    external_subnets:
      - subnet_name: "{{ external_subnet.name }}"
    routable_ips:
      - network_ip: "{{ routable_ips.network_ip_2 }}"
        network_prefix:  "{{ routable_ips.network_prefix_2 }}"
  register: result
  ignore_errors: True

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create vpc with routable_ips and external subnet "
    success_msg: " VPC with routable ips and external subnet created successfully "

- set_fact:
    todelete: "{{ todelete + [  result.vpc_uuid ] }}"
##########################################################
- name: Create VPC with dns_servers
  ntnx_vpcs:
    validate_certs: False
    state: present
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    name: vpc_with_dns_servers
    dns_servers: "{{ dns_servers }}"
  register: result
  ignore_errors: True
- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create vpc with dns_servers "
    success_msg: " VPC with dns_servers created successfully "

- set_fact:
    todelete: "{{ todelete + [  result.vpc_uuid ] }}"
##########################################################
- name: Delete all created vpcs
  ntnx_vpcs:
    state: absent
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    validate_certs: False
    vpc_uuid: "{{ item }}"
  register: result
  loop: "{{ todelete }}"
  ignore_errors: True

- set_fact:
    todelete: []
##########################################################
- name: Create VPC with all specfactions
  ntnx_vpcs:
    validate_certs: False
    state: present
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    name: vpc_with_add_specfactions
    external_subnets:
      - subnet_name: "{{ external_subnet.name }}"
    dns_servers: "{{ dns_servers }}"
    routable_ips:
      - network_ip: "{{ routable_ips.network_ip }}"
        network_prefix:  "{{ routable_ips.network_prefix }}"
  register: result
  ignore_errors: True

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create vpc all specfactions "
    success_msg: " VPC with all specfactions created successfully "

- set_fact:
    todelete: "{{ todelete + [  result.vpc_uuid ] }}"
##########################################################
- name: Delete all created vpcs
  ntnx_vpcs:
    state: absent
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    validate_certs: False
    vpc_uuid: "{{ item }}"
  register: result
  loop: "{{ todelete }}"
  ignore_errors: True
