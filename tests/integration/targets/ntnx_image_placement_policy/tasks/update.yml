---
- debug:
    msg: start ntnx_image_placement_policy update tests

- name: Create image placement policy with minimal spec for update tests
  ntnx_image_placement_policy:
    name: "test_policy_6"
    placement_type: soft
    image_categories:
      AnalyticsExclusions:
        - EfficiencyMeasurement
    cluster_categories:
      AppTier:
        - Default
    categories:
      Environment:
        - "Dev"
      AppType:
        - "Default"
  register: setup_policy

- name: Creation Status
  assert:
    that:
      - setup_policy.response is defined
      - setup_policy.changed == true
      - setup_policy.response.status.state == 'COMPLETE'
    fail_msg: "Unable to create image placement policy with minimal spec"
    success_msg: "Image placement policy with minimal spec created successfully"

- set_fact:
    todelete: '{{ todelete + [  setup_policy["response"]["metadata"]["uuid"] ] }}'

#############################################################################################

- name: test idempotency by definig same spec as before
  ntnx_image_placement_policy:
    state: present
    policy_uuid: "{{ setup_policy.response.metadata.uuid }}"
    placement_type: "soft"
    image_categories:
      AnalyticsExclusions:
        - EfficiencyMeasurement
    cluster_categories:
      AppTier:
        - Default
    categories:
      Environment:
        - "Dev"
      AppType:
        - "Default"
  register: result

- name: Update Status
  assert:
    that:
      - result.changed == false
      - "'Nothing to change' in result.msg"
    fail_msg: "Image placement policy got updated"
    success_msg: "Image placement policy update skipped successfully due to no changes in spec"

#####################################################################################################

- name: update all specs
  ntnx_image_placement_policy:
    state: present
    policy_uuid: "{{ setup_policy.response.metadata.uuid }}"
    placement_type: "hard"
    name: "test_policy_6_updated"
    desc: "test_policy_6_desc_updated"
    image_categories:
      AppTier:
        - Default
    cluster_categories:
      AnalyticsExclusions:
        - EfficiencyMeasurement
    categories:
      Environment:
        - "Production"
      AppType:
        - "Default"
  register: result

- name: Update Status
  assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.response.status.state == 'COMPLETE'
      - result.response.status.name == 'test_policy_6_updated'
      - result.response.status.description == 'test_policy_6_desc_updated'
      - result.response.status.resources.image_entity_filter.params["AppTier"][0] == 'Default'
      - result.response.status.resources.cluster_entity_filter.params["AnalyticsExclusions"][0] == 'EfficiencyMeasurement'
      - result.response.status.resources.placement_type == 'EXACTLY'
      - result.response.metadata.categories_mapping["Environment"] == ['Production']
      - result.response.metadata.categories_mapping["AppType"] == ['Default']
    fail_msg: "Unable to update image placement policy"
    success_msg: "Image placement policy updated successfully"

#####################################################################################################

- name: remove attached categories to the policy
  ntnx_image_placement_policy:
    state: present
    policy_uuid: "{{ setup_policy.response.metadata.uuid }}"
    remove_categories: true
  register: result

- name: Update Status
  assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.response.status.state == 'COMPLETE'
      - result.response.metadata.categories_mapping == {}
    fail_msg: "Unable to remove categories from image placement policy"
    success_msg: "Image placement policy updated successfully"

##################################################CLEANUP#######################################################

- name: cleanup created entities
  ntnx_image_placement_policy:
    state: absent
    policy_uuid: "{{ item }}"
  register: result
  loop: "{{ todelete }}"
  ignore_errors: True

- set_fact:
    todelete: []
