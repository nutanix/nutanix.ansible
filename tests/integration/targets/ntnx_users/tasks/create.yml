---
# Variables required before running this playbook:
# - principal_name
# - directory_service_uuid
# - project
# - identity_provider_uuid
# - todelete

- name: Start ntnx_users tests
  ansible.builtin.debug:
    msg: "Start ntnx_users tests"
##################################################
- name: Create local user with check mode
  ntnx_users:
    principal_name: "{{principal_name}}"
    directory_service_uuid: "{{directory_service_uuid}}"
    project:
      uuid: "{{project.uuid}}"
  register: result
  ignore_errors: true
  check_mode: true

- name: Create user with check mode Status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.user_uuid ==  None
      - result.response.spec.resources.directory_service_user.directory_service_reference.uuid == "{{directory_service_uuid}}"
    fail_msg: "Create local user with check mode failed"
    success_msg: "Create local user with check mode passed"

#################################################
- name: Create local user
  ntnx_users:
    principal_name: "{{principal_name}}"
    directory_service_uuid: "{{directory_service_uuid}}"
  register: result
  ignore_errors: true

- name: Check listing status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
      - result.user_uuid is defined
      - result.response.status.state == "COMPLETE"
      - result.response.status.name == "{{principal_name}}"
      - result.response.status.resources.directory_service_user.directory_service_reference.uuid == "{{directory_service_uuid}}"
    fail_msg: "fail"
    success_msg: "pass"

- name: Adding user uuid to todelete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [  result.user_uuid ] }}"
#################################################
- name: Delete user with check mode
  ntnx_users:
    state: absent
    user_uuid: "{{  result.user_uuid  }}"
  register: output
  ignore_errors: true
  check_mode: true

- name: Delete user with check mode Status
  ansible.builtin.assert:
    that:
      - output.failed == false
      - output.changed == false
      - output.msg =='User with uuid:{{  result.user_uuid }} will be deleted.'
      - output.uuid == '{{ result.user_uuid  }}'
    fail_msg: "Delete user with check mode failed"
    success_msg: "Delete user with check mode passed"
#################################################
- name: Delete created users
  ntnx_users:
    state: absent
    user_uuid: "{{ item }}"
  loop: "{{ todelete }}"
  register: result
  ignore_errors: true
- name: Check listing status
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.msg == "All items completed"
    fail_msg: "Fail: unable to delete all users"
    success_msg: "Pass: all users deleted successfully"
- name: Reset todelete list
  ansible.builtin.set_fact:
    todelete: []
#################################################
- name: Create local user  with project and categories
  ntnx_users:
    principal_name: "{{principal_name}}"
    directory_service_uuid: "{{directory_service_uuid}}"
    project:
      uuid: "{{project.uuid}}"
    categories:
      Environment:
        - "Dev"
      AppType:
        - "Default"
  register: result
  ignore_errors: true

- name: Check listing status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
      - result.user_uuid is defined
      - result.response.status.state == "COMPLETE"
      - result.response.status.name == "{{principal_name}}"
      - result.response.status.resources.directory_service_user.directory_service_reference.uuid == "{{directory_service_uuid}}"
    fail_msg: "fail"
    success_msg: "pass"

- name: Adding user uuid to todelete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [  result.user_uuid ] }}"
#################################################
- name: Create local user not in the directory_service
  ntnx_users:
    principal_name: wrong_name
    directory_service_uuid: "{{directory_service_uuid}}"
    project:
      uuid: "{{project.uuid}}"
    categories:
      Environment:
        - "Dev"
      AppType:
        - "Default"
  register: result
  ignore_errors: true

- name: Check listing status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.failed == true
      - result.changed == false
    fail_msg: "Fail: create wrong user"
    success_msg: "Pass: Returned as expected"
#################################################
# - name: create idp user
#   ntnx_users:
#     identity_provider_uuid: "{{identity_provider_uuid}}"
#     username: testing_user
#   register: result
#   ignore_errors: true

# - name: check listing status
#   ansible.builtin.assert:
#     that:
#       - result.response is defined
#       - result.changed == true
#       - result.failed == false
#       - result.user_uuid is defined
#       - result.response.status.state == "COMPLETE"
#       - result.response.status.name == "testing_user"
#     fail_msg: "Fail: unable to create idp user"
#     success_msg: "Pass: idp user created successfully"

# - ansible.builtin.set_fact:
#      todelete: "{{ todelete + [  result.user_uuid ] }}"
#################################################
- name: Delete created users
  ntnx_users:
    state: absent
    user_uuid: "{{ item }}"
  loop: "{{ todelete }}"
  register: result
  ignore_errors: true
- name: Check listing status
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.msg == "All items completed"
    fail_msg: "Fail: unable to delete all users"
    success_msg: "Pass: all users deleted successfully"
- name: Reset todelete list
  ansible.builtin.set_fact:
    todelete: []

############# DELETE TEST ##############################

- name: Create local user
  ntnx_users:
    principal_name: "{{principal_name}}"
    directory_service_uuid: "{{directory_service_uuid}}"
    project:
      uuid: "{{project.uuid}}"
  register: result
  ignore_errors: true

- name: Delete created user
  ntnx_users:
    state: absent
    user_uuid: "{{ result.user_uuid }}"
  register: output
  ignore_errors: true

- name: Check delete status
  ansible.builtin.assert:
    that:
      - output.changed == true
      - output.response is defined
      - output.response.status == 'SUCCEEDED'
      - output.uuid == '{{ result.user_uuid }}'
    fail_msg: "Fail: unable to delete users"
    success_msg: "Pass: users deleted successfully"
