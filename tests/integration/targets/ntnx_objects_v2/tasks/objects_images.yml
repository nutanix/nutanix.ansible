---
- name: Start objects images tests
  ansible.builtin.debug:
    msg: Start objects images tests

- name: List all object stores with filter
  nutanix.ncp.ntnx_object_stores_info_v2:
    filter: name eq '{{ object_1_name }}'
  register: result
  ignore_errors: true

- name: List object stores with filter status
  ansible.builtin.assert:
    that:
      - result.changed is false
      - result.failed is false
      - result.response is defined
      - result.response | length == 1
      - result.response[0].name == "{{ object_1_name }}"
    success_msg: "Object stores are listed successfully with filter"
    fail_msg: "Object stores are not listed successfully with filter"

- name: Set object store external ID
  ansible.builtin.set_fact:
    object_store_ext_id_1: "{{ result.response[0].ext_id }}"

- name: Generate AWS access key and secret key from username and password
  ansible.builtin.set_fact:
    aws_access_key: "{{ (username + ':' + password) | b64encode }}"
    aws_secret_key: "{{ (username + ':' + password) | b64encode }}"

- name: Configure AWS CLI access key
  ansible.builtin.shell: |
    aws configure set aws_access_key_id {{ aws_access_key }}
  register: aws_configure_access_key
  ignore_errors: true
  changed_when: aws_configure_access_key.rc == 0 and aws_configure_access_key.cmd == "aws configure set aws_access_key_id " ~ aws_access_key ~ "\n"

- name: Assert AWS CLI access key is configured
  ansible.builtin.assert:
    that:
      - aws_configure_access_key is defined
      - aws_configure_access_key.changed is true
      - aws_configure_access_key.failed is false
      - aws_configure_access_key.rc == 0
      - aws_configure_access_key.cmd == "aws configure set aws_access_key_id {{ aws_access_key }}\n"
    success_msg: "AWS CLI access key configured successfully"
    fail_msg: "Failed to configure AWS CLI access key"

- name: Configure AWS CLI secret key
  ansible.builtin.shell: |
    aws configure set aws_secret_access_key {{ aws_secret_key }}
  register: aws_configure_secret_key
  ignore_errors: true
  changed_when: aws_configure_secret_key.rc == 0 and aws_configure_secret_key.cmd == "aws configure set aws_secret_access_key " ~ aws_secret_key ~ "\n"

- name: Assert AWS CLI secret key is configured
  ansible.builtin.assert:
    that:
      - aws_configure_secret_key is defined
      - aws_configure_secret_key.changed is true
      - aws_configure_secret_key.failed is false
      - aws_configure_secret_key.rc == 0
      - aws_configure_secret_key.cmd == "aws configure set aws_secret_access_key {{ aws_secret_key }}\n"
    success_msg: "AWS CLI secret key configured successfully"
    fail_msg: "Failed to configure AWS CLI secret key"

- name: Configure AWS CLI endpoint URL
  ansible.builtin.shell: |
    aws configure set endpoint_url {{ objects_API }}
  register: aws_configure_endpoint_url
  ignore_errors: true
  changed_when: aws_configure_endpoint_url.rc == 0 and aws_configure_endpoint_url.cmd == "aws configure set endpoint_url " ~ objects_API ~ "\n"

- name: Assert AWS CLI endpoint URL is configured
  ansible.builtin.assert:
    that:
      - aws_configure_endpoint_url is defined
      - aws_configure_endpoint_url.changed is true
      - aws_configure_endpoint_url.failed is false
      - aws_configure_endpoint_url.rc == 0
      - aws_configure_endpoint_url.cmd == "aws configure set endpoint_url {{ objects_API }}\n"
    success_msg: "AWS CLI endpoint URL configured successfully"
    fail_msg: "Failed to configure AWS CLI endpoint URL"

- name: Upload image to object store bucket using AWS CLI
  ansible.builtin.shell: |
    aws s3api put-object --bucket vmm-images --body {{ disk_image.dest }} --key {{ object_1_name }} --no-verify-ssl
  register: upload_result
  ignore_errors: true
  changed_when: "'ETag' in upload_result.stdout"

- name: Assert image upload to object store bucket succeeded
  ansible.builtin.assert:
    that:
      - upload_result is defined
      - upload_result.failed is false
      - upload_result.rc == 0
      - upload_result.changed is true
      - upload_result.stdout is search('"ETag"')
    success_msg: "Image uploaded to object store bucket successfully"
    fail_msg: "Failed to upload image to object store bucket"

- name: Create image using object store source with check mode enabled
  nutanix.ncp.ntnx_images_v2:
    name: "object-image"
    description: "Image created from object store"
    type: "DISK_IMAGE"
    source:
      objects_lite_source:
        key: "object_name"
  register: result
  check_mode: true
  ignore_errors: true

- name: Assert image creation with check mode
  ansible.builtin.assert:
    that:
      - result is defined
      - result.failed is false
      - result.changed is false
      - result.response.name == "object-image"
      - result.response.description == "Image created from object store"
      - result.response.type == "DISK_IMAGE"
    success_msg: "Image creation with object store source using check mode passed"
    fail_msg: "Image creation with object store source using check mode failed"

- name: Create image using object lite source
  nutanix.ncp.ntnx_images_v2:
    name: "object-image"
    description: "Image created from object store"
    type: "DISK_IMAGE"
    source:
      objects_lite_source:
        key: "{{ object_1_name }}"
  register: result
  ignore_errors: true

- name: Assert image is created from object store successfully
  ansible.builtin.assert:
    that:
      - result is defined
      - result.failed is false
      - result.changed is true
      - result.response is defined
      - result.response.name == "object-image"
      - result.response.description == "Image created from object store"
      - result.response.type == "DISK_IMAGE"
      - result.response.ext_id is defined
      - result.task_ext_id is defined
      - result.response.source.url is defined
      - "'objects' in result.response.source.url"
    success_msg: "Image is created from object store successfully"
    fail_msg: "Failed to create image from object store"

- name: Set image external ID
  ansible.builtin.set_fact:
    image_ext_id: "{{ result.response.ext_id }}"

- name: Create image using wrong object lite source key
  nutanix.ncp.ntnx_images_v2:
    name: "object-image-wrong-key"
    description: "Image created from object store with wrong key"
    type: "DISK_IMAGE"
    source:
      objects_lite_source:
        key: "wrong_key"
  register: result
  ignore_errors: true

- name: Assert image creation with wrong object lite source key
  ansible.builtin.assert:
    that:
      - result is defined
      - result.failed is true
      - result.changed is false
      - result.response.error_messages | length > 0
      - result.response.status == "FAILED"
    success_msg: "Image creation with wrong object lite source key failed as expected"
    fail_msg: "Image creation with wrong object lite source key did not fail as expected"

- name: Delete the image created from object store
  nutanix.ncp.ntnx_images_v2:
    ext_id: "{{ image_ext_id }}"
    state: absent
  register: result
  ignore_errors: true

- name: Assert image deletion
  ansible.builtin.assert:
    that:
      - result is defined
      - result.failed is false
      - result.changed is true
      - result.response is defined
      - result.response.status == "SUCCEEDED"
    success_msg: "Image created from object store is deleted successfully"
    fail_msg: "Failed to delete image created from object store"
