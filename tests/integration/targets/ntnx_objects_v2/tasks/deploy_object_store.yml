---
- name: Start deploy objects tests
  ansible.builtin.debug:
    msg: Start deploy objects tests

- name: Generate random string
  ansible.builtin.set_fact:
    random_name: "{{ query('community.general.random_string', numbers=false, special=false, length=12)[0] }}"

- name: Set variables
  ansible.builtin.set_fact:
    suffix_name: ansible-ag
    vm_num_sockets: 2
    vm_description: ansible test ova

- name: Generate spec for creating object store with check mode
  nutanix.ncp.ntnx_object_stores_v2:
    name: "ansible-object"
    description: "object store test"
    deployment_version: "5.1.1"
    domain: "test.domain.nutanix.com"
    region: "us-west-1"
    num_worker_nodes: 3
    cluster_ext_id: "00063125-0d92-06e0-185b-ac1f6b6f97e2"
    storage_network_reference: "13870980-c370-4aa3-846b-f6cb864f61e5"
    storage_network_vip:
      ipv4:
        value: "10.30.30.10"
    storage_network_dns_ip:
      ipv4:
        value: "10.30.30.11"
    public_network_reference: "7f4a6e2b-91c2-4d9e-9f3e-2d8c1c9983a4"
    public_network_ips:
      - ipv4:
          value: "10.30.30.12"
      - ipv4:
          value: "10.30.30.13"
    total_capacity_gi_b: 21474836480
  register: result
  check_mode: true
  ignore_errors: true

- name: Generate spec for creating object store with check mode status
  ansible.builtin.assert:
    that:
      - result.changed is false
      - result.failed is false
      - result.response is defined
      - result.response.cluster_ext_id == "00063125-0d92-06e0-185b-ac1f6b6f97e2"
      - result.response.name == "ansible-object"
      - result.response.description == "object store test"
      - result.response.deployment_version == "5.1.1"
      - result.response.domain == "test.domain.nutanix.com"
      - result.response.region == "us-west-1"
      - result.response.num_worker_nodes == 3
      - result.response.storage_network_reference == "13870980-c370-4aa3-846b-f6cb864f61e5"
      - result.response.storage_network_vip.ipv4.value == "10.30.30.10"
      - result.response.storage_network_dns_ip.ipv4.value == "10.30.30.11"
      - result.response.public_network_reference == "7f4a6e2b-91c2-4d9e-9f3e-2d8c1c9983a4"
      - result.response.public_network_ips[0].ipv4.value == "10.30.30.12"
      - result.response.public_network_ips[1].ipv4.value == "10.30.30.13"
      - result.response.total_capacity_gi_b == 21474836480
    success_msg: "Spec for creating object store is generated successfully with check mode"
    fail_msg: "Spec for creating object store is not generated successfully with check mode"

- name: Deploy first object store with one worker node
  nutanix.ncp.ntnx_object_stores_v2:
    name: "ansible-object-1"
    cluster_ext_id: "{{ cluster.uuid }}"
    description: "object store test 1"
    domain: "{{ objects.domain }}"
    num_worker_nodes: "{{ objects.num_worker_nodes }}"
    storage_network_reference: "{{ objects.storage_network_reference.uuid }}"
    storage_network_vip:
      ipv4:
        value: "{{ objects.storage_network_reference.IPs[0] }}"
    storage_network_dns_ip:
      ipv4:
        value: "{{ objects.storage_network_reference.IPs[1] }}"
    public_network_reference: "{{ objects.public_network_reference.uuid }}"
    public_network_ips:
      - ipv4:
          value: "{{ objects.public_network_reference.IPs[0] }}"
    total_capacity_gi_b: "{{ objects.total_capacity_gi_b }}"
  register: result
  ignore_errors: true

- name: Deploy first object store with one worker node status
  ansible.builtin.assert:
    that:
      - result.changed is true
      - result.failed is false
      - result.response is defined
      - result.task_ext_id is defined
      - result.response.cluster_ext_id == "{{ cluster.uuid }}"
      - result.response.name == "ansible-object-1"
      - result.response.description == "object store test 1"
      - result.response.domain == "{{ objects.domain }}"
      - result.response.num_worker_nodes == {{ objects.num_worker_nodes }}
      - result.response.storage_network_reference == "{{ objects.storage_network_reference.uuid }}"
      - result.response.storage_network_vip.ipv4.value == "{{ objects.storage_network_reference.IPs[0] }}"
      - result.response.storage_network_dns_ip.ipv4.value == "{{ objects.storage_network_reference.IPs[1] }}"
      - result.response.public_network_reference == "{{ objects.public_network_reference.uuid }}"
      - result.response.public_network_ips[0].ipv4.value == "{{ objects.public_network_reference.IPs[0] }}"
      - result.response.total_capacity_gi_b == {{ objects.total_capacity_gi_b }}
      - result.response.state == "OBJECT_STORE_AVAILABLE"
    success_msg: "First object store with one worker node is deployed successfully"
    fail_msg: "First object store with one worker node is not deployed successfully"

- name: Set object store external ID
  ansible.builtin.set_fact:
    object_store_ext_id_1: "{{ result.response.ext_id }}"

- name: Fetch object store using external ID
  nutanix.ncp.ntnx_object_stores_info_v2:
    ext_id: "{{ object_store_ext_id_1 }}"
  register: result

- name: Set object store name
  ansible.builtin.set_fact:
    object_name: "{{ result.response.name }}"

- name: Generate AWS access key and secret key from username and password
  ansible.builtin.set_fact:
    aws_access_key: "{{ (username + ':' + password) | b64encode }}"
    aws_secret_key: "{{ (username + ':' + password) | b64encode }}"

- name: Configure AWS CLI access key
  ansible.builtin.shell: |
    aws configure set aws_access_key_id {{ aws_access_key }}
  register: aws_configure_access_key
  ignore_errors: true
  changed_when: aws_configure_access_key.rc == 0 and aws_configure_access_key.cmd == "aws configure set aws_access_key_id " ~ aws_access_key ~ "\n"

- name: Assert AWS CLI access key is configured
  ansible.builtin.assert:
    that:
      - aws_configure_access_key is defined
      - aws_configure_access_key.changed is true
      - aws_configure_access_key.failed is false
      - aws_configure_access_key.rc == 0
      - aws_configure_access_key.cmd == "aws configure set aws_access_key_id {{ aws_access_key }}\n"
    success_msg: "AWS CLI access key configured successfully"
    fail_msg: "Failed to configure AWS CLI access key"

- name: Configure AWS CLI secret key
  ansible.builtin.shell: |
    aws configure set aws_secret_access_key {{ aws_secret_key }}
  register: aws_configure_secret_key
  ignore_errors: true
  changed_when: aws_configure_secret_key.rc == 0 and aws_configure_secret_key.cmd == "aws configure set aws_secret_access_key " ~ aws_secret_key ~ "\n"

- name: Assert AWS CLI secret key is configured
  ansible.builtin.assert:
    that:
      - aws_configure_secret_key is defined
      - aws_configure_secret_key.changed is true
      - aws_configure_secret_key.failed is false
      - aws_configure_secret_key.rc == 0
      - aws_configure_secret_key.cmd == "aws configure set aws_secret_access_key {{ aws_secret_key }}\n"
    success_msg: "AWS CLI secret key configured successfully"
    fail_msg: "Failed to configure AWS CLI secret key"

- name: Configure AWS CLI endpoint URL
  ansible.builtin.shell: |
    aws configure set endpoint_url {{ objects_API }}
  register: aws_configure_endpoint_url
  ignore_errors: true
  changed_when: aws_configure_endpoint_url.rc == 0 and aws_configure_endpoint_url.cmd == "aws configure set endpoint_url " ~ objects_API ~ "\n"

- name: Assert AWS CLI endpoint URL is configured
  ansible.builtin.assert:
    that:
      - aws_configure_endpoint_url is defined
      - aws_configure_endpoint_url.changed is true
      - aws_configure_endpoint_url.failed is false
      - aws_configure_endpoint_url.rc == 0
      - aws_configure_endpoint_url.cmd == "aws configure set endpoint_url {{ objects_API }}\n"
    success_msg: "AWS CLI endpoint URL configured successfully"
    fail_msg: "Failed to configure AWS CLI endpoint URL"

- name: Upload image to object store bucket using AWS CLI
  ansible.builtin.shell: |
    aws s3api put-object --bucket vmm-images --body {{ disk_image.dest }} --key {{ object_name }} --no-verify-ssl
  register: upload_result
  ignore_errors: true
  changed_when: "'ETag' in upload_result.stdout"

- name: Assert image upload to object store bucket succeeded
  ansible.builtin.assert:
    that:
      - upload_result is defined
      - upload_result.failed is false
      - upload_result.rc == 0
      - upload_result.changed is true
      - upload_result.stdout is search('"ETag"')
    success_msg: "Image uploaded to object store bucket successfully"
    fail_msg: "Failed to upload image to object store bucket"

- name: Create image using object store source with check mode enabled
  nutanix.ncp.ntnx_images_v2:
    name: "object-image"
    description: "Image created from object store"
    type: "DISK_IMAGE"
    source:
      objects_lite_source:
        key: "object_name"
  register: result
  check_mode: true
  ignore_errors: true

- name: Assert image creation with check mode
  ansible.builtin.assert:
    that:
      - result is defined
      - result.failed is false
      - result.changed is false
      - result.response.name == "object-image"
      - result.response.description == "Image created from object store"
      - result.response.type == "DISK_IMAGE"
    success_msg: "Image creation with object store source using check mode passed"
    fail_msg: "Image creation with object store source using check mode failed"

- name: Create image using object lite source
  nutanix.ncp.ntnx_images_v2:
    name: "object-image"
    description: "Image created from object store"
    type: "DISK_IMAGE"
    source:
      objects_lite_source:
        key: "{{ object_name }}"
  register: result
  ignore_errors: true

- name: Assert image is created from object store successfully
  ansible.builtin.assert:
    that:
      - result is defined
      - result.failed is false
      - result.changed is true
      - result.response is defined
      - result.response.name == "object-image"
      - result.response.description == "Image created from object store"
      - result.response.type == "DISK_IMAGE"
      - result.response.ext_id is defined
      - result.task_ext_id is defined
      - result.response.source.url is defined
      - "'objects' in result.response.source.url"
    success_msg: "Image is created from object store successfully"
    fail_msg: "Failed to create image from object store"

- name: Set image external ID
  ansible.builtin.set_fact:
    image_ext_id: "{{ result.response.ext_id }}"

- name: Create image using wrong object lite source key
  nutanix.ncp.ntnx_images_v2:
    name: "object-image-wrong-key"
    description: "Image created from object store with wrong key"
    type: "DISK_IMAGE"
    source:
      objects_lite_source:
        key: "wrong_key"
  register: result
  ignore_errors: true

- name: Assert image creation with wrong object lite source key
  ansible.builtin.assert:
    that:
      - result is defined
      - result.failed is true
      - result.changed is false
      - result.response.error_messages | length > 0
      - result.response.status == "FAILED"
    success_msg: "Image creation with wrong object lite source key failed as expected"
    fail_msg: "Image creation with wrong object lite source key did not fail as expected"

- name: Delete the image created from object store
  nutanix.ncp.ntnx_images_v2:
    ext_id: "{{ image_ext_id }}"
    state: absent
  register: result
  ignore_errors: true

- name: Assert image deletion
  ansible.builtin.assert:
    that:
      - result is defined
      - result.failed is false
      - result.changed is true
      - result.response is defined
      - result.response.status == "SUCCEEDED"
    success_msg: "Image created from object store is deleted successfully"
    fail_msg: "Failed to delete image created from object store"

- name: Set VM name, ova name
  ansible.builtin.set_fact:
    vm_name: "{{ random_name }}{{ suffix_name }}vm"
    ova_name: "{{ random_name }}{{ suffix_name }}ova"

- name: Create VM with some specific requirements
  nutanix.ncp.ntnx_vms_v2:
    name: "{{ vm_name }}"
    description: "{{ vm_description }}"
    cluster:
      ext_id: "{{ cluster.uuid }}"
    num_sockets: "{{ vm_num_sockets }}"
  register: result
  ignore_errors: true

- name: Creation Status of VM with some specific requirements
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == True
      - result.failed == False
      - result.response.cluster.ext_id == "{{ cluster.uuid }}"
      - result.response.name == vm_name
      - result.response.description == vm_description
      - result.response.num_sockets == {{ vm_num_sockets }}
    fail_msg: " Unable to create VM with specific requirements "
    success_msg: " VM with specific requirements created successfully "

- name: Store Vm ext_id
  ansible.builtin.set_fact:
    vm_ext_id: "{{ result.response.ext_id }}"

- name: Create Ova from the VM
  nutanix.ncp.ntnx_ova_v2:
    name: "{{ ova_name }}"
    source:
      ova_vm_source:
        vm_ext_id: "{{ vm_ext_id }}"
        disk_file_format: "QCOW2"
  register: ova_result
  ignore_errors: true

- name: Ova Creation Status
  ansible.builtin.assert:
    that:
      - ova_result.response is defined
      - ova_result.changed == True
      - ova_result.failed == False
      - ova_result.ext_id is defined
      - ova_result.response.ext_id is defined
      - ova_result.task_ext_id is defined
      - ova_result.response.name == ova_name
      - ova_result.response.vm_config.name == vm_name
      - ova_result.response.disk_format == "QCOW2"
    fail_msg: " Unable to create Ova from VM "
    success_msg: " Ova created successfully from VM "

- name: Set Ova external ID
  ansible.builtin.set_fact:
    ova_ext_id: "{{ ova_result.response.ext_id }}"

- name: Download Ova
  nutanix.ncp.ntnx_ova_download_v2:
    ova_ext_id: "{{ ova_ext_id }}"
  register: download_result
  ignore_errors: true

- name: Upload Ova to object store bucket using AWS CLI
  ansible.builtin.shell: |
    aws s3api put-object --bucket vmm-ovas --body {{ download_result.response.path }} --key {{ object_name }} --no-verify-ssl
  register: upload_ova_result
  ignore_errors: true
  changed_when: "'ETag' in upload_ova_result.stdout"

- name: Assert Ova upload to object store bucket succeeded
  ansible.builtin.assert:
    that:
      - upload_ova_result is defined
      - upload_ova_result.failed is false
      - upload_ova_result.rc == 0
      - upload_ova_result.changed is true
      - upload_ova_result.stdout is search('"ETag"')
    success_msg: "Ova uploaded to object store bucket successfully"
    fail_msg: "Failed to upload Ova to object store bucket"

- name: Create ova using object store source with check mode enabled
  nutanix.ncp.ntnx_ova_v2:
    name: "object-ova"
    source:
      objects_lite_source:
        key: "{{ object_name }}"
    cluster_location_ext_ids:
      - "{{ cluster.uuid }}"
  register: result
  check_mode: true
  ignore_errors: true

- name: Assert Ova creation with check mode
  ansible.builtin.assert:
    that:
      - result is defined
      - result.failed is false
      - result.changed is false
      - result.response.name == "object-ova"
      - result.response.cluster_location_ext_ids is defined
      - result.response.cluster_location_ext_ids[0] == "{{ cluster.uuid }}"
      - result.response.source.key == object_name
    success_msg: "Ova creation with object store source using check mode passed"
    fail_msg: "Ova creation with object store source using check mode failed"

- name: Create ova using object store source
  nutanix.ncp.ntnx_ova_v2:
    name: "object-ova"
    source:
      objects_lite_source:
        key: "{{ object_name }}"
    cluster_location_ext_ids:
      - "{{ cluster.uuid }}"
  register: result
  ignore_errors: true

- name: Assert Ova is created from object store successfully
  ansible.builtin.assert:
    that:
      - result is defined
      - result.failed is false
      - result.changed is true
      - result.response is defined
      - result.response.name == "object-ova"
      - result.response.cluster_location_ext_ids is defined
      - result.response.cluster_location_ext_ids[0] == "{{ cluster.uuid }}"
      - result.response.ext_id is defined
    success_msg: "Ova is created from object store successfully"
    fail_msg: "Failed to create Ova from object store"

- name: Set Ova external ID
  ansible.builtin.set_fact:
    ova_ext_id: "{{ result.response.ext_id }}"

- name: Create ova using wrong object lite source key
  nutanix.ncp.ntnx_ova_v2:
    name: "object-ova-wrong-key"
    source:
      objects_lite_source:
        key: "wrong_key"
    cluster_location_ext_ids:
      - "{{ cluster.uuid }}"
  register: result
  ignore_errors: true

- name: Assert Ova creation with wrong object lite source key
  ansible.builtin.assert:
    that:
      - result is defined
      - result.failed is true
      - result.changed is false
      - result.response.error_messages | length > 0
      - result.response.status == "FAILED"
    success_msg: "Ova creation with wrong object lite source key failed as expected"
    fail_msg: "Ova creation with wrong object lite source key did not fail as expected"

- name: Delete the Ova created from object store
  nutanix.ncp.ntnx_ova_v2:
    ext_id: "{{ ova_ext_id }}"
    state: absent
  register: result
  ignore_errors: true

- name: Ova Deletion Status
  ansible.builtin.assert:
    that:
      - delete_result.response.status == 'SUCCEEDED'
      - delete_result.response is defined
      - delete_result.changed == True
      - delete_result.failed == False
      - delete_result.ext_id == ova_ext_id
    fail_msg: " Unable to delete Ova "
    success_msg: " Ova deleted successfully "

- name: Deploy second object store with one worker node
  nutanix.ncp.ntnx_object_stores_v2:
    name: "ansible-object-2"
    cluster_ext_id: "{{ cluster.uuid }}"
    description: "object store test 2"
    domain: "{{ objects.domain }}"
    num_worker_nodes: 2
    storage_network_reference: "{{ objects.storage_network_reference.uuid }}"
    storage_network_vip:
      ipv4:
        value: "{{ objects.storage_network_reference.IPs[2] }}"
    storage_network_dns_ip:
      ipv4:
        value: "{{ objects.storage_network_reference.IPs[3] }}"
    public_network_reference: "{{ objects.public_network_reference.uuid }}"
    public_network_ips:
      - ipv4:
          value: "{{ objects.public_network_reference.IPs[1] }}"
    total_capacity_gi_b: "{{ objects.total_capacity_gi_b }}"
  register: result
  ignore_errors: true

- name: Deploy second object store with one worker node status
  ansible.builtin.assert:
    that:
      - result.changed is true
      - result.failed is false
      - result.response is defined
      - result.task_ext_id is defined
      - result.response.cluster_ext_id == "{{ cluster.uuid }}"
      - result.response.name == "ansible-object-2"
      - result.response.description == "object store test 2"
      - result.response.domain == "{{ objects.domain }}"
      - result.response.num_worker_nodes == 1
      - result.response.storage_network_reference == "{{ objects.storage_network_reference.uuid }}"
      - result.response.storage_network_vip.ipv4.value == "{{ objects.storage_network_reference.IPs[2] }}"
      - result.response.storage_network_dns_ip.ipv4.value == "{{ objects.storage_network_reference.IPs[3] }}"
      - result.response.public_network_reference == "{{ objects.public_network_reference.uuid }}"
      - result.response.public_network_ips[0].ipv4.value == "{{ objects.public_network_reference.IPs[1] }}"
      - result.response.total_capacity_gi_b == {{ objects.total_capacity_gi_b }}
      - result.response.state == "OBJECT_STORE_AVAILABLE"
    success_msg: "Second object store with one worker node is deployed successfully"
    fail_msg: "Second object store with one worker node is not deployed successfully"

- name: Set object store external ID
  ansible.builtin.set_fact:
    object_store_ext_id_2: "{{ result.response.ext_id }}"

- name: List all certificates for an object store
  nutanix.ncp.ntnx_object_stores_certificate_info_v2:
    object_store_ext_id: "{{ object_store_ext_id_1 }}"
  register: result

- name: List all certificates for an object store status
  ansible.builtin.assert:
    that:
      - result.changed is false
      - result.failed is false
      - result.response is defined
      - result.response | length == 1
    success_msg: "All certificates are listed successfully"
    fail_msg: "All certificates are not listed successfully"

- name: Set certificate external ID
  ansible.builtin.set_fact:
    certificate_ext_id: "{{ result.response[0].ext_id }}"

- name: Create a temporary JSON file for certificate details
  ansible.builtin.copy:
    mode: "0644"
    content: |
      {
        "alternateIps": [
          {
            "ipv4": {
              "value": "{{ objects.public_network_reference.IPs[0] }}"
            }
          }
        ],
      }
    dest: "/tmp/certificate_details.json"

- name: Create certificate for an object store using check mode
  nutanix.ncp.ntnx_object_stores_certificate_v2:
    object_store_ext_id: "{{ object_store_ext_id_1 }}"
    path: "/tmp/certificate_details.json"
  register: result
  check_mode: true
  ignore_errors: true

- name: Create certificate for an object store using check mode status
  ansible.builtin.assert:
    that:
      - result.changed is false
      - result.failed is false
      - result.object_store_ext_id == "{{ object_store_ext_id_1 }}"
      - result.path == "/tmp/certificate_details.json"
      - result.msg == "New certificate will be created for the object store with ext_id:{{ object_store_ext_id_1 }}
        using the certificate details file:/tmp/certificate_details.json"
    success_msg: "Create certificate for an object store using check mode passed"
    fail_msg: "Create certificate for an object store using check mode failed"

- name: Create certificate for an object store
  nutanix.ncp.ntnx_object_stores_certificate_v2:
    object_store_ext_id: "{{ object_store_ext_id_1 }}"
    path: "/tmp/certificate_details.json"
  register: result
  ignore_errors: true

- name: Create certificate for an object store status
  ansible.builtin.assert:
    that:
      - result.changed is true
      - result.failed is false
      - result.response is defined
      - result.task_ext_id is defined
      - result.response.status == "SUCCEEDED"
    success_msg: "Certificate is created successfully"
    fail_msg: "Certificate is not created successfully"

- name: List all certificates for an object store
  nutanix.ncp.ntnx_object_stores_certificate_info_v2:
    object_store_ext_id: "{{ object_store_ext_id_1 }}"
  register: result
  ignore_errors: true

- name: List all certificates for an object store status
  ansible.builtin.assert:
    that:
      - result.changed is false
      - result.failed is false
      - result.response is defined
      - result.response | length == 1
      - result.response[0].ext_id != "{{ certificate_ext_id }}"
    success_msg: "All certificates are listed successfully"
    fail_msg: "All certificates are not listed successfully"

- name: Set certificate external ID
  ansible.builtin.set_fact:
    certificate_ext_id: "{{ result.response[0].ext_id }}"

- name: Fetch certificate details using external ID
  nutanix.ncp.ntnx_object_stores_certificate_info_v2:
    object_store_ext_id: "{{ object_store_ext_id_1 }}"
    ext_id: "{{ certificate_ext_id }}"
  register: result

- name: Fetch certificate details using external ID status
  ansible.builtin.assert:
    that:
      - result.changed is false
      - result.failed is false
      - result.response is defined
      - result.response.ext_id == "{{ certificate_ext_id }}"
    success_msg: "Certificate details are fetched successfully using external ID"
    fail_msg: "Certificate details are not fetched successfully using external ID"

- name: List all object stores
  nutanix.ncp.ntnx_object_stores_info_v2:
  register: result

- name: List all object stores status
  ansible.builtin.assert:
    that:
      - result.changed is false
      - result.failed is false
      - result.response is defined
      - result.response | length >= 2
    success_msg: "All object stores are listed successfully"
    fail_msg: "All object stores are not listed successfully"

- name: Set object store name
  ansible.builtin.set_fact:
    object_store_name: "{{ result.response[0].name }}"

- name: List all object stores with filter
  nutanix.ncp.ntnx_object_stores_info_v2:
    filter: name eq '{{ object_store_name }}'
  register: result

- name: List object stores with filter status
  ansible.builtin.assert:
    that:
      - result.changed is false
      - result.failed is false
      - result.response is defined
      - result.response | length == 1
      - result.response[0].name == "{{ object_store_name }}"
    success_msg: "Object stores are listed successfully with filter"
    fail_msg: "Object stores are not listed successfully with filter"

- name: List object stores with limit
  nutanix.ncp.ntnx_object_stores_info_v2:
    limit: 1
    page: 0
  register: result

- name: List object stores with limit status
  ansible.builtin.assert:
    that:
      - result.changed is false
      - result.failed is false
      - result.response is defined
      - result.response | length == 1
    success_msg: "Object stores are listed successfully with limit"
    fail_msg: "Object stores are not listed successfully with limit"

- name: Fetch object store details using external ID
  nutanix.ncp.ntnx_object_stores_info_v2:
    ext_id: "{{ object_store_ext_id_1 }}"
  register: result

- name: Fetch object store details using external ID status
  ansible.builtin.assert:
    that:
      - result.changed is false
      - result.failed is false
      - result.response is defined
      - result.response.ext_id == "{{ object_store_ext_id_1 }}"
      - result.response.name == "ansible-object-1"
      - result.response.description == "object store test 1"
      - result.response.domain == "{{ objects.domain }}"
      - result.response.num_worker_nodes == {{ objects.num_worker_nodes }}
      - result.response.storage_network_reference == "{{ objects.storage_network_reference.uuid }}"
      - result.response.storage_network_vip.ipv4.value == "{{ objects.storage_network_reference.IPs[0] }}"
      - result.response.storage_network_dns_ip.ipv4.value == "{{ objects.storage_network_reference.IPs[1] }}"
      - result.response.public_network_reference == "{{ objects.public_network_reference.uuid }}"
      - result.response.public_network_ips[0].ipv4.value == "{{ objects.public_network_reference.IPs[0] }}"
      - result.response.total_capacity_gi_b == {{ objects.total_capacity_gi_b }}
      - result.response.state == "OBJECT_STORE_AVAILABLE"
      - result.response.cluster_ext_id == "{{ cluster.uuid }}"
    success_msg: "Object store details are fetched successfully using external ID"
    fail_msg: "Object store details are not fetched successfully using external ID"

- name: Delete object store with check mode
  nutanix.ncp.ntnx_object_stores_v2:
    ext_id: "{{ object_store_ext_id_1 }}"
    state: absent
  register: result
  check_mode: true
  ignore_errors: true

- name: Delete object store with check mode status
  ansible.builtin.assert:
    that:
      - result.msg is defined
      - result.changed is false
      - result.failed is false
      - result.ext_id == "{{ object_store_ext_id_1 }}"
      - result.msg == "Object store with ext_id:{{ object_store_ext_id_1 }} will be deleted."
    success_msg: "Delete object store with check mode passed"
    fail_msg: "Delete object store with check mode failed"

- name: Set object store external ID
  ansible.builtin.set_fact:
    object_store_ext_id: "{{ object_store_ext_id_1 }}"

# example of delete bucket API (delete_bucket_api):
# https://{{ ip }}:{{ port }}/oss/api/nutanix/v3/objectstore_proxy/{{ object_store_ext_id }}/buckets/{{ objects.bucket_name }}?force_empty_bucket=true

- name: Delete bucket in first object store
  ansible.builtin.uri:
    url: "{{ delete_bucket_api }}"
    method: DELETE
    user: "{{ username }}"
    password: "{{ password }}"
    force_basic_auth: true
    validate_certs: false
    headers:
      Accept: "application/json"
    status_code: [200, 202]
  register: result

- name: Delete bucket status
  ansible.builtin.assert:
    that:
      - result.failed is false
      - result.status == 200 or result.status == 202
    success_msg: "Bucket is deleted successfully"
    fail_msg: "Bucket is not deleted successfully"

- name: Delete first object store
  nutanix.ncp.ntnx_object_stores_v2:
    ext_id: "{{ object_store_ext_id }}"
    state: absent
  register: result
  ignore_errors: true

- name: Delete object store status
  ansible.builtin.assert:
    that:
      - result.changed is true
      - result.failed is false
      - result.response is defined
      - result.task_ext_id is defined
      - result.response.status == "SUCCEEDED"
    success_msg: "Object store is deleted successfully"
    fail_msg: "Object store is not deleted successfully"

- name: Set object store external ID
  ansible.builtin.set_fact:
    object_store_ext_id: "{{ object_store_ext_id_2 }}"

- name: Delete bucket in second object store
  ansible.builtin.uri:
    url: "{{ delete_bucket_api }}"
    method: DELETE
    user: "{{ username }}"
    password: "{{ password }}"
    force_basic_auth: true
    validate_certs: false
    headers:
      Accept: "application/json"
    status_code: [200, 202]
  register: result

- name: Delete bucket status
  ansible.builtin.assert:
    that:
      - result.failed is false
      - result.status == 200 or result.status == 202
    success_msg: "Bucket is deleted successfully"
    fail_msg: "Bucket is not deleted successfully"

- name: Delete second object store
  nutanix.ncp.ntnx_object_stores_v2:
    ext_id: "{{ object_store_ext_id }}"
    state: absent
  register: result
  ignore_errors: true

- name: Delete second object store status
  ansible.builtin.assert:
    that:
      - result.changed is true
      - result.failed is false
      - result.response is defined
      - result.task_ext_id is defined
      - result.response.status == "SUCCEEDED"
    success_msg: "Second object store is deleted successfully"
    fail_msg: "Second object store is not deleted successfully"
