---
- name: Start ntnx_address_groups create tests
  ansible.builtin.debug:
    msg: Start ntnx_address_groups create tests

- name: Generate random project_name
  ansible.builtin.set_fact:
    random_name: "{{query('community.general.random_string',numbers=false, special=false,length=12)[0]}}"

- name: Set suffix name
  ansible.builtin.set_fact:
    suffix_name: "ansible-ag"

- name: Set address group names
  ansible.builtin.set_fact:
    ag1: "{{random_name}}{{suffix_name}}1"
    ag2: "{{random_name}}{{suffix_name}}2"

- name: Create address group
  ntnx_address_groups:
    state: present
    name: "{{ag1}}"
    desc: test-ansible-group-1-desc
    subnets:
      - network_ip: "10.1.1.0"
        network_prefix: 24
      - network_ip: "10.1.2.2"
        network_prefix: 32
  register: result

- name: Creation Status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.address_group_uuid is defined
      - result.changed == true
      - result.response.name == "{{ag1}}"
      - result.response.description == "test-ansible-group-1-desc"
      - result.response.ip_address_block_list[0].ip == "10.1.1.0"
      - result.response.ip_address_block_list[1].ip == "10.1.2.2"
      - result.response.ip_address_block_list[0].prefix_length == 24
      - result.response.ip_address_block_list[1].prefix_length == 32

    fail_msg: "Unable to create address group"
    success_msg: "Address group created susccessfully"

- name: Setting address group uuid to delete variable
  ansible.builtin.set_fact:
    todelete: '{{ result["address_group_uuid"] }}'

###################################################################################################

- name: Check if address group with existing name fails or not
  ntnx_address_groups:
    state: present
    name: "{{ag1}}"
    subnets:
      - network_ip: "10.1.1.0"
        network_prefix: 24
  register: result
  ignore_errors: true

- name: Creation Status
  ansible.builtin.assert:
    that:
      - result.msg == "Address group with given name already exists"
      - result.changed == False

    fail_msg: "Was able to create address group with existing address group name"
    success_msg: "Address group with existing address group name failed successfully"

###################################################################################################
- name: Check mode test
  check_mode: true
  ntnx_address_groups:
    state: present
    name: "{{ag2}}"
    desc: test-ansible-address-group-2-desc
    subnets:
      - network_ip: "10.1.1.0"
        network_prefix: 24
      - network_ip: "10.1.2.2"
        network_prefix: 32
  register: result

- name: Check mode Status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == False
      - result.response.name == "{{ag2}}"
      - result.response.description == "test-ansible-address-group-2-desc"
      - result.response.ip_address_block_list[0].ip == "10.1.1.0"
      - result.response.ip_address_block_list[1].ip == "10.1.2.2"
      - result.response.ip_address_block_list[0].prefix_length == 24
      - result.response.ip_address_block_list[1].prefix_length == 32

    fail_msg: "Unable to use check mode"
    success_msg: "Spec generated successfully with check mode"

###################################################################################################

- name: Cleanup created entities
  ntnx_address_groups:
    state: absent
    address_group_uuid: "{{ todelete }}"
  register: result
  ignore_errors: true

- name: Reset todelete list
  ansible.builtin.set_fact:
    todelete: ""
