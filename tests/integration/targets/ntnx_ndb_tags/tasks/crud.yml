---

- debug:
    msg: "start ntnx_ndb_tags"

- name: Generate random name
  set_fact:
    random_name: "{{query('community.general.random_string',numbers=false, special=false,length=12)}}"

- set_fact:
    tag_name: "{{random_name[0]}}"
    tag_name_updated: "{{random_name[0]}}-updated"

############################# Create tests ########################

- name: check mode for creation
  check_mode: yes
  ntnx_ndb_tags:
    name: "{{tag_name}}-timemachine"
    desc: tag-created-by-ansible
    tag_value_required: True
    entity_type: TIME_MACHINE
  register: result

- set_fact:
    expected_response: {
            "description": "tag-created-by-ansible",
            "entityType": "TIME_MACHINE",
            "name": "{{tag_name}}-timemachine",
            "required": true
    }

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.response == expected_response

    fail_msg: "Unable to create spec for tag"
    success_msg: "Spec generated successfully for tag creation"


- name: create tags for clone
  ntnx_ndb_tags:
    name: "{{tag_name}}-clone"
    desc: tag-created-by-ansible
    tag_value_required: True
    entity_type: CLONE
  register: result

- name: Check create status
  assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.uuid is defined
      - result.response.name ==  "{{tag_name}}-clone"
      - result.response.entityType == "CLONE"
      - result.response.status == "ENABLED"
      - result.response.description == "tag-created-by-ansible"
      - result.response.required == true
    fail_msg: "Tag for clone create failed"
    success_msg: "Tag for clone created successfully"

- set_fact:
    clone_tag_uuid: "{{result.uuid}}"

- name: create tags for database server
  ntnx_ndb_tags:
    name: "{{tag_name}}-database-server"
    desc: tag-created-by-ansible
    tag_value_required: True
    entity_type: DATABASE_SERVER
  register: result

- name: Check create status
  assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.uuid is defined
      - result.response.name ==  "{{tag_name}}-database-server"
      - result.response.entityType == "DATABASE_SERVER"
      - result.response.status == "ENABLED"
      - result.response.description == "tag-created-by-ansible"
      - result.response.required == true
    fail_msg: "Tag for database server create failed"
    success_msg: "Tag for clone created successfully"

- set_fact:
    db_server_tag_uuid: "{{result.uuid}}"

- name: create tags for time machine
  ntnx_ndb_tags:
    name: "{{tag_name}}-time-machine"
    desc: tag-created-by-ansible
    tag_value_required: True
    entity_type: TIME_MACHINE
  register: result

- name: Check create status
  assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.uuid is defined
      - result.response.name ==  "{{tag_name}}-time-machine"
      - result.response.entityType == "TIME_MACHINE"
      - result.response.status == "ENABLED"
      - result.response.description == "tag-created-by-ansible"
      - result.response.required == true
    fail_msg: "Tag for time machine create failed"
    success_msg: "Tag for time machine created successfully"

- set_fact:
    time_machine_tag_uuid: "{{result.uuid}}"

- name: create tags for databases
  ntnx_ndb_tags:
    name: "{{tag_name}}-database"
    desc: tag-created-by-ansible
    tag_value_required: False
    entity_type: DATABASE
  register: result

- set_fact:
    database_tag_uuid: "{{result.uuid}}"

- name: check create status
  assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.uuid is defined
      - result.response.name ==  "{{tag_name}}-database"
      - result.response.required == false
      - result.response.entityType == "DATABASE"
      - result.response.status == "ENABLED"
    fail_msg: "Tag create for databases failed"
    success_msg: "Tag created successfully"

- name: create another tag for databases
  ntnx_ndb_tags:
    name: "{{tag_name}}-database2"
    desc: tag-created-by-ansible
    tag_value_required: False
    entity_type: DATABASE
  register: result

- set_fact:
    database_tag2_uuid: "{{result.uuid}}"

- name: check create status
  assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.uuid is defined
      - result.response.name ==  "{{tag_name}}-database2"
      - result.response.required == false
      - result.response.entityType == "DATABASE"
      - result.response.status == "ENABLED"
    fail_msg: "Tag create for databases failed"
    success_msg: "Tag created successfully"


################################# Info Module tests ##########################

- name: get all tags
  ntnx_ndb_tags_info:
  register: result

- name: Check info status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response | length > 1
    fail_msg: "Fetching all tags failed"
    success_msg: "All tags obtained successfully"

- name: get tag based on uuid
  ntnx_ndb_tags_info:
    uuid: "{{database_tag_uuid}}"
  register: result

- name: Check info status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response.entityType == "DATABASE"
      - result.response.id == "{{database_tag_uuid}}"
    fail_msg: "get tag based on uuid failed"
    success_msg: "tag based on uuid obtained successfully"

- name: get all tags based on DATABASE entity type
  ntnx_ndb_tags_info:
    filters:
      entity_type: "DATABASE"
  register: result

- name: Check info status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response | length > 1
      - result.response[0].entityType == "DATABASE"
    fail_msg: "get all tags based on DATABASE entity type failed"
    success_msg: "all tags based on DATABASE entity type obtained successfully"

- name: get all tags based on CLONE entity type
  ntnx_ndb_tags_info:
    filters:
      entity_type: "CLONE"
  register: result

- name: Check info status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response | length > 0
      - result.response[0].entityType == "CLONE"
    fail_msg: "get all tags based on CLONE entity type failed"
    success_msg: "all tags based on CLONE entity type obtained successfully"

- name: get all tags based on TIME_MACHINE entity type
  ntnx_ndb_tags_info:
    filters:
      entity_type: "TIME_MACHINE"
  register: result

- name: Check info status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response | length > 0
      - result.response[0].entityType == "TIME_MACHINE"
    fail_msg: "get all tags based on TIME_MACHINE entity type failed"
    success_msg: "all tags based on TIME_MACHINE entity type obtained successfully"


- name: get all tags based on DATABASE_SERVER entity type
  ntnx_ndb_tags_info:
    filters:
      entity_type: "DATABASE_SERVER"
  register: result

- name: Check info status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response | length > 0
      - result.response[0].entityType == "DATABASE_SERVER"
    fail_msg: "get all tags based on DATABASE_SERVER entity type failed"
    success_msg: "all tags based on DATABASE_SERVER entity type obtained successfully"


- name: get tag based on DATABASE entity type and name
  ntnx_ndb_tags_info:
    filters:
      entity_type: "DATABASE"
    name: "{{tag_name}}-database2"
  register: result


- name: Check info status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response.entityType == "DATABASE"
      - result.response.name == "{{tag_name}}-database2"
    fail_msg: "get tag based on DATABASE entity type and name failed"
    success_msg: "tags based on DATABASE entity type and name obtained successfully"
################################## Update tests ########################

- set_fact:
    tag_uuid: "{{database_tag_uuid}}"

- name: update tag
  ntnx_ndb_tags:
    uuid: "{{tag_uuid}}"
    name: "{{tag_name_updated}}"
    desc: tag-created-by-ansible-updated
    tag_value_required: true
    status: "DEPRECATED"
  register: result

- name: Check update status
  assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.uuid is defined
      - result.response.name == "{{tag_name_updated}}"
      - result.response.required == true
      - result.response.entityType == "DATABASE"
      - result.response.status == "DEPRECATED"
    fail_msg: "tag update failed"
    success_msg: "tag updated successfully"



- name: idempotency checks
  ntnx_ndb_tags:
    uuid: "{{tag_uuid}}"
    name: "{{tag_name_updated}}"
    desc: tag-created-by-ansible-updated
    tag_value_required: true
    status: "DEPRECATED"
  register: result



- name: check idempotency status
  assert:
    that:
      - result.changed == false
      - result.failed == false
      - "'Nothing to change' in result.msg"
    fail_msg: "tag got updated"
    success_msg: "tag update skipped due to no state changes"


- name: enable tag
  ntnx_ndb_tags:
    uuid: "{{tag_uuid}}"
    tag_value_required: true
    status: "ENABLED"
  register: result



- name: check status changes
  assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.uuid == "{{tag_uuid}}"
      - result.response.status == "ENABLED"
    fail_msg: "Enabling tag failed"
    success_msg: "Tag enabled successfully"

############################################################### delete tests ########################################


- name: delete the database based tag
  ntnx_ndb_tags:
    state: "absent"
    uuid: "{{database_tag_uuid}}"
  register: result


- name: Check delete status
  assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
    fail_msg: "Unable to delete tag"
    success_msg: "tag deleted successfully"

- name: delete the database based tag
  ntnx_ndb_tags:
    state: "absent"
    uuid: "{{database_tag2_uuid}}"
  register: result

- name: Check delete status
  assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
    fail_msg: "Unable to delete tag"
    success_msg: "tag deleted successfully"


- name: delete the clone tag
  ntnx_ndb_tags:
    state: "absent"
    uuid: "{{clone_tag_uuid}}"
  register: result

- name: Check delete status
  assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
    fail_msg: "Unable to delete tag"
    success_msg: "tag deleted successfully"


- name: delete the time machine based tag
  ntnx_ndb_tags:
    state: "absent"
    uuid: "{{time_machine_tag_uuid}}"
  register: result

- name: Check delete status
  assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
    fail_msg: "Unable to delete tag"
    success_msg: "tag deleted successfully"


- name: delete the database server based tag
  ntnx_ndb_tags:
    state: "absent"
    uuid: "{{db_server_tag_uuid}}"
  register: result

- name: Check delete status
  assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
    fail_msg: "Unable to delete tag"
    success_msg: "tag deleted successfully"
