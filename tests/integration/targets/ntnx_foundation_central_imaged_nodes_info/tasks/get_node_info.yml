- debug:
    msg: start testing ntnx_foundation_central_imaged_nodes_info module

- name:  get all imaged nodes
  ntnx_foundation_central_imaged_nodes_info:
  register: nodes
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - nodes.changed==true
      - nodes.failed==false
      - nodes.response is defined
      - nodes.response.imaged_nodes is defined
      - nodes.response.metadata.length > 0
    fail_msg: "fail: unable to get all imaged nodes   "
    success_msg: "succes:  get all imaged nodes sucessfully  "

- name: get node by uuid
  ntnx_foundation_central_imaged_nodes_info:
    imaged_node_uuid: "{{nodes.response.imaged_nodes.0.imaged_node_uuid}}"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.changed==true
      - result.failed==false
      - result.response is defined
      - result.response.node_serial == nodes.response.imaged_nodes.0.node_serial
    fail_msg: "fail: unable to get node by uuid"
    success_msg: "succes:  get node by uuid successfully "

- name: get imaged node using custom filter
  ntnx_foundation_central_imaged_nodes_info:
    custom_filter:
      node_serial: "{{nodes.response.imaged_nodes.0.node_serial}}"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.changed==true
      - result.failed==false
      - result.response.imaged_nodes.0.imaged_node_uuid == nodes.response.imaged_nodes.0.imaged_node_uuid
      - result.response.metadata.length <=1
    fail_msg: "fail: unable to get imaged node using custom filter "
    success_msg: "succes: get imaged node using custom filter sucessfully"

# still offset and length and filter
