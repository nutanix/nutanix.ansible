---
- name: Start ntnx_password_manager_v2 tests
  ansible.builtin.debug:
    msg: start ntnx_password_manager_v2 tests

- name: Set password variables
  ansible.builtin.set_fact:
    password_count: 5
    password_length: 5
    special_characters: "@#$"
    passwords: ["{{ password }}"]

- name: Generate passwords
  ansible.builtin.set_fact:
    passwords: >-
      {{ passwords + [
        '.N.'.join(
          (lookup('password', '/dev/null length=' + (password_length | int) | string +
            ' chars=ascii_letters+digits+' + special_characters) | list) +
          (lookup('password', '/dev/null length=1 chars=ascii_lowercase') | list) +
          (lookup('password', '/dev/null length=1 chars=ascii_uppercase') | list) +
          (lookup('password', '/dev/null length=1 chars=digits') | list) +
          (lookup('password', '/dev/null length=1 chars=' + special_characters) | list)
        | shuffle)
      ] }}
  with_sequence: count={{ password_count }}

- name: Add the initial password to the list
  ansible.builtin.set_fact:
    passwords: "{{ passwords + [password] }}"

########################################################################################################

- name: List password status of all system users
  nutanix.ncp.ntnx_password_managers_info_v2:
  register: result
  ignore_errors: true

- name: List password status of all system users status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response | length > 0
    fail_msg: "Failed to retrieve password status of system users"
    success_msg: "Successfully retrieved password status of system users"

########################################################################################################

- name: List password status of system users with limit
  nutanix.ncp.ntnx_password_managers_info_v2:
    limit: 1
  register: result
  ignore_errors: true

- name: List password status of system users with limit status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response | length == 1
    fail_msg: "Failed to retrieve limited password status of system users"
    success_msg: "Successfully retrieved limited password status of system users"

########################################################################################################

- name: List password status of system users with filter admin
  nutanix.ncp.ntnx_password_managers_info_v2:
    filter: "username eq 'admin'"
  register: result
  ignore_errors: true

- name:  List password status of system users with filter admin status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response | length > 0
      - result.response[0].username == 'admin'
    fail_msg: "Failed to retrieve password status of system users with filter admin"
    success_msg: "Successfully retrieved password status of system users with filter admin"

########################################################################################################

- name: List password status of system users with filter admin PC
  nutanix.ncp.ntnx_password_managers_info_v2:
    filter: "username eq 'admin' and systemType eq Clustermgmt.Config.SystemType'PC'"
  register: result
  ignore_errors: true

- name: List password status of system users with filter admin PC status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response | length > 0
      - result.response[0].username == 'admin'
      - result.response[0].system_type == 'PC'
    fail_msg: "Failed to retrieve password status of system users with filter admin PC"
    success_msg: "Successfully retrieved password status of system users with filter admin PC"

- name: Store ext_id of the password manager
  ansible.builtin.set_fact:
    admin_pc_ext_id: "{{ result.response[0].ext_id }}"

########################################################################################################

- name: List password status of system users with filter admin AOS status
  nutanix.ncp.ntnx_password_managers_info_v2:
    filter: "username eq 'admin' and systemType eq Clustermgmt.Config.SystemType'AOS'"
  register: result
  ignore_errors: true

- name: List password status of system users with filter admin AOS status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response | length > 0
      - result.response[0].username == 'admin'
      - result.response[0].system_type == 'AOS'
    fail_msg: "Failed to retrieve password status of system users with filter admin AOS"
    success_msg: "Successfully retrieved password status of system users with filter admin AOS"

- name: Store ext_id of the password manager AOS
  ansible.builtin.set_fact:
    admin_aos_ext_id: "{{ result.response[0].ext_id }}"

########################################################################################################

- name: Update Password for admin PC user check_mode
  nutanix.ncp.ntnx_password_managers_v2:
    ext_id: "123e4567-e89b-12d3-a456-426614174000"
    current_password: "{{ passwords[0] }}"
    new_password: "{{ passwords[1] }}"
  check_mode: true
  register: result
  ignore_errors: true

- name: Update Password for admin PC user check_mode status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.ext_id == "123e4567-e89b-12d3-a456-426614174000"
    fail_msg: "Check mode failed to update password for admin PC user"
    success_msg: "Check mode successfully validated password update for admin PC user"

########################################################################################################

- name: Update password for admin PC user
  nutanix.ncp.ntnx_password_managers_v2:
    nutanix_password: "{{ item }}"
    ext_id: "{{ admin_pc_ext_id }}"
    current_password: "{{ item }}"
    new_password: "{{ passwords[index+1] }}"
  register: update_password
  ignore_errors: true
  loop: "{{ passwords[:-1] }}"
  loop_control:
    index_var: index

- name: Update password for admin PC user status
  ansible.builtin.assert:
    that:
      - item.changed == true
      - item.failed == false
      - item.response is defined
      - item.ext_id == admin_pc_ext_id
      - item.response.status == 'SUCCEEDED'
    fail_msg: "Failed to update password for admin PC user"
    success_msg: "Successfully updated password for admin PC user"
  loop: "{{ update_password.results }}"

########################################################################################################

- name: Update password for admin AOS user
  nutanix.ncp.ntnx_password_managers_v2:
    ext_id: "{{ admin_aos_ext_id }}"
    current_password: "{{ item }}"
    new_password: "{{ passwords[index+1] }}"
  register: update_password_aos
  ignore_errors: true
  loop: "{{ passwords[:-1] }}"
  loop_control:
    index_var: index

- name: Update password for admin AOS user status
  ansible.builtin.assert:
    that:
      - item.changed == true
      - item.failed == false
      - item.response is defined
      - item.ext_id == admin_aos_ext_id
      - item.response.status == 'SUCCEEDED'
    fail_msg: "Failed to update password for admin AOS user"
    success_msg: "Successfully updated password for admin AOS user"
  loop: "{{ update_password_aos.results }}"

########################################################################################################

- name: Update password for admin PC user with wrong current password
  nutanix.ncp.ntnx_password_managers_v2:
    ext_id: "{{ admin_pc_ext_id }}"
    current_password: "wrong_password"
    new_password: "{{ passwords[1] }}"
  register: update_password_wrong
  ignore_errors: true

- name: Update password for admin PC user with wrong current password status
  ansible.builtin.assert:
    that:
      - update_password_wrong.changed == false
      - update_password_wrong.failed == true
      - update_password_wrong.response is defined
      - update_password_wrong.response.status == 'FAILED'
    fail_msg: "Failed to handle wrong current password for admin PC user"
    success_msg: "Successfully handled wrong current password for admin PC user"

########################################################################################################

- name: Update password with the same password for admin user PC
  nutanix.ncp.ntnx_password_managers_v2:
    ext_id: "{{ admin_pc_ext_id }}"
    current_password: "{{ passwords[0] }}"
    new_password: "{{ passwords[0] }}"
  register: update_password_same
  ignore_errors: true

- name: Update password with the same password for admin user PC status
  ansible.builtin.assert:
    that:
      - update_password_same.changed == false
      - update_password_same.failed == true
      - update_password_same.response is defined
      - update_password_same.response.status == 'FAILED'
    fail_msg: "Failed to handle same password update for admin PC user"
    success_msg: "Successfully handled same password update for admin PC user"

