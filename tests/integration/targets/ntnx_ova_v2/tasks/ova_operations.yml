---
- name: Start ova v2 tests
  ansible.builtin.debug:
    msg: Start ova v2 tests

- name: Generate random category key & value
  ansible.builtin.set_fact:
    random_name: "{{ query('community.general.random_string', numbers=false, special=false, length=12)[0] }}"

- name: Set variable
  ansible.builtin.set_fact:
    suffix_name: ansible-ag
    vm_num_sockets: 2
    vm_description: ansible test ova

- name: Set VM name, ova name and to delete list
  ansible.builtin.set_fact:
    todelete: []
    todelete_vm: []
    vm_name: "{{ random_name }}{{ suffix_name }}vm"
    ova_name: "{{ random_name }}{{ suffix_name }}ova"

#############################################################################################################################################

- name: Create VM with some specific requirements
  nutanix.ncp.ntnx_vms_v2:
    name: "{{ vm_name }}"
    description: "{{ vm_description }}"
    cluster:
      ext_id: "{{ cluster.uuid }}"
    num_sockets: "{{ vm_num_sockets }}"
  register: result
  ignore_errors: true

- name: Creation Status of VM with some specific requirements
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == True
      - result.failed == False
      - result.response.cluster.ext_id == "{{ cluster.uuid }}"
      - result.response.name == "{{ vm_name }}"
      - result.response.description == "{{ vm_description }}"
      - result.response.num_sockets == {{ vm_num_sockets }}
    fail_msg: " Unable to create VM with specific requirements "
    success_msg: " VM with specific requirements created successfully "

- name: Store Vm ext_id
  ansible.builtin.set_fact:
    # vm_ext_id: "{{ result.response.ext_id }}"
    todelete_vm: "{{ todelete_vm + [result.response.ext_id] }}"

##########################################################################################################################################

- name: Create an Ova from a VM check mode
  nutanix.ncp.ntnx_ova_v2:
    name: "ova_name"
    checksum:
      ova_sha1_checksum:
        hex_digest: "1234567890abcdef1234567890abcdef12345678"
    source:
      ova_vm_source:
        vm_ext_id: "123e4567-e89b-12d3-a456-426614174000"
        disk_file_format: "QCOW2"
    cluster_location_ext_ids:
      - b7f9c1a2-4d3e-4c2a-9e2f-1a2b3c4d5e6f
      - 0a1b2c3d-4e5f-6789-abcd-ef0123456789
    vm_config:
      name: "Test Ova VM"
      description: "Test Ova VM Description"
      num_sockets: 2
      num_cores_per_socket: 4
      num_threads_per_core: 2
      num_numa_nodes: 1
      memory_size_bytes: 8192
      is_vcpu_hard_pinning_enabled: true
      is_cpu_passthrough_enabled: false
      enabled_cpu_features:
        - "HARDWARE_VIRTUALIZATION"
      is_memory_overcommit_enabled: true
      is_gpu_console_enabled: false
      categories:
        - ext_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        - ext_id: 9c858901-8a57-4791-81fe-4c455b099bc9
      cluster:
        ext_id: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
      availability_zone:
        ext_id: "d4c3b2a1-6f5e-0987-dcba-0123456789ef"
      guest_tools:
        is_enabled: false
        capabilities:
          - "VSS_SNAPSHOT"
      hardware_clock_timezone: "UTC"
      is_branding_enabled: true
      boot_config:
        legacy_boot:
          boot_device:
            boot_device_disk:
              disk_address:
                bus_type: "SCSI"
                index: 0
          boot_order:
            - "DISK"
            - "CDROM"
      is_vga_console_enabled: true
      is_agent_vm: false
      disks:
        - disk_address:
            bus_type: "SCSI"
            index: 0
          backing_info:
            vm_disk:
              disk_size_bytes: 10737418240
              storage_container:
                ext_id: "e89b1234-5678-90ab-cdef-1234567890ab"
              storage_config:
                is_flash_mode_enabled: true
      cd_roms:
        - disk_address:
            bus_type: "SATA"
            index: 0
          backing_info:
            disk_size_bytes: 10737418240
            storage_container:
              ext_id: "e89b1234-5678-90ab-cdef-1234567890ab"
            storage_config:
              is_flash_mode_enabled: true
      nics:
        - backing_info:
            is_connected: true
          network_info:
            nic_type: "NORMAL_NIC"
            subnet:
              ext_id: "123e4567-e89b-12d3-a456-426614174000"
            vlan_mode: "ACCESS"
      serial_ports:
        - is_connected: true
          index: 0
    disk_format: "QCOW2"
  register: result
  ignore_errors: true
  check_mode: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: Create an Ova from a VM check mode status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == False
      - result.failed == False
      - result.response.name == "ova_name"
      - result.response.checksum.hex_digest == "1234567890abcdef1234567890abcdef12345678"
      - result.response.source.vm_ext_id == "123e4567-e89b-12d3-a456-426614174000"
      - result.response.source.disk_file_format == "QCOW2"
      - result.response.cluster_location_ext_ids == ["b7f9c1a2-4d3e-4c2a-9e2f-1a2b3c4d5e6f", "0a1b2c3d-4e5f-6789-abcd-ef0123456789"]
      - result.response.vm_config.name == "Test Ova VM"
      - result.response.vm_config.description == "Test Ova VM Description"
      - result.response.vm_config.num_sockets == 2
      - result.response.vm_config.num_cores_per_socket == 4
      - result.response.vm_config.num_threads_per_core == 2
      - result.response.vm_config.num_numa_nodes == 1
      - result.response.vm_config.memory_size_bytes == 8192
      - result.response.vm_config.is_vcpu_hard_pinning_enabled == true
      - result.response.vm_config.is_cpu_passthrough_enabled == false
      - result.response.vm_config.enabled_cpu_features == ["HARDWARE_VIRTUALIZATION"]
      - result.response.vm_config.is_memory_overcommit_enabled == true
      - result.response.vm_config.is_gpu_console_enabled == false
      - result.response.vm_config.categories[0].ext_id == "f47ac10b-58cc-4372-a567-0e02b2c3d479"
      - result.response.vm_config.categories[1].ext_id == "9c858901-8a57-4791-81fe-4c455b099bc9"
      - result.response.vm_config.cluster.ext_id == "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
      - result.response.vm_config.availability_zone.ext_id == "d4c3b2a1-6f5e-0987-dcba-0123456789ef"
      - result.response.vm_config.guest_tools.is_enabled == false
      - result.response.vm_config.guest_tools.capabilities == ["VSS_SNAPSHOT"]
      - result.response.vm_config.hardware_clock_timezone == "UTC"
      - result.response.vm_config.is_branding_enabled == true
      - result.response.vm_config.boot_config.boot_device.disk_address.bus_type == "SCSI"
      - result.response.vm_config.boot_config.boot_device.disk_address.index == 0
      - result.response.vm_config.boot_config.boot_order == ["DISK", "CDROM"]
      - result.response.vm_config.is_vga_console_enabled == true
      - result.response.vm_config.is_agent_vm == false
      - result.response.vm_config.disks[0].disk_address.bus_type == "SCSI"
      - result.response.vm_config.disks[0].disk_address.index == 0
      - result.response.vm_config.disks[0].backing_info.disk_size_bytes == 10737418240
      - result.response.vm_config.disks[0].backing_info.storage_container.ext_id == "e89b1234-5678-90ab-cdef-1234567890ab"
      - result.response.vm_config.disks[0].backing_info.storage_config.is_flash_mode_enabled == true
      - result.response.vm_config.cd_roms[0].disk_address.bus_type == "SATA"
      - result.response.vm_config.cd_roms[0].disk_address.index == 0
      - result.response.vm_config.cd_roms[0].backing_info.disk_size_bytes == 10737418240
      - result.response.vm_config.cd_roms[0].backing_info.storage_container.ext_id == "e89b1234-5678-90ab-cdef-1234567890ab"
      - result.response.vm_config.cd_roms[0].backing_info.storage_config.is_flash_mode_enabled == true
      - result.response.vm_config.nics[0].backing_info.is_connected == true
      - result.response.vm_config.nics[0].network_info.nic_type == "NORMAL_NIC"
      - result.response.vm_config.nics[0].network_info.subnet.ext_id == "123e4567-e89b-12d3-a456-426614174000"
      - result.response.vm_config.nics[0].network_info.vlan_mode == "ACCESS"
      - result.response.vm_config.serial_ports[0].is_connected == true
      - result.response.vm_config.serial_ports[0].index == 0
      - result.response.disk_format == "QCOW2"
    fail_msg: " Unable to create Ova from VM in check mode "
    success_msg: " Ova created successfully from VM in check mode "

########################################################################################################################################

- name: Create Ova from the VM
  nutanix.ncp.ntnx_ova_v2:
    name: "{{ ova_name }}"
    source:
      ova_vm_source:
        vm_ext_id: "{{ todelete_vm[0] }}"
        disk_file_format: "QCOW2"
  register: result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: Ova Creation Status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == True
      - result.failed == False
      - result.ext_id is defined
      - result.response.ext_id is defined
      - result.task_ext_id is defined
      - result.response.name == "{{ ova_name }}"
      - result.response.vm_config.name == "{{ vm_name }}"
      - result.response.disk_format == "QCOW2"
    fail_msg: " Unable to create Ova from VM "
    success_msg: " Ova created successfully from VM "

- name: Add Ova ext_id to todelete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [result.response.ext_id] }}"

############################################################################################################

- name: Create Ova from the VM changing VM config
  nutanix.ncp.ntnx_ova_v2:
    name: "{{ ova_name }}_changed"
    source:
      ova_vm_source:
        vm_ext_id: "{{ todelete_vm[0] }}"
        disk_file_format: "QCOW2"
    vm_config:
      name: "{{ vm_name }}_changed"
      num_cores_per_socket: 4
  register: result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: Create Ova from the VM changing VM config status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == True
      - result.failed == False
      - result.ext_id is defined
      - result.response.ext_id is defined
      - result.task_ext_id is defined
      - result.response.name == "{{ ova_name }}_changed"
      - result.response.vm_config.name == "{{ vm_name }}_changed"
      - result.response.vm_config.num_cores_per_socket == 4
    fail_msg: " Unable to create Ova from VM with changed VM config "
    success_msg: " Ova created successfully from VM with changed VM config "

- name: Add Ova ext_id to todelete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [result.response.ext_id] }}"

############################################################################################################

- name: Create an Ova from a VM that does not exist
  nutanix.ncp.ntnx_ova_v2:
    name: "ova_name_non_existent"
    source:
      ova_vm_source:
        vm_ext_id: "123e4567-e89b-12d3-a456-426614174000"
        disk_file_format: "QCOW2"
  register: result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: Ova Creation Status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == False
      - result.failed == True
      - result.msg == "Task Failed"
    fail_msg: " Ova creation from non-existent VM failed"
    success_msg: " Ova creation from non-existent VM failed as expected "

############################################################################################################

- name: Update Ova check mode
  nutanix.ncp.ntnx_ova_v2:
    ext_id: "{{ todelete[0] }}"
    name: "{{ ova_name }}_updated"
  register: result
  ignore_errors: true
  check_mode: true

- name: Update Ova check mode Status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.failed == False
      - result.ext_id is defined
      - result.response.name == "{{ ova_name }}_updated"
    fail_msg: " Update Ova check mode failed "
    success_msg: " Update Ova check mode successful "

############################################################################################################

- name: Update Ova
  nutanix.ncp.ntnx_ova_v2:
    ext_id: "{{ todelete[0] }}"
    name: "{{ ova_name }}_updated"
  register: result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: Ova Update Status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == True
      - result.failed == False
      - result.ext_id is defined
      - result.response.ext_id is defined
      - result.task_ext_id is defined
      - result.response.name == "{{ ova_name }}_updated"
    fail_msg: " Unable to update Ova "
    success_msg: " Ova updated successfully "

#############################################################################################################

- name: Idempotency check in Ova update
  nutanix.ncp.ntnx_ova_v2:
    ext_id: "{{ todelete[0] }}"
    name: "{{ ova_name }}_updated"
  register: result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: Idempotency check in Ova update Status
  ansible.builtin.assert:
    that:
      - result.skipped == true
      - result.response is defined
      - result.msg == "Nothing to change."
    fail_msg: " Idempotency check in Ova update failed "
    success_msg: " Idempotency check in Ova update successful "

#############################################################################################################
      
- name: Update an Ova that does not exist
  nutanix.ncp.ntnx_ova_v2:
    ext_id: "123e4567-e89b-12d3-a456-426614174000"
    name: "{{ ova_name }}_non_existent_updated"
  register: result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: Update an Ova that does not exist status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == False
      - result.failed == True
      - result.msg == "Api Exception raised while fetching OVA info using ext_id"
    fail_msg: " update non-existent Ova failed"
    success_msg: " Non-existent Ova update passed "

#############################################################################################################

- name: Create an Ova from a url check mode
  nutanix.ncp.ntnx_ova_v2:
    name: "ova_name"
    checksum:
      ova_sha1_checksum:
        hex_digest: "1234567890abcdef1234567890abcdef12345678"
    source:
      ova_url_source:
        url: "https://example.com/path/to/ova/file.ova"
        should_allow_insecure_url: true
        basic_auth:
          username: "test_user"
          password: "test_password"
    cluster_location_ext_ids:
      - b7f9c1a2-4d3e-4c2a-9e2f-1a2b3c4d5e6f
      - 0a1b2c3d-4e5f-6789-abcd-ef0123456789
    vm_config:
      name: "Test Ova VM"
      description: "Test Ova VM Description"
      num_sockets: 2
      num_cores_per_socket: 4
      num_threads_per_core: 2
      num_numa_nodes: 1
      memory_size_bytes: 8192
      is_vcpu_hard_pinning_enabled: true
      is_cpu_passthrough_enabled: false
      enabled_cpu_features:
        - "HARDWARE_VIRTUALIZATION"
      is_memory_overcommit_enabled: true
      is_gpu_console_enabled: false
      categories:
        - ext_id: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        - ext_id: "9c858901-8a57-4791-81fe-4c455b099bc9"
      cluster:
        ext_id: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
      availability_zone:
        ext_id: "d4c3b2a1-6f5e-0987-dcba-0123456789ef"
      guest_tools:
        is_enabled: false
        capabilities:
          - "VSS_SNAPSHOT"
      hardware_clock_timezone: "UTC"
      is_branding_enabled: true
      boot_config:
        legacy_boot:
          boot_device:
            boot_device_disk:
              disk_address:
                bus_type: "SCSI"
                index: 0
          boot_order:
            - "DISK"
            - "CDROM"
      is_vga_console_enabled: true
      is_agent_vm: false
      disks:
        - disk_address:
            bus_type: "SCSI"
            index: 0
          backing_info:
            vm_disk:
              disk_size_bytes: 10737418240
              storage_container:
                ext_id: "e89b1234-5678-90ab-cdef-1234567890ab"
              storage_config:
                is_flash_mode_enabled: true
      cd_roms:
        - disk_address:
            bus_type: "SATA"
            index: 0
          backing_info:
            disk_size_bytes: 10737418240
            storage_container:
              ext_id: "e89b1234-5678-90ab-cdef-1234567890ab"
            storage_config:
              is_flash_mode_enabled: true
      nics:
        - backing_info:
            is_connected: true
          network_info:
            nic_type: "NORMAL_NIC"
            subnet:
              ext_id: "123e4567-e89b-12d3-a456-426614174000"
            vlan_mode: "ACCESS"
      serial_ports:
        - is_connected: true
          index: 0
    disk_format: "QCOW2"
  register: result
  ignore_errors: true
  check_mode: true

- name: Create an Ova from a url check mode status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == False
      - result.failed == False
      - result.response.name == "ova_name"
      - result.response.checksum.hex_digest == "1234567890abcdef1234567890abcdef12345678"
      - result.response.source.url == "https://example.com/path/to/ova/file.ova"
      - result.response.source.should_allow_insecure_url == true
      - result.response.source.basic_auth.username == "test_user"
      - result.response.cluster_location_ext_ids == ["b7f9c1a2-4d3e-4c2a-9e2f-1a2b3c4d5e6f", "0a1b2c3d-4e5f-6789-abcd-ef0123456789"]
      - result.response.vm_config.name == "Test Ova VM"
      - result.response.vm_config.description == "Test Ova VM Description"
      - result.response.vm_config.num_sockets == 2
      - result.response.vm_config.num_cores_per_socket == 4
      - result.response.vm_config.num_threads_per_core == 2
      - result.response.vm_config.num_numa_nodes == 1
      - result.response.vm_config.memory_size_bytes == 8192
      - result.response.vm_config.is_vcpu_hard_pinning_enabled == true
      - result.response.vm_config.is_cpu_passthrough_enabled == false
      - result.response.vm_config.enabled_cpu_features == ["HARDWARE_VIRTUALIZATION"]
      - result.response.vm_config.is_memory_overcommit_enabled == true
      - result.response.vm_config.is_gpu_console_enabled == false
      - result.response.vm_config.categories[0].ext_id == "f47ac10b-58cc-4372-a567-0e02b2c3d479"
      - result.response.vm_config.categories[1].ext_id == "9c858901-8a57-4791-81fe-4c455b099bc9"
      - result.response.vm_config.cluster.ext_id == "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
      - result.response.vm_config.availability_zone.ext_id == "d4c3b2a1-6f5e-0987-dcba-0123456789ef"
      - result.response.vm_config.guest_tools.is_enabled == false
      - result.response.vm_config.guest_tools.capabilities == ["VSS_SNAPSHOT"]
      - result.response.vm_config.hardware_clock_timezone == "UTC"
      - result.response.vm_config.is_branding_enabled == true
      - result.response.vm_config.boot_config.boot_device.disk_address.bus_type == "SCSI"
      - result.response.vm_config.boot_config.boot_device.disk_address.index == 0
      - result.response.vm_config.boot_config.boot_order == ["DISK", "CDROM"]
      - result.response.vm_config.is_vga_console_enabled == true
      - result.response.vm_config.is_agent_vm == false
      - result.response.vm_config.disks[0].disk_address.bus_type == "SCSI"
      - result.response.vm_config.disks[0].disk_address.index == 0
      - result.response.vm_config.disks[0].backing_info.disk_size_bytes == 10737418240
      - result.response.vm_config.disks[0].backing_info.storage_container.ext_id == "e89b1234-5678-90ab-cdef-1234567890ab"
      - result.response.vm_config.disks[0].backing_info.storage_config.is_flash_mode_enabled == true
      - result.response.vm_config.cd_roms[0].disk_address.bus_type == "SATA"
      - result.response.vm_config.cd_roms[0].disk_address.index == 0
      - result.response.vm_config.cd_roms[0].backing_info.disk_size_bytes == 10737418240
      - result.response.vm_config.cd_roms[0].backing_info.storage_container.ext_id == "e89b1234-5678-90ab-cdef-1234567890ab"
      - result.response.vm_config.cd_roms[0].backing_info.storage_config.is_flash_mode_enabled == true
      - result.response.vm_config.nics[0].backing_info.is_connected == true
      - result.response.vm_config.nics[0].network_info.nic_type == "NORMAL_NIC"
      - result.response.vm_config.nics[0].network_info.subnet.ext_id == "123e4567-e89b-12d3-a456-426614174000"
      - result.response.vm_config.nics[0].network_info.vlan_mode == "ACCESS"
      - result.response.vm_config.serial_ports[0].is_connected == true
      - result.response.vm_config.serial_ports[0].index == 0
      - result.response.disk_format == "QCOW2"
    fail_msg: " Unable to create Ova from url in check mode "
    success_msg: " Ova created successfully from url in check mode "

#############################################################################################################

- name: Create Ova from a valid url
  nutanix.ncp.ntnx_ova_v2:
    name: "{{ ova_name }}_url"
    source:
      ova_url_source:
        url: "{{ ova_url }}"
        should_allow_insecure_url: true
    cluster_location_ext_ids:
      - "{{ cluster.uuid }}"
  register: result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: Create Ova from a valid url status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == True
      - result.failed == False
      - result.ext_id is defined
      - result.response.ext_id is defined
      - result.task_ext_id is defined
      - result.response.name == "{{ ova_name }}_url"
      - result.response.cluster_location_ext_ids == ["{{ cluster.uuid }}"]
    fail_msg: " Unable to create Ova from url "
    success_msg: " Ova created successfully from url "

- name: Add Ova ext_id to todelete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [result.response.ext_id] }}"

##############################################################################################################

- name: Create an ova from a invaild url
  nutanix.ncp.ntnx_ova_v2:
    name: "{{ ova_name }}_invalid_url"
    source:
      ova_url_source:
        url: "https://invalid-url.com/path/to/ova/file.ova"
        should_allow_insecure_url: true
    disk_format: "QCOW2"
  register: result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: Create an ova from a invaild url status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == False
      - result.failed == True
      - result.msg == "Api Exception raised while creating ova"
    fail_msg: " Unable to create Ova from invalid url "
    success_msg: " Ova creation from invalid url failed as expected "

##############################################################################################################

- name: Deploy VM from Ova check mode
  nutanix.ncp.ntnx_ova_deploy_vm_v2:
    ext_id: "{{ todelete[0] }}"
    override_vm_config:
      name: "new_vm_from_ova"
      num_sockets: 2
      num_cores_per_socket: 4
      num_threads_per_core: 2
      memory_size_bytes: 8192
      nics:
        - backing_info:
            model: "E1000"
            mac_address: "00:11:22:33:44:55"
            is_connected: true
          network_info:
            nic_type: NORMAL_NIC
            network_function_chain:
              ext_id: "234e5678-e89b-12d3-a456-426614174000"
            subnet:
              ext_id: "{{ network.dhcp.uuid }}"
            vlan_mode: ACCESS
      cd_roms:
        - disk_address:
            bus_type: "SATA"
            index: 0
          backing_info:
            disk_size_bytes: 10737418240
            storage_container:
              ext_id: "e89b1234-5678-90ab-cdef-1234567890ab"
            storage_config:
              is_flash_mode_enabled: true
      categories:
        - ext_id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        - ext_id: 9c858901-8a57-4791-81fe-4c455b099bc9
    cluster_location_ext_id: "123e4567-e89b-12d3-a456-426614174000"
  register: result
  ignore_errors: true
  check_mode: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: Deploy VM from Ova check mode status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == False
      - result.failed == False
      - result.response.override_vm_config.name == "new_vm_from_ova"
      - result.response.override_vm_config.num_sockets == 2
      - result.response.override_vm_config.num_cores_per_socket == 4
      - result.response.override_vm_config.num_threads_per_core == 2
      - result.response.override_vm_config.memory_size_bytes == 8192
      - result.response.override_vm_config.nics[0].backing_info.model == "E1000"
      - result.response.override_vm_config.nics[0].backing_info.mac_address == "00:11:22:33:44:55"
      - result.response.override_vm_config.nics[0].backing_info.is_connected == true
      - result.response.override_vm_config.nics[0].network_info.nic_type == "NORMAL_NIC"
      - result.response.override_vm_config.nics[0].network_info.network_function_chain.ext_id == "234e5678-e89b-12d3-a456-426614174000"
      - result.response.override_vm_config.nics[0].network_info.subnet.ext_id == "{{ network.dhcp.uuid }}"
      - result.response.override_vm_config.nics[0].network_info.vlan_mode == "ACCESS"
      - result.response.override_vm_config.cd_roms[0].disk_address.bus_type == "SATA"
      - result.response.override_vm_config.cd_roms[0].disk_address.index == 0
      - result.response.override_vm_config.cd_roms[0].backing_info.disk_size_bytes == 10737418240
      - result.response.override_vm_config.cd_roms[0].backing_info.storage_container.ext_id == "e89b1234-5678-90ab-cdef-1234567890ab"
      - result.response.override_vm_config.cd_roms[0].backing_info.storage_config.is_flash_mode_enabled == true
      - result.response.override_vm_config.categories[0].ext_id == "f47ac10b-58cc-4372-a567-0e02b2c3d479"
      - result.response.override_vm_config.categories[1].ext_id == "9c858901-8a57-4791-81fe-4c455b099bc9"
      - result.response.cluster_location_ext_id == "123e4567-e89b-12d3-a456-426614174000"
    fail_msg: " Unable to deploy VM from Ova in check mode "
    success_msg: " VM deployed successfully from Ova in check mode "

##############################################################################################################

- name: Deploy VM from Ova
  nutanix.ncp.ntnx_ova_deploy_vm_v2:
    ext_id: "{{ todelete[0] }}"
    override_vm_config:
      nics:
        - backing_info:
            is_connected: true
          network_info:
            nic_type: "NORMAL_NIC"
            subnet:
              ext_id: "{{ network.dhcp.uuid }}"
            vlan_mode: "ACCESS"
    cluster_location_ext_id: "{{ cluster.uuid }}"
  register: result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: Deploy VM from Ova status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == True
      - result.failed == False
      - result.ext_id is defined
      - result.response.ext_id is defined
      - result.task_ext_id is defined
      - result.response.nics[0].backing_info.is_connected == true
      - result.response.nics[0].network_info.nic_type == "NORMAL_NIC"
      - result.response.nics[0].network_info.subnet.ext_id == "{{ network.dhcp.uuid }}"
      - result.response.nics[0].network_info.vlan_mode == "ACCESS"
      - result.response.cluster.ext_id == "{{ cluster.uuid }}"
      - result.response.num_sockets == {{ vm_num_sockets }}
      - result.response.vm_ext_id is defined
    fail_msg: " Unable to deploy VM from Ova "
    success_msg: " VM deployed successfully from Ova "

- name: Add VM ext_id to todelete list
  ansible.builtin.set_fact:
    todelete_vm: "{{ todelete_vm + [result.response.ext_id] }}"

###############################################################################################################

- name: Deploy VM from Ova changing VM config
  nutanix.ncp.ntnx_ova_deploy_vm_v2:
    ext_id: "{{ todelete[0] }}"
    override_vm_config:
      name: "{{ vm_name }}_from_ova_changed"
      num_sockets: 4
      nics:
        - backing_info:
            is_connected: true
          network_info:
            nic_type: "NORMAL_NIC"
            subnet:
              ext_id: "{{ network.dhcp.uuid }}"
            vlan_mode: "ACCESS"
    cluster_location_ext_id: "{{ cluster.uuid }}"
  register: result
  ignore_errors: true

- name: Deploy VM from Ova changing VM config status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == True
      - result.failed == False
      - result.ext_id is defined
      - result.response.ext_id is defined
      - result.task_ext_id is defined
      - result.response.name == "{{ vm_name }}_from_ova_changed"
      - result.response.num_sockets == 4
      - result.response.nics[0].backing_info.is_connected == true
      - result.response.nics[0].network_info.nic_type == "NORMAL_NIC"
      - result.response.nics[0].network_info.subnet.ext_id == "{{ network.dhcp.uuid }}"
      - result.response.nics[0].network_info.vlan_mode == "ACCESS"
      - result.response.cluster.ext_id == "{{ cluster.uuid }}"
      - result.response.vm_ext_id is defined
    fail_msg: " Unable to deploy VM from Ova with changed VM config "
    success_msg: " VM deployed successfully from Ova with changed VM config "

- name: Add VM ext_id to todelete list
  ansible.builtin.set_fact:
    todelete_vm: "{{ todelete_vm + [result.response.ext_id] }}"

###################################################################################################################

- name: Deploy a VM from an OVA that does not exist
  nutanix.ncp.ntnx_ova_deploy_vm_v2:
    ext_id: "123e4567-e89b-12d3-a456-426614174000"
    override_vm_config:
      name: "new_vm_from_non_existent_ova"
      nics:
        - backing_info:
            is_connected: true
          network_info:
            nic_type: NORMAL_NIC
            subnet:
              ext_id: "{{ network.dhcp.uuid }}"
            vlan_mode: ACCESS
    cluster_location_ext_id: "{{ cluster.uuid }}"
  register: result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name:  Deploy a VM from an OVA that does not exist status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == False
      - result.failed == True
      - result.msg == "Api Exception raised while deploying vm using ova"
    fail_msg: " Unable to deploy VM from non-existent Ova "
    success_msg: " VM deployment from non-existent Ova failed as expected "

###################################################################################################################

- name: Download Ova check mode
  nutanix.ncp.ntnx_ova_download_v2:
    ova_ext_id: "{{ todelete[0] }}"
  register: result
  ignore_errors: true
  check_mode: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: Download Ova check mode status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.failed == False
      - result.changed == False
      - result.ext_id == "{{ todelete[0] }}"
      - result.msg == "Ova with ext_id:{{ todelete[0] }} will be downloaded."
    fail_msg: " Download Ova check mode failed "
    success_msg: " Download Ova check mode successful "

####################################################################################################################

- name: Download Ova using valid ext id
  nutanix.ncp.ntnx_ova_download_v2:
    ova_ext_id: "{{ todelete[0] }}"
  register: result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: Download Ova using valid ext id status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.failed == False
      - result.changed == True
      - result.ext_id == "{{ todelete[0] }}"
      - result.response.path is defined
    fail_msg: " Unable to download Ova using valid ext id "
    success_msg: " Ova downloaded successfully using valid ext id "

#######################################################################################################################

- name: Download Ova using invalid ext id
  nutanix.ncp.ntnx_ova_download_v2:
    ova_ext_id: "123e4567-e89b-12d3-a456-426614174000"
  register: result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: Download Ova using invalid ext id status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.failed == True
      - result.changed == False
      - result.msg == "Api Exception raised while downloading ova"
    fail_msg: " Unable to download Ova using invalid ext id "
    success_msg: " Ova download using invalid ext id failed as expected "

#######################################################################################################################

- name: List all Ovas
  nutanix.ncp.ntnx_ova_info_v2:
  register: result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: List all Ovas status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == False
      - result.failed == False
      - result.response | length >= 3
    fail_msg: " Unable to list all Ovas "
    success_msg: " Ovas listed successfully "

########################################################################################################################

- name: List Ovas with filter
  nutanix.ncp.ntnx_ova_info_v2:
    filter:  "name eq '{{ ova_name }}_updated'"
  register: result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: List Ovas with filter status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == False
      - result.failed == False
      - result.response | length == 1
      - result.response[0].name == "{{ ova_name }}_updated"
    fail_msg: " Unable to list Ovas with filter "
    success_msg: " Ovas listed successfully with filter "

########################################################################################################################

- name: List Ovas with limit
  nutanix.ncp.ntnx_ova_info_v2:
    limit: 1
  register: result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: List Ovas with limit status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == False
      - result.failed == False
      - result.response | length == 1
      - result.response[0].name is defined
    fail_msg: " Unable to list Ovas with limit "
    success_msg: " Ovas listed successfully with limit "

########################################################################################################################

- name: Get details of a specific Ova
  nutanix.ncp.ntnx_ova_info_v2:
    ext_id: "{{ todelete[0] }}"
  register: result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: Get details of a specific Ova status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == False
      - result.failed == False
      - result.response.ext_id == "{{ todelete[0] }}"
      - result.response.name == "{{ ova_name }}_updated"
      - result.response.disk_format == "QCOW2"
    fail_msg: " Unable to get details of a specific Ova "
    success_msg: " Ova details retrieved successfully "

########################################################################################################################

- name: Delete ova check mode
  nutanix.ncp.ntnx_ova_v2:
    ext_id: "{{ todelete[0] }}"
    state: absent
  register: result
  ignore_errors: true
  check_mode: true

- name: Delete Ova check mode status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == False
      - result.failed == False
      - result.ext_id == "{{ todelete[0] }}"
      - result.msg == "Ova with ext_id:{{ todelete[0] }} will be deleted."
    fail_msg: " Unable to delete Ova in check mode "
    success_msg: " Ova deletion check mode successful "

#########################################################################################################################

- name: Delete Ova
  nutanix.ncp.ntnx_ova_v2:
    ext_id: "{{ item }}"
    state: absent
  register: result
  ignore_errors: true
  loop: "{{ todelete }}"

- name: Ova Deletion Status
  ansible.builtin.assert:
    that:
      - item.response.status == "SUCCEEDED"
      - item.response is defined
      - item.changed == True
      - item.failed == False
      - item.ext_id == "{{ todelete[ovas_index] }}"
    fail_msg: " Unable to delete Ova "
    success_msg: " Ova deleted successfully "
  loop: "{{ result.results }}"
  loop_control:
    index_var: ovas_index

#########################################################################################################################

- name: Delete ova with invalid ext id
  nutanix.ncp.ntnx_ova_v2:
    ext_id: "123e4567-e89b-12d3-a456-426614174000"
    state: absent
  register: result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ result }}"

- name: Delete Ova with invalid ext id status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == False
      - result.failed == True
      - result.msg == "Api Exception raised while deleting ova"
    fail_msg: " Unable to delete Ova with invalid ext id "
    success_msg: " Ova deletion with invalid ext id failed as expected "

#########################################################################################################################

- name: Delete VM
  nutanix.ncp.ntnx_vms_v2:
    ext_id: "{{ item }}"
    state: absent
  register: result
  ignore_errors: true
  loop: "{{ todelete_vm }}"

- name: Deletion Status
  ansible.builtin.assert:
    that:
      - item.response.status == "SUCCEEDED"
      - item.response is defined
      - item.changed == True
      - item.failed == False
      - item.ext_id == "{{ todelete_vm[vms_index] }}"
    fail_msg: "Unable to delete VM "
    success_msg: "VM is deleted successfully "
  loop: "{{ result.results }}"
  loop_control:
    index_var: vms_index

#########################################################################################################################

- name: Reset to delete list
  ansible.builtin.set_fact:
    todelete: []
    todelete_vm: []