---
- name: Start ova v2 tests
  ansible.builtin.debug:
    msg: Start ova v2 tests

- name: Generate random category key & value
  ansible.builtin.set_fact:
    random_name: "{{ query('community.general.random_string', numbers=false, special=false, length=12)[0] }}"

- name: Set variable
  ansible.builtin.set_fact:
    suffix_name: ansible-ag
    vm_num_sockets: 2
    vm_description: ansible test ova

- name: Set VM name, ova name and to delete list
  ansible.builtin.set_fact:
    todelete: []
    vm_name: "{{ random_name }}{{ suffix_name }}vm"
    ova_name: "{{ random_name }}{{ suffix_name }}ova"

- name: Create VM with some specific requirements
  nutanix.ncp.ntnx_vms_v2:
    name: "{{ vm_name }}"
    description: "{{ vm_description }}"
    cluster:
      ext_id: "{{ cluster.uuid }}"
    num_sockets: "{{ vm_num_sockets }}"
  register: result
  ignore_errors: true

- name: Creation Status of VM with some specific requirements
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == True
      - result.failed == False
      - result.response.cluster.ext_id == "{{ cluster.uuid }}"
      - result.response.name == "{{ vm_name }}"
      - result.response.description == "{{ vm_description }}"
      - result.response.num_sockets == {{ vm_num_sockets }}
    fail_msg: " Unable to create VM with specific requirements "
    success_msg: " VM with specific requirements created successfully "

- name: Store Vm ext_id
  ansible.builtin.set_fact:
    vm_ext_id: "{{ result.response.ext_id }}"

- name: Create Ova from the VM
  nutanix.ncp.ntnx_ova_v2:
    name: "{{ ova_name }}"
    source:
      ova_vm_source:
        vm_ext_id: "{{ vm_ext_id }}"
        disk_file_format: "QCOW2"
  register: ova_result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ ova_result }}"

- name: Ova Creation Status
  ansible.builtin.assert:
    that:
      - ova_result.response is defined
      - ova_result.changed == True
      - ova_result.failed == False
      - ova_result.ext_id is defined
      - ova_result.response.ext_id is defined
      - ova_result.task_ext_id is defined
      - ova_result.response.name == "{{ ova_name }}"
      - ova_result.response.vm_config.name == "{{ vm_name }}"
      - ova_result.response.disk_format == "QCOW2"
    fail_msg: " Unable to create Ova from VM "
    success_msg: " Ova created successfully from VM "

- name: Add Ova ext_id to todelete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [ova_result.response.ext_id] }}"

# - name: Update Ova
#   nutanix.ncp.ntnx_ova_v2:
#     ext_id: "{{ todelete[0] }}"
#     name: "{{ ova_name }}_updated"
#   register: update_result
#   ignore_errors: true

# - name: Ova Update Status
#   ansible.builtin.assert:
#     that:
#       - update_result.response is defined
#       - update_result.changed == True
#       - update_result.failed == False
#       - update_result.ext_id is defined
#       - update_result.response.ext_id is defined
#       - update_result.task_ext_id is defined
#       - update_result.response.name == "{{ ova_name }}_updated"
#     fail_msg: " Unable to update Ova "
#     success_msg: " Ova updated successfully "

- name: Deploy VM from Ova
  nutanix.ncp.ntnx_ova_deploy_vm_v2:
    ext_id: "{{ todelete[0] }}"
    override_vm_config:
      name: "{{ vm_name }}_from_ova"
      nics:
      - backing_info:
          is_connected: true
        network_info:
          nic_type: NORMAL_NIC
          subnet:
            ext_id: "80fb7979-0a8f-4e1c-b353-46cd1a633cce"
          vlan_mode: ACCESS
    cluster_location_ext_id: "{{ cluster.uuid }}"
  register: deploy_result
  ignore_errors: true

- name: debug
  ansible.builtin.debug:
    msg: "{{ deploy_result }}"

- name: Delete Ova
  nutanix.ncp.ntnx_ova_v2:
    ext_id: "{{ todelete[0] }}"
    state: absent
  register: delete_result
  ignore_errors: true

- name: Ova Deletion Status
  ansible.builtin.assert:
    that:
      - delete_result.response.status == 'SUCCEEDED'
      - delete_result.response is defined
      - delete_result.changed == True
      - delete_result.failed == False
      - delete_result.ext_id == "{{ todelete[0] }}"
    fail_msg: " Unable to delete Ova "
    success_msg: " Ova deleted successfully "
    

- name: Delete VM
  nutanix.ncp.ntnx_vms_v2:
    ext_id: "{{ vm_ext_id }}"
    state: absent
  register: result
  ignore_errors: true

- name: Deletion Status
  ansible.builtin.assert:
    that:
      - result.response.status == 'SUCCEEDED'
      - result.response is defined
      - result.changed == True
      - result.failed == False
      - result.ext_id == "{{ vm_ext_id }}"
    fail_msg: "Unable to delete VM "
    success_msg: "VM is deleted successfully "