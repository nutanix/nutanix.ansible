---
- name: Start clusters profiles tests
  ansible.builtin.debug:
    msg: start clusters profiles tests

- name: Generate random name
  ansible.builtin.set_fact:
    random_name: "{{ query('community.general.random_string', numbers=false, special=false, length=12)[0] }}"

- name: Set prefix name for cluster
  ansible.builtin.set_fact:
    prefix_name: ansible_test

- name: Set command split for resetting cluster username and password
  ansible.builtin.set_fact:
    pe_ssh_cmd:
      sshpass -p '{{ clusters[0].pe_password }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
      {{ clusters[0].pe_username }}@{{ clusters[0].nodes[0].cvm_ip }}
    reset_username_password: /home/nutanix/prism/cli/ncli user reset-password user-name={{ username }} password={{ password }}
    cluster_status: /usr/local/nutanix/cluster/bin/cluster status

- name: Set command for resetting cluster username and password
  ansible.builtin.set_fact:
    reset_command: '{{ pe_ssh_cmd }} "{{ reset_username_password }}"'
    cluster_status_command: '{{ pe_ssh_cmd }} "{{ cluster_status }}"'

############################################## Create cluster test 1 ##############################################

# - name: Create spec for cluster create with dummy values using check mode
#   ntnx_clusters_v2:
#     name: cluster1
#     nodes:
#       node_list:
#         - controller_vm_ip:
#             ipv4:
#               value: 10.0.0.1
#           host_ip:
#             ipv4:
#               value: 10.0.0.2
#     config:
#       cluster_function:
#         - AOS
#       authorized_public_key_list:
#         - name: key1
#           key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDQ6
#       redundancy_factor: 1
#       cluster_arch: X86_64
#       fault_tolerance_state:
#         domain_awareness_level: DISK
#         desired_cluster_fault_tolerance: CFT_2N_OR_2D
#       operation_mode: NORMAL
#       encryption_in_transit_status: ENABLED
#     network:
#       external_address:
#         ipv4:
#           value: 10.0.0.3
#       external_data_service_ip:
#         ipv4:
#           value: 10.0.0.4
#       nfs_subnet_whitelist:
#         - vlan.123
#       ntp_server_ip_list:
#         - ipv4:
#             value: 10.0.0.5
#         - ipv6:
#             value: 2001:db8::1
#         - fqdn:
#             value: ntp.example.com
#       name_server_ip_list:
#         - ipv4:
#             value: 10.0.0.6
#         - ipv6:
#             value: 2001:db8::2
#         - fqdn:
#             value: dns.example.com
#       smtp_server:
#         email_address: testemail@test.com
#         server:
#           ip_address:
#             ipv4:
#               value: 10.0.0.7
#           port: 25
#           username: test
#           password: test1
#         type: PLAIN
#       masquerading_ip:
#         ipv4:
#           value: 10.0.0.8
#       management_server:
#         ip:
#           ipv4:
#             value: 10.0.0.9
#         is_registered: true
#         is_drs_enabled: true
#       fqdn: test.example.com
#       key_management_server_type: PRISM_CENTRAL
#       backplane:
#         vlan_tag: 123
#         subnet:
#           value: 10.0.0.0
#           prefix_length: 24
#         netmask:
#           value: 255.255.255.225
#       http_proxy_list:
#         - ip_address:
#             ipv4:
#               value: 10.0.0.1
#           port: 8080
#           username: username_test
#           password: test1
#           name: name_test
#           proxy_types:
#             - HTTP
#             - HTTPS
#       http_proxy_white_list:
#         - target_type: IPV4_NETWORK_MASK
#           target: test
#     container_name: test-container
#     dryrun: true
#   register: result
#   check_mode: true
#   ignore_errors: true

# - name: Verify generated spec
#   ansible.builtin.assert:
#     that:
#       - result.response is defined
#       - result.changed == false
#       - result.response.name == "cluster1"
#       - result.response.nodes.node_list[0].controller_vm_ip.ipv4.value == "10.0.0.1"
#       - result.response.nodes.node_list[0].host_ip.ipv4.value == "10.0.0.2"
#       - result.response.config.cluster_function[0] == "AOS"
#       - result.response.config.authorized_public_key_list[0].name == "key1"
#       - result.response.config.authorized_public_key_list[0].key == "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDQ6"
#       - result.response.config.redundancy_factor == 1
#       - result.response.config.cluster_arch == "X86_64"
#       - result.response.config.fault_tolerance_state.domain_awareness_level == "DISK"
#       - result.response.config.operation_mode == "NORMAL"
#       - result.response.config.encryption_in_transit_status == "ENABLED"
#       - result.response.config.fault_tolerance_state.desired_cluster_fault_tolerance == "CFT_2N_OR_2D"
#       - result.response.network.external_address.ipv4.value == "10.0.0.3"
#       - result.response.network.external_data_service_ip.ipv4.value == "10.0.0.4"
#       - result.response.network.nfs_subnet_whitelist[0] == "vlan.123"
#       - result.response.network.ntp_server_ip_list[0].ipv4.value == "10.0.0.5"
#       - result.response.network.ntp_server_ip_list[1].ipv6.value == "2001:db8::1"
#       - result.response.network.ntp_server_ip_list[2].fqdn.value == "ntp.example.com"
#       - result.response.network.name_server_ip_list[0].ipv4.value == "10.0.0.6"
#       - result.response.network.name_server_ip_list[1].ipv6.value == "2001:db8::2"
#       - result.response.network.name_server_ip_list[2].fqdn.value == "dns.example.com"
#       - result.response.network.smtp_server.email_address == "testemail@test.com"
#       - result.response.network.smtp_server.server.ip_address.ipv4.value == "10.0.0.7"
#       - result.response.network.smtp_server.server.port == 25
#       - result.response.network.smtp_server.server.username == "test"
#       - result.response.network.smtp_server.type == "PLAIN"
#       - result.response.network.masquerading_ip.ipv4.value == "10.0.0.8"
#       - result.response.network.management_server.ip.ipv4.value == "10.0.0.9"
#       - result.response.network.management_server.is_registered == true
#       - result.response.network.management_server.is_drs_enabled == true
#       - result.response.network.fqdn == "test.example.com"
#       - result.response.network.key_management_server_type == "PRISM_CENTRAL"
#       - result.response.network.backplane.vlan_tag == 123
#       - result.response.network.backplane.subnet.value == "10.0.0.0"
#       - result.response.network.backplane.subnet.prefix_length == 24
#       - result.response.network.backplane.netmask.value == "255.255.255.225"
#       - result.response.network.http_proxy_list[0].ip_address.ipv4.value == "10.0.0.1"
#       - result.response.network.http_proxy_list[0].port == 8080
#       - result.response.network.http_proxy_list[0].username == "username_test"
#       - result.response.network.http_proxy_list[0].name == "name_test"
#       - result.response.network.http_proxy_list[0].proxy_types[0] == "HTTP"
#       - result.response.network.http_proxy_list[0].proxy_types[1] == "HTTPS"
#       - result.response.network.http_proxy_white_list[0].target_type == "IPV4_NETWORK_MASK"
#       - result.response.network.http_proxy_white_list[0].target == "test"
#       - result.response.container_name == "test-container"
#     fail_msg: Cluster create spec is not generated as expected
#     success_msg: Cluster create spec is generated as expected

# - name: Generate spec for discovering unconfigured nodes using check mode
#   ntnx_discover_unconfigured_nodes_v2:
#     is_manual_discovery: true
#     address_type: "IPV4"
#     ip_filter_list:
#       - ipv4:
#           value: 192.168.1.30
#           prefix_length: 24
#     uuid_filter_list:
#       - "00061de6-4a87-6b06-185b-ac1f6b6f97e2"
#     interface_filter_list:
#       - 10061de6-4a87-6b06-185b-ac1f6b6f97e2
#     timeout: 50
#   register: result
#   ignore_errors: true
#   check_mode: true

# - name: Generate spec for discovering unconfigured nodes using check mode status
#   ansible.builtin.assert:
#     that:
#       - result.changed == false
#       - result.failed == false
#       - result.response.is_manual_discovery == true
#       - result.response.address_type == "IPV4"
#       - result.response.ip_filter_list[0].ipv4.value == "192.168.1.30"
#       - result.response.ip_filter_list[0].ipv4.prefix_length == 24
#       - result.response.uuid_filter_list[0] == "00061de6-4a87-6b06-185b-ac1f6b6f97e2"
#       - result.response.interface_filter_list[0] == "10061de6-4a87-6b06-185b-ac1f6b6f97e2"
#       - result.response.timeout == 50
#     fail_msg: Generate spec for discovering unconfigured nodes using check mode failed
#     success_msg: Generate spec for discovering unconfigured nodes using check mode passed

# - name: List all clusters to get prism central external ID
#   ntnx_clusters_info_v2:
#     filter: "config/clusterFunction/any(t:t eq Clustermgmt.Config.ClusterFunctionRef'PRISM_CENTRAL')"
#   register: result
#   ignore_errors: true

# - name: Get prism central external ID
#   ansible.builtin.set_fact:
#     prism_central_external_id: "{{ result.response[0].ext_id }}"

# - name: Discover unconfigured node
#   ntnx_discover_unconfigured_nodes_v2:
#     address_type: "IPV4"
#     ip_filter_list:
#       - ipv4:
#           value: "{{ clusters[0].nodes[0].cvm_ip }}"
#   register: result
#   ignore_errors: true

# - name: Discover unconfigured node status
#   ansible.builtin.assert:
#     that:
#       - result.changed == false
#       - result.failed == false
#       - result.cluster_ext_id is defined
#       - result.task_ext_id is defined
#       - result.response.ext_id is defined
#       - result.response.response.node_list[0].cvm_ip.ipv4.value == "{{ clusters[0].nodes[0].cvm_ip }}"
#     fail_msg: Discover unconfigured node failed
#     success_msg: Discover unconfigured node passed

# - name: Run cluster create prechecks
#   ntnx_clusters_v2:
#     name: "{{ clusters[0].name }}"
#     nodes:
#       node_list:
#         - controller_vm_ip:
#             ipv4:
#               value: "{{ clusters[0].nodes[0].cvm_ip }}"
#     config:
#       cluster_function: "{{ clusters[0].config.cluster_functions }}"
#       authorized_public_key_list:
#         - name: "{{ clusters[0].config.auth_public_keys[0].name }}"
#           key: "{{ clusters[0].config.auth_public_keys[0].key }}"
#       redundancy_factor: "{{ clusters[0].config.redundancy_factor_cluster_crud }}"
#       cluster_arch: "{{ clusters[0].config.cluster_arch }}"
#       fault_tolerance_state:
#         domain_awareness_level: "{{ clusters[0].config.fault_tolerance_state.domain_awareness_level_cluster_crud }}"
#     network:
#       external_address:
#         ipv4:
#           value: "{{ clusters[0].network.virtual_ip }}"
#       external_data_service_ip:
#         ipv4:
#           value: "{{ clusters[0].network.iscsi_ip }}"
#       ntp_server_ip_list:
#         - fqdn:
#             value: "{{ clusters[0].network.ntp_servers[0] }}"
#         - fqdn:
#             value: "{{ clusters[0].network.ntp_servers[1] }}"
#         - fqdn:
#             value: "{{ clusters[0].network.ntp_servers[2] }}"
#         - fqdn:
#             value: "{{ clusters[0].network.ntp_servers[3] }}"
#       name_server_ip_list:
#         - ipv4:
#             value: "{{ clusters[0].network.dns_servers[0] }}"
#         - ipv4:
#             value: "{{ clusters[0].network.dns_servers[1] }}"
#       smtp_server:
#         email_address: "{{ clusters[0].network.smtp_server.email_address }}"
#         server:
#           ip_address:
#             ipv4:
#               value: "{{ clusters[0].network.smtp_server.ip }}"
#           port: "{{ clusters[0].network.smtp_server.port }}"
#           username: "{{ clusters[0].network.smtp_server.username }}"
#           password: "{{ clusters[0].network.smtp_server.password }}"
#         type: "{{ clusters[0].network.smtp_server.type }}"
#     dryrun: true
#     timeout: 1800
#   register: result
#   ignore_errors: true

# - name: Verify cluster create prechecks run
#   ansible.builtin.assert:
#     that:
#       - result.response is defined
#       - result.changed == false
#       - result.task_ext_id is defined
#       - result.response.status == "SUCCEEDED"
#     fail_msg: Cluster create prechecks failed
#     success_msg: Cluster create prechecks passed

# - name: Create cluster name
#   ansible.builtin.set_fact:
#     cluster_name: "{{ random_name }}_{{ prefix_name }}_{{ clusters[0].name }}"

# - name: Check if cluster is unconfigured or not
#   ansible.builtin.command: "{{ cluster_status_command }}"
#   register: result
#   ignore_errors: true
#   changed_when: result.rc != 0

# - name: Assert that cluster is unconfigured
#   ansible.builtin.assert:
#     that:
#       - result.rc == 1
#       - result.stderr.find('Cluster is currently unconfigured') != -1
#     fail_msg: Cannot create cluster, cluster is already created
#     success_msg: Cluster is unconfigured

# - name: Create cluster with minimum spec
#   ntnx_clusters_v2:
#     name: "{{cluster_name}}"
#     nodes:
#       node_list:
#         - controller_vm_ip:
#             ipv4:
#               value: "{{ clusters[0].nodes[0].cvm_ip }}"
#     config:
#       cluster_function: "{{ clusters[0].config.cluster_functions }}"
#       redundancy_factor: "{{ clusters[0].config.redundancy_factor_cluster_crud }}"
#       cluster_arch: "{{ clusters[0].config.cluster_arch }}"
#       fault_tolerance_state:
#         domain_awareness_level: "{{ clusters[0].config.fault_tolerance_state.domain_awareness_level_cluster_crud }}"
#     timeout: 1800
#   register: result
#   ignore_errors: true

# - name: Verify cluster create task status
#   ansible.builtin.assert:
#     that:
#       - result.response is defined
#       - result.changed == true
#       - result.task_ext_id is defined
#       - result.response.status == "SUCCEEDED"
#     fail_msg: Cluster create failed
#     success_msg: Cluster create passed

# - name: Reset username and password
#   ansible.builtin.command: "{{ reset_command }}"
#   register: result
#   ignore_errors: true
#   changed_when: result.rc != 0

# - name: Generate spec for aos remote cluster PE PC registration using check mode
#   ntnx_pc_registration_v2:
#     ext_id: d2f9994f-44fb-4d4c-ad3c-92055316444f
#     remote_cluster:
#       aos_remote_cluster:
#         remote_cluster:
#           address:
#             ipv4:
#               value: 10.87.153.200
#           credentials:
#             authentication:
#               username: admin
#               password: password
#   check_mode: true
#   register: result
#   ignore_errors: true

# - name: Generate spec for aos remote cluster PE PC registration using check mode status
#   ansible.builtin.assert:
#     that:
#       - result.changed == false
#       - result.ext_id == "d2f9994f-44fb-4d4c-ad3c-92055316444f"
#       - result.response.remote_cluster.remote_cluster.address.ipv4.value == "10.87.153.200"
#       - result.response.remote_cluster.remote_cluster.credentials.authentication.username == "admin"
#     fail_msg: "Generate spec for aos remote cluster PE PC registration using check mode failed"
#     success_msg: "Generate spec for aos remote cluster PE PC registration using check mode passed"

# - name: Generate spec for PC and domain manager(PC) remote cluster registration using check mode
#   ntnx_pc_registration_v2:
#     ext_id: d2f9994f-44fb-4d4c-ad3c-92055316444f
#     remote_cluster:
#       domain_manager_remote_cluster:
#         remote_cluster:
#           address:
#             ipv4:
#               value: 10.87.142.101
#           credentials:
#             authentication:
#               username: admin
#               password: password
#         cloud_type: ONPREM_CLOUD
#   check_mode: true
#   register: result
#   ignore_errors: true

# - name: Generate spec for PC and domain manager(PC) remote cluster registration using check mode status
#   ansible.builtin.assert:
#     that:
#       - result.changed == false
#       - result.ext_id == "d2f9994f-44fb-4d4c-ad3c-92055316444f"
#       - result.response.remote_cluster.remote_cluster.address.ipv4.value == "10.87.142.101"
#       - result.response.remote_cluster.remote_cluster.credentials.authentication.username == "admin"
#       - result.response.remote_cluster.cloud_type == "ONPREM_CLOUD"
#     fail_msg: "Generate spec for PC and domain manager(PC) remote cluster registration using check mode failed"
#     success_msg: "Generate spec for PC and domain manager(PC) remote cluster registration using check mode passed"

# - name: Generate spec for PC registration using cluster reference
#   ntnx_pc_registration_v2:
#     ext_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
#     remote_cluster:
#       cluster_reference:
#         ext_id: d2f9994f-44fb-4d4c-ad3c-92055316444f
#   check_mode: true
#   register: result
#   ignore_errors: true

# - name: Generate spec for PC registration using cluster reference status
#   ansible.builtin.assert:
#     that:
#       - result.changed == false
#       - result.ext_id == "3fa85f64-5717-4562-b3fc-2c963f66afa6"
#       - result.response.remote_cluster.ext_id == "d2f9994f-44fb-4d4c-ad3c-92055316444f"
#     fail_msg: "Generate spec for PC registration using cluster reference failed"
#     success_msg: "Generate spec for PC registration using cluster reference passed"

# - name: Run PE PC registration
#   ntnx_pc_registration_v2:
#     ext_id: "{{ prism_central_external_id }}"
#     remote_cluster:
#       aos_remote_cluster:
#         remote_cluster:
#           address:
#             ipv4:
#               value: "{{ clusters[0].nodes[0].cvm_ip }}"
#           credentials:
#             authentication:
#               username: "{{ username }}"
#               password: "{{ password }}"
#   register: result
#   ignore_errors: true

# - name: Verify PE PC registration
#   ansible.builtin.assert:
#     that:
#       - result.changed == true
#       - result.ext_id is defined
#       - result.ext_id == prism_central_external_id
#       - result.response.status == 'SUCCEEDED'
#       - result.task_ext_id is defined
#     fail_msg: "PE PC registration failed"
#     success_msg: "PE PC registration passed"

# - name: Sleep for 1 minute
#   ansible.builtin.pause:
#     seconds: 60

# - name: Fetch cluster using name
#   ntnx_clusters_info_v2:
#     filter: name eq '{{ cluster_name }}'
#   register: result
#   ignore_errors: true

# - name: Verify listing
#   ansible.builtin.assert:
#     that:
#       - result.response is defined
#       - result.response | length > 0
#     fail_msg: Failed verifying PE PC registration
#     success_msg: PE PC registration passed successfully

# - name: Set cluster external ID
#   ansible.builtin.set_fact:
#     cluster_ext_id: "{{ result.response[0].ext_id }}"

# - name: Fetch cluster info using external ID
#   ntnx_clusters_info_v2:
#     ext_id: "{{ cluster_ext_id }}"
#   register: result
#   ignore_errors: true

# - name: Verify created cluster's details using cluster info
#   ansible.builtin.assert:
#     that:
#       - result.response is defined
#       - result.ext_id == cluster_ext_id
#       - result.response.name == "{{ cluster_name }}"
#       - result.response.nodes.node_list[0].controller_vm_ip.ipv4.value == "{{ clusters[0].nodes[0].cvm_ip }}"
#       - '"{{ clusters[0].config.cluster_functions[0] }}" in "{{result.response.config.cluster_function}}"'
#       - result.response.config.redundancy_factor == clusters[0].config.redundancy_factor_cluster_crud
#       - result.response.config.cluster_arch == "{{ clusters[0].config.cluster_arch }}"
#       - >
#         result.response.config.fault_tolerance_state.domain_awareness_level ==
#         "{{ clusters[0].config.fault_tolerance_state.domain_awareness_level_cluster_crud }}"
#     fail_msg: Failed verifying cluster creation
#     success_msg: Cluster creation passed successfully

- name: Set cluster external ID
  ansible.builtin.set_fact:
    cluster_ext_id: "00063d2c-8c49-95df-09d8-f891723588b9"

- name: Generate spec for creating cluster profile using check mode
  ntnx_clusters_profiles_v2:
    name: "cluster_profile_1"
    description: "Cluster profile description"
    allowed_overrides:
      - "NTP_SERVER_CONFIG"
    name_server_ip_list:
      - ipv4:
          value: "240.29.254.180"
          prefix_length: 32
      - ipv6:
          value: "1a7d:9a64:df8d:dfd8:39c6:c4ea:e35c:0ba4"
          prefix_length: 128
    ntp_server_ip_list:
      - ipv4:
          value: "240.29.254.180"
          prefix_length: 32
      - ipv6:
          value: "1a7d:9a64:df8d:dfd8:39c6:c4ea:e35c:0ba4"
          prefix_length: 128
      - fqdn:
          value: "ntp.example.com"
    smtp_server:
      email_address: "email@example.com"
      server:
        ip_address:
          ipv4:
            value: "240.29.254.180"
            prefix_length: 32
          ipv6:
            value: "1a7d:9a64:df8d:dfd8:39c6:c4ea:e35c:0ba4"
            prefix_length: 128
          fqdn:
            value: "smtp.example.com"
        port: 465
        username: "smtp-user"
        password: "smtp-password"
      type: "SSL"
    nfs_subnet_whitelist:
      - "10.110.106.45/255.255.255.255"
    snmp_config:
      is_enabled: false
      users:
        - username: "snmpuser1"
          auth_type: "MD5"
          auth_key: "Test_SNMP_user_authentication_key"
          priv_type: "DES"
          priv_key: "Test_SNMP_user_encryption_key"
      transports:
        - protocol: "UDP"
          port: 21
      traps:
        - address:
            ipv4:
              value: "240.29.254.180"
              prefix_length: 32
            ipv6:
              value: "1a7d:9a64:df8d:dfd8:39c6:c4ea:e35c:0ba4"
              prefix_length: 128
          username: "trapuser"
          protocol: "UDP"
          port: 59
          should_inform: false
          engine_id: "abcd1234"
          version: "V3"
          receiver_name: "trap-receiver"
          community_string: "snmp-server community public RO 192.168.1.0 255.255.255.0"
    rsyslog_server_list:
      - server_name: "testServer1"
        ip_address:
          ipv4:
            value: "240.29.254.180"
            prefix_length: 32
          ipv6:
            value: "1a7d:9a64:df8d:dfd8:39c6:c4ea:e35c:0ba4"
            prefix_length: 128
        port: 29
        network_protocol: "UDP"
        modules:
          - name: "CASSANDRA"
            log_severity_level: "EMERGENCY"
            should_log_monitor_files: true
          - name: "CURATOR"
            log_severity_level: "ERROR"
            should_log_monitor_files: false
    pulse_status:
      is_enabled: true
      pii_scrubbing_level: "DEFAULT"
  register: result
  check_mode: true

- ansible.builtin.debug:
    var: result

- name: Generate spec for creating cluster profile using check mode status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.response.name == "cluster_profile_1"
      - result.response.description == "Cluster profile description"
      - result.response.allowed_overrides[0] == "NTP_SERVER_CONFIG"
      - result.response.name_server_ip_list[0].ipv4.value == "240.29.254.180"
      - result.response.ntp_server_ip_list[0].ipv4.value == "240.29.254.180"
      - result.response.smtp_server.email_address == "email@example.com"
      - result.response.smtp_server.server.ip_address.ipv4.value == "240.29.254.180"
      - result.response.smtp_server.server.ip_address.ipv6.value == "1a7d:9a64:df8d:dfd8:39c6:c4ea:e35c:0ba4"
      - result.response.smtp_server.server.ip_address.fqdn.value == "smtp.example.com"
      - result.response.smtp_server.server.port == 465
      - result.response.smtp_server.server.username == "smtp-user"
      - result.response.smtp_server.type == "SSL"
      - result.response.nfs_subnet_whitelist[0] == "10.110.106.45/255.255.255.255"
      - result.response.snmp_config.is_enabled == false
      - result.response.snmp_config.users[0].auth_type == "MD5"
      - result.response.snmp_config.users[0].priv_type == "DES"
      - result.response.snmp_config.users[0].username == "snmpuser1"
      - result.response.snmp_config.transports[0].protocol == "UDP"
      - result.response.snmp_config.transports[0].port == 21
      - result.response.snmp_config.traps[0].address.ipv4.value == "240.29.254.180"
      - result.response.snmp_config.traps[0].address.ipv6.value == "1a7d:9a64:df8d:dfd8:39c6:c4ea:e35c:0ba4"
      - result.response.snmp_config.traps[0].username == "trapuser"
      - result.response.snmp_config.traps[0].protocol == "UDP"
      - result.response.snmp_config.traps[0].port == 59
      - result.response.snmp_config.traps[0].should_inform == false
      - result.response.snmp_config.traps[0].engine_id == "abcd1234"
      - result.response.snmp_config.traps[0].version == "V3"
      # - result.response.snmp_config.traps[0].receiver_name == "trap-receiver"
      - result.response.snmp_config.traps[0].community_string == "snmp-server community public RO 192.168.1.0 255.255.255.0"
      - result.response.rsyslog_server_list[0].server_name == "testServer1"
      - result.response.rsyslog_server_list[0].ip_address.ipv4.value == "240.29.254.180"
      - result.response.rsyslog_server_list[0].ip_address.ipv6.value == "1a7d:9a64:df8d:dfd8:39c6:c4ea:e35c:0ba4"
      - result.response.rsyslog_server_list[0].port == 29
      - result.response.rsyslog_server_list[0].network_protocol == "UDP"
      - result.response.rsyslog_server_list[0].modules[0].name == "CASSANDRA"
      - result.response.rsyslog_server_list[0].modules[0].log_severity_level == "EMERGENCY"
      - result.response.rsyslog_server_list[0].modules[0].should_log_monitor_files == true
      - result.response.rsyslog_server_list[0].modules[1].name == "CURATOR"
      - result.response.rsyslog_server_list[0].modules[1].log_severity_level == "ERROR"
      - result.response.rsyslog_server_list[0].modules[1].should_log_monitor_files == false
      - result.response.pulse_status.is_enabled == true
      - result.response.pulse_status.pii_scrubbing_level == "DEFAULT"
    fail_msg: "Failed to generate spec for creating cluster profile using check mode"
    success_msg: "Successfully generated spec for creating cluster profile using check mode"

- name: Create cluster profile
  ntnx_clusters_profiles_v2:
    name: "cluster_profile_1"
    description: "Cluster profile description"
    allowed_overrides: "{{ cluster_profiles[0].allowed_overrides }}"
    name_server_ip_list:
      - ipv4:
          value: "{{ cluster_profiles[0].name_server_ip_list[0].ipv4.value }}"
          prefix_length: "{{ cluster_profiles[0].name_server_ip_list[0].ipv4.prefix_length | int }}"
    ntp_server_ip_list:
      - ipv4:
          value: "{{ cluster_profiles[0].ntp_server_ip_list[0].ipv4.value }}"
          prefix_length: "{{ cluster_profiles[0].ntp_server_ip_list[0].ipv4.prefix_length | int }}"
    smtp_server:
      email_address: "{{ cluster_profiles[0].smtp_server.email_address }}"
      server:
        ip_address:
          ipv4:
            value: "{{ cluster_profiles[0].smtp_server.server.ip_address.ipv4.value }}"
            prefix_length: "{{ cluster_profiles[0].smtp_server.server.ip_address.ipv4.prefix_length | int }}"
        port: "{{ cluster_profiles[0].smtp_server.server.port | int }}"
        username: "{{ cluster_profiles[0].smtp_server.server.username }}"
        password: "{{ cluster_profiles[0].smtp_server.server.password }}"
      type: "{{ cluster_profiles[0].smtp_server.type }}"
    nfs_subnet_whitelist: "{{ cluster_profiles[0].nfs_subnet_whitelist }}"
    snmp_config:
      is_enabled: "{{ cluster_profiles[0].snmp_config.is_enabled }}"
      users:
        - username: "{{ cluster_profiles[0].snmp_config.users[0].username }}"
          auth_type: "{{ cluster_profiles[0].snmp_config.users[0].auth_type }}"
          auth_key: "{{ cluster_profiles[0].snmp_config.users[0].auth_key }}"
          priv_type: "{{ cluster_profiles[0].snmp_config.users[0].priv_type }}"
          priv_key: "{{ cluster_profiles[0].snmp_config.users[0].priv_key }}"
      transports:
        - protocol: "{{ cluster_profiles[0].snmp_config.transports[0].protocol }}"
          port: "{{ cluster_profiles[0].snmp_config.transports[0].port }}"
      traps:
        - address:
            ipv4:
              value: "{{ cluster_profiles[0].snmp_config.traps[0].address.ipv4.value }}"
              prefix_length: "{{ cluster_profiles[0].snmp_config.traps[0].address.ipv4.prefix_length | int }}"
          username: "{{ cluster_profiles[0].snmp_config.traps[0].username }}"
          protocol: "{{ cluster_profiles[0].snmp_config.traps[0].protocol }}"
          port: "{{ cluster_profiles[0].snmp_config.traps[0].port | int }}"
          should_inform: "{{ cluster_profiles[0].snmp_config.traps[0].should_inform }}"
          engine_id: "{{ cluster_profiles[0].snmp_config.traps[0].engine_id }}"
          version: "{{ cluster_profiles[0].snmp_config.traps[0].version }}"
          receiver_name: "{{ cluster_profiles[0].snmp_config.traps[0].receiver_name }}"
          community_string: "{{ cluster_profiles[0].snmp_config.traps[0].community_string }}"
    rsyslog_server_list:
      - server_name: "{{ cluster_profiles[0].rsyslog_server_list[0].server_name }}"
        ip_address:
          ipv4:
            value: "{{ cluster_profiles[0].rsyslog_server_list[0].ip_address.ipv4.value }}"
            prefix_length: "{{ cluster_profiles[0].rsyslog_server_list[0].ip_address.ipv4.prefix_length | int }}"
        port: "{{ cluster_profiles[0].rsyslog_server_list[0].port | int }}"
        network_protocol: "{{ cluster_profiles[0].rsyslog_server_list[0].network_protocol }}"
        modules:
          - name: "{{ cluster_profiles[0].rsyslog_server_list[0].modules[0].name }}"
            log_severity_level: "{{ cluster_profiles[0].rsyslog_server_list[0].modules[0].log_severity_level }}"
            should_log_monitor_files: "{{ cluster_profiles[0].rsyslog_server_list[0].modules[0].should_log_monitor_files }}"
          - name: "{{ cluster_profiles[0].rsyslog_server_list[0].modules[1].name }}"
            log_severity_level: "{{ cluster_profiles[0].rsyslog_server_list[0].modules[1].log_severity_level }}"
            should_log_monitor_files: "{{ cluster_profiles[0].rsyslog_server_list[0].modules[1].should_log_monitor_files }}"
    pulse_status:
      is_enabled: "{{ cluster_profiles[0].pulse_status.is_enabled }}"
      pii_scrubbing_level: "{{ cluster_profiles[0].pulse_status.pii_scrubbing_level }}"
  register: result

- ansible.builtin.debug:
    var: result

# - name: Destroy the cluster for cleanup
#   ntnx_clusters_v2:
#     state: absent
#     ext_id: "{{ cluster_ext_id }}"
#   register: result
#   ignore_errors: true

# - name: Verify cluster deletion
#   ansible.builtin.assert:
#     that:
#       - result.response is defined
#       - result.changed == true
#       - result.response.status == "SUCCEEDED"
#       - result.ext_id == cluster_ext_id
#     fail_msg: Failed verifying cluster deletion
#     success_msg: Cluster deletion passed successfully

