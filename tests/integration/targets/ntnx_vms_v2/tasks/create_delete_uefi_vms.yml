---
- name: Start ntnx_vms_v2 tests for UEFI Boot
  ansible.builtin.debug:
    msg: Start ntnx_vms_v2 tests for UEFI Boot

- name: Generate random category key & value
  ansible.builtin.set_fact:
    random_name: "{{ query('community.general.random_string', numbers=false, special=false, length=12)[0] }}"

- name: Set VM name suffix
  ansible.builtin.set_fact:
    suffix_name: ansible-ag

- name: Set VM name and to delete list
  ansible.builtin.set_fact:
    todelete: []
    vm_name: "{{ random_name }}{{ suffix_name }}vm"

########################################################################
# Secure Boot with Boot Order DISK and specified boot device - Check Mode
########################################################################
- name: Create Secure Boot UEFI VM with Boot Order DISK and specified boot device with check_mode
  ntnx_vms_v2:
    name: "uefi-vm01"
    description: ansible test for uefi boot secure boot with boot order disk and boot device specified
    cluster:
      ext_id: "0006326a-6c11-0dcd-0b6e-4caec93aacfe"
    num_sockets: 1
    num_cores_per_socket: 3
    memory_size_bytes: 6442450944
    machine_type: Q35
    hardware_clock_timezone: UTC
    vtpm_config:
      is_vtpm_enabled: true
      version: "2.0"
    cd_roms:
      - disk_address:
          bus_type: SATA
        backing_info:
          data_source:
            reference:
              image_reference:
                image_ext_id: "f4bd11f3-74ad-4d0b-ac44-9357f3abde39"
    disks:
      - backing_info:
          vm_disk:
            disk_size_bytes: 64424509440
            storage_container:
              ext_id: "fae08563-af90-41a5-91d7-4febf4dc6198"
        disk_address:
          bus_type: SCSI
          index: 2
    boot_config:
      uefi_boot:
        is_secure_boot_enabled: true
        boot_device:
          boot_device_disk:
            disk_address:
              bus_type: SCSI
              index: 2
        boot_order:
          - DISK
          - CDROM
          - NETWORK
    nics:
      - backing_info:
          is_connected: true
        network_info:
          nic_type: NORMAL_NIC
          subnet:
            ext_id: "143801bd-f58e-4685-9df7-bb4c676a2672"
          vlan_mode: ACCESS
  register: result
  ignore_errors: true
  check_mode: true

- name: Create Secure Boot UEFI VM with Boot Order DISK and specified boot device with check_mode status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response.cluster.ext_id == "0006326a-6c11-0dcd-0b6e-4caec93aacfe"
      - result.response.name == "uefi-vm01"
      - result.response.description == "ansible test for uefi boot secure boot with boot order disk and boot device specified"
      - result.response.num_sockets == 1
      - result.response.num_cores_per_socket == 3
      - result.response.memory_size_bytes == 6442450944
      - result.response.machine_type == "Q35"
      - result.response.hardware_clock_timezone == "UTC"
      - result.response.vtpm_config.is_vtpm_enabled == true
      - result.response.vtpm_config.version == "2.0"
      - result.response.cd_roms[0].backing_info.data_source.reference.image_ext_id == "f4bd11f3-74ad-4d0b-ac44-9357f3abde39"
      - result.response.cd_roms[0].disk_address.bus_type == "SATA"
      - result.response.disks[0].backing_info.storage_container.ext_id == "fae08563-af90-41a5-91d7-4febf4dc6198"
      - result.response.disks[0].disk_address.bus_type == "SCSI"
      - result.response.disks[0].disk_address.index == 2
      - result.response.boot_config.is_secure_boot_enabled == true
      - result.response.boot_config.boot_order[0] == "DISK"
      - result.response.boot_config.boot_device.disk_address.bus_type == "SCSI"
      - result.response.boot_config.boot_device.disk_address.index == 2
      - result.response.nics[0].backing_info.is_connected == true
      - result.response.nics[0].network_info.nic_type == "NORMAL_NIC"
      - result.response.nics[0].network_info.subnet.ext_id == "143801bd-f58e-4685-9df7-bb4c676a2672"
      - result.response.nics[0].network_info.vlan_mode == "ACCESS"
    fail_msg: "Unable to create secure boot UEFI VM with boot order DISK and specified boot device with check_mode"
    success_msg: "Secure boot UEFI VM with boot order DISK and specified boot device with check_mode created successfully"

########################################################################
# Secure Boot Boot with Boot Order DISK and specified boot device - Actual Build
########################################################################
- name: Create Secure Boot UEFI VM with Boot Order DISK and specified boot device
  ntnx_vms_v2:
    name: "{{ vm_name }}"
    description: ansible test for uefi boot secure boot with boot order disk and boot device specified
    cluster:
      ext_id: "{{ cluster.uuid }}"
    num_sockets: 1
    num_cores_per_socket: 3
    memory_size_bytes: 6442450944
    machine_type: Q35
    hardware_clock_timezone: UTC
    vtpm_config:
      is_vtpm_enabled: true
      version: "2.0"
    cd_roms:
      - disk_address:
          bus_type: SATA
        backing_info:
          data_source:
            reference:
              image_reference:
                image_ext_id: "{{ iso_image.image_ext_ids[0] }}"
    disks:
      - backing_info:
          vm_disk:
            disk_size_bytes: 64424509440
            storage_container:
              ext_id: "{{ storage_container.uuid }}"
        disk_address:
          bus_type: SCSI
          index: 2
    boot_config:
      uefi_boot:
        is_secure_boot_enabled: true
        boot_device:
          boot_device_disk:
            disk_address:
              bus_type: SCSI
              index: 2
        boot_order:
          - DISK
          - CDROM
          - NETWORK
    nics:
      - backing_info:
          is_connected: true
        network_info:
          nic_type: NORMAL_NIC
          subnet:
            ext_id: "{{ static.uuid }}"
          vlan_mode: ACCESS
  register: result
  ignore_errors: true

- name: Create Secure Boot UEFI VM with Boot Order DISK and specified boot device status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
      - result.response.cluster.ext_id == "{{ cluster.uuid }}"
      - result.response.name == "{{ vm_name }}"
      - result.response.description == "ansible test for uefi boot secure boot with boot order disk and boot device specified"
      - result.response.num_sockets == 1
      - result.response.num_cores_per_socket == 3
      - result.response.memory_size_bytes == 6442450944
      - result.response.machine_type == "Q35"
      - result.response.hardware_clock_timezone == "UTC"
      - result.response.vtpm_config.is_vtpm_enabled == true
      - result.response.vtpm_config.version == "2.0"
      - result.response.cd_roms[0].backing_info.data_source.reference.image_ext_id == "{{ iso_image.image_ext_ids[0] }}"
      - result.response.cd_roms[0].disk_address.bus_type == "SATA"
      - result.response.disks[0].backing_info.storage_container.ext_id == "{{ storage_container.uuid }}"
      - result.response.disks[0].disk_address.bus_type == "SCSI"
      - result.response.disks[0].disk_address.index == 2
      - result.response.boot_config.is_secure_boot_enabled == true
      - result.response.boot_config.boot_order[0] == "DISK"
      - result.response.boot_config.boot_device.disk_address.bus_type == "SCSI"
      - result.response.boot_config.boot_device.disk_address.index == 2
      - result.response.nics[0].backing_info.is_connected == true
      - result.response.nics[0].network_info.nic_type == "NORMAL_NIC"
      - result.response.nics[0].network_info.subnet.ext_id == "{{ static.uuid }}"
      - result.response.nics[0].network_info.vlan_mode == "ACCESS"
    fail_msg: "Unable to create Secure Boot UEFI VM with Boot Order DISK and specified boot device"
    success_msg: "Secure Boot UEFI VM with Boot Order DISK and specified boot device created successfully"

- name: Fetch vm using ext_id
  ntnx_vms_info_v2:
    ext_id: "{{ result.ext_id }}"
  register: result
  ignore_errors: true

- name: Adding VM to todelete list
  ansible.builtin.set_fact:
    todelete: '{{ todelete + [result["ext_id"]] }}'

########################################################################
# Secure Boot Boot with Boot Order NETWORK - Actual Build
########################################################################
- name: Create Secure Boot UEFI VM with Boot Order NETWORK
  ntnx_vms_v2:
    name: "{{ vm_name }}"
    description: ansible test for uefi boot secure boot with boot order network
    cluster:
      ext_id: "{{ cluster.uuid }}"
    num_sockets: 1
    num_cores_per_socket: 3
    memory_size_bytes: 6442450944
    machine_type: Q35
    hardware_clock_timezone: UTC
    vtpm_config:
      is_vtpm_enabled: true
      version: "2.0"
    cd_roms:
      - disk_address:
          bus_type: SATA
        backing_info:
          data_source:
            reference:
              image_reference:
                image_ext_id: "{{ iso_image.image_ext_ids[0] }}"
    disks:
      - backing_info:
          vm_disk:
            disk_size_bytes: 64424509440
            storage_container:
              ext_id: "{{ storage_container.uuid }}"
        disk_address:
          bus_type: SCSI
          index: 2
    boot_config:
      uefi_boot:
        is_secure_boot_enabled: true
        boot_device:
        boot_order:
          - NETWORK
          - CDROM
          - DISK
    nics:
      - backing_info:
          is_connected: true
        network_info:
          nic_type: NORMAL_NIC
          subnet:
            ext_id: "{{ static.uuid }}"
          vlan_mode: ACCESS
  register: result
  ignore_errors: true

- name: Create Secure Boot UEFI VM with Boot Order NETWORK status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
      - result.response.cluster.ext_id == "{{ cluster.uuid }}"
      - result.response.name == "{{ vm_name }}"
      - result.response.description == "ansible test for uefi boot secure boot with boot order network"
      - result.response.num_sockets == 1
      - result.response.num_cores_per_socket == 3
      - result.response.memory_size_bytes == 6442450944
      - result.response.machine_type == "Q35"
      - result.response.hardware_clock_timezone == "UTC"
      - result.response.vtpm_config.is_vtpm_enabled == true
      - result.response.vtpm_config.version == "2.0"
      - result.response.cd_roms[0].backing_info.data_source.reference.image_ext_id == "{{ iso_image.image_ext_ids[0] }}"
      - result.response.cd_roms[0].disk_address.bus_type == "SATA"
      - result.response.disks[0].backing_info.storage_container.ext_id == "{{ storage_container.uuid }}"
      - result.response.disks[0].disk_address.bus_type == "SCSI"
      - result.response.disks[0].disk_address.index == 2
      - result.response.boot_config.is_secure_boot_enabled == true
      - result.response.boot_config.boot_order[0] == "NETWORK"
      - result.response.nics[0].backing_info.is_connected == true
      - result.response.nics[0].network_info.nic_type == "NORMAL_NIC"
      - result.response.nics[0].network_info.subnet.ext_id == "{{ static.uuid }}"
      - result.response.nics[0].network_info.vlan_mode == "ACCESS"
    fail_msg: "Unable to create Secure Boot UEFI VM with Boot Order NETWORK"
    success_msg: "Secure Boot UEFI VM with Boot Order NETWORK created successfully"

- name: Fetch vm using ext_id
  ntnx_vms_info_v2:
    ext_id: "{{ result.ext_id }}"
  register: result
  ignore_errors: true

- name: Adding VM to todelete list
  ansible.builtin.set_fact:
    todelete: '{{ todelete + [result["ext_id"]] }}'

#########################################################################
# Delete VMS
#########################################################################
- name: Delete all Created VMs
  ntnx_vms_v2:
    state: absent
    ext_id: "{{ item }}"
  register: result
  loop: "{{ todelete }}"

- name: Deletion Status
  ansible.builtin.assert:
    that:
      - item.changed == true
      - item.failed == false
      - item.response.status == 'SUCCEEDED'
      - item.response is defined
      - item.changed == true
      - item.failed == false
      - item.ext_id == "{{ todelete[vms_index] }}"
      - item.ext_id == todelete[vms_index]
    fail_msg: "Unable to delete VM "
    success_msg: "VM is deleted successfully "
  loop: "{{ result.results }}"
  loop_control:
    index_var: vms_index

- name: Reset to delete list
  ansible.builtin.set_fact:
    todelete: []
