---
- name: Start ntnx_acps_info tests
  ansible.builtin.debug:
    msg: "Start ntnx_acps_info tests"

- name: Generate random acp name
  ansible.builtin.set_fact:
    acp_name: "{{ query('community.general.random_string', upper=false, numbers=false, special=false)[0] }}"

- name: Create min ACP for update
  ntnx_acps:
    state: present
    wait: true
    name: "{{acp_name}}"
    role:
      uuid: "{{ acp.role.uuid }}"
  register: acps

- name: Adding acp to delete later
  ansible.builtin.set_fact:
    todelete: '{{ todelete + [  acps["response"]["metadata"]["uuid"] ] }}'

- name: Test getting all acp's
  ntnx_acps_info:
    kind: access_control_policy
    length: 1
    offset: 1
    sort_order: "ASCENDING"
    sort_attribute: "name"
  register: result

- name: Check listing status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
    fail_msg: "Unable to list all acps"
    success_msg: "acps listed successfully"
################################################################

- name: Test getting particular acp using filter
  ntnx_acps_info:
    filter:
      name: "{{ acp_name }}"
  register: result

- name: Check listing status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response.entities[0].metadata.uuid == '{{ acps.response.metadata.uuid }}'
    fail_msg: "Unable to get particular acp using filter"
    success_msg: "acp info obtained successfully using filter"

#################################################################

- name: Test getting particular acp using uuid
  ntnx_acps_info:
    acp_uuid: "{{ acps.response.metadata.uuid }}"
  register: result

- name: Check listing status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response.status.name == '{{ acp_name }}'
    fail_msg: "Unable to get particular acp using uuid"
    success_msg: "acp info obtained successfully using uuid"

- name: Cleanup created entities
  ntnx_acps:
    state: absent
    acp_uuid: "{{ item }}"
  register: result
  loop: "{{ todelete }}"
  ignore_errors: true

- name: Reset todelete list
  ansible.builtin.set_fact:
    todelete: []
