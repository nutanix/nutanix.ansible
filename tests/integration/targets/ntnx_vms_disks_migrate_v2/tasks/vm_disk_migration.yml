---
# Variables required before running this playbook:
# - cluster: The cluster object containing the UUID of the cluster.
# - storage_container: The storage container object containing the UUID of the storage container.

- name: Start ntnx_vms_disks_migrate_v2 tests
  ansible.builtin.debug:
    msg: Start ntnx_vms_disks_migrate_v2 tests

- name: Generate random name
  ansible.builtin.set_fact:
    random_name: "{{ query('community.general.random_string', numbers=false, special=false, length=12)[0] }}"

- name: Set VM name prefix
  ansible.builtin.set_fact:
    prefix_name: ansible-test

- name: Set VM name
  ansible.builtin.set_fact:
    vm_name: "{{ prefix_name }}{{ random_name }}vm"
    storage_container_name: "{{ prefix_name }}{{ random_name }}storage_container"

- name: Create storage container with minimal spec
  nutanix.ncp.ntnx_storage_containers_v2:
    name: "{{ storage_container_name }}1"
    cluster_ext_id: "{{ cluster.uuid }}"
  register: result
  ignore_errors: true

- name: Check storage container creation with minimal spec
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.ext_id is defined
      - result.response.container_ext_id == result.ext_id
      - result.task_ext_id is defined
      - result.response.name == "{{ storage_container_name }}1"
      - result.response.cluster_ext_id == "{{ cluster.uuid }}"
      - result.ext_id is defined
    fail_msg: Unable to create storage container with minimal spec
    success_msg: Storage container created successfully with minimal spec

- name: Set storage container ext_id
  ansible.builtin.set_fact:
    storage_container_ext_id: "{{ result.ext_id }}"

- name: Create VM with multiple disks
  nutanix.ncp.ntnx_vms_v2:
    name: "{{ vm_name }}"
    description: ansible test
    cluster:
      ext_id: "{{ cluster.uuid }}"
    disks:
      - backing_info:
          vm_disk:
            disk_size_bytes: 26843545600
            storage_container:
              ext_id: "{{ storage_container.uuid }}"
        disk_address:
          bus_type: SCSI
          index: 2
      - backing_info:
          vm_disk:
            disk_size_bytes: 26843545600
            storage_container:
              ext_id: "{{ storage_container.uuid }}"
        disk_address:
          bus_type: SCSI
          index: 3
      - backing_info:
          vm_disk:
            disk_size_bytes: 26843545600
            storage_container:
              ext_id: "{{ storage_container_ext_id }}"
        disk_address:
          bus_type: SCSI
          index: 4
      - backing_info:
          vm_disk:
            disk_size_bytes: 26843545600
            storage_container:
              ext_id: "{{ storage_container_ext_id }}"
        disk_address:
          bus_type: SCSI
          index: 5
      - backing_info:
          vm_disk:
            disk_size_bytes: 26843545600
            storage_container:
              ext_id: "{{ storage_container_ext_id }}"
        disk_address:
          bus_type: SCSI
          index: 6
  register: result
  ignore_errors: true

- name: Set VM ext_id
  ansible.builtin.set_fact:
    vm_ext_id: "{{ result.ext_id }}"

- name: Set VM disks ext_ids
  ansible.builtin.set_fact:
    vm_disks_ext_ids: "{{ result.response.disks | map(attribute='ext_id') | list }}"

- name: Set storage container ext_ids
  ansible.builtin.set_fact:
    storage_container_ext_ids: "{{ result.response.disks | map(attribute='backing_info.storage_container.ext_id') | list | unique }}"

- name: Assert VM creation
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.ext_id is defined
      - result.response.name == "{{ vm_name }}"
      - result.response.cluster.ext_id == "{{ cluster.uuid }}"
      - result.response.disks | length == 5
      - result.response.disks | map(attribute='ext_id') | list == vm_disks_ext_ids
      - storage_container_ext_ids | length == 2
      - storage_container.uuid in storage_container_ext_ids
      - storage_container_ext_id in storage_container_ext_ids
    fail_msg: Unable to create VM with multiple disks
    success_msg: VM created successfully with multiple disks

- name: Migrate all VM disks to the same storage container with check mode enabled
  nutanix.ncp.ntnx_vms_disks_migrate_v2:
    vm_ext_id: "add18bfd-7477-4deb-6f67-e53d86f43e03"
    migrate_disks:
      all_disks_migration_plan:
        storage_container:
          ext_id: "5007f144-f2f9-48d7-a47f-9f8739d55045"
  register: result
  check_mode: true
  ignore_errors: true

- name: Migrate all VM disks to the same storage container with check mode enabled status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response.migrate_disks.storage_container.ext_id == "5007f144-f2f9-48d7-a47f-9f8739d55045"
      - result.vm_ext_id == "add18bfd-7477-4deb-6f67-e53d86f43e03"
    success_msg: "VM disks migration with check mode succeeded"

- name: Migrate all VM disks to the same storage container
  nutanix.ncp.ntnx_vms_disks_migrate_v2:
    vm_ext_id: "{{ vm_ext_id }}"
    migrate_disks:
      all_disks_migration_plan:
        storage_container:
          ext_id: "{{ storage_container_ext_id }}"
  register: result
  ignore_errors: true

- name: Assert Migrate all VM disks to the same storage container
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.disks | length == 5
      - result.response.disks | map(attribute='backing_info.storage_container.ext_id') | list | unique | length == 1
      - result.response.disks | map(attribute='backing_info.storage_container.ext_id') | list | unique | first == storage_container_ext_id
    fail_msg: "Migrate all VM disks to the same storage container failed"
    success_msg: "Migrate all VM disks to the same storage container succeeded"

- name: Migrate all disks to the same storage container using storage container that does not exist
  nutanix.ncp.ntnx_vms_disks_migrate_v2:
    vm_ext_id: "{{ vm_ext_id }}"
    migrate_disks:
      all_disks_migration_plan:
        storage_container:
          ext_id: "12345678-1234-1234-1234-112345678965"
  register: result
  ignore_errors: true

- name: Assert Migrate all disks to the same storage container using storage container that does not exist
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == true
      - result.response is defined
      - result.response.error_messages | length > 0
      - result.response.status == "FAILED"
    fail_msg: "Migrate all disks to the same storage container using storage container that does not exist failed"
    success_msg: "Migrate all disks to the same storage container using storage container that does not exist succeeded"

- name: Migrate VM disks to different storage containers with check mode enabled
  nutanix.ncp.ntnx_vms_disks_migrate_v2:
    vm_ext_id: "{{ vm_ext_id }}"
    migrate_disks:
      migration_plans:
        plans:
          - vm_disks:
              - disk_ext_id: "67d66f2c-766c-42cb-b20c-d5f40a17e15e"
              - disk_ext_id: "d8bb6c6e-7c0b-4543-a9df-9d2600919934"
            storage_container:
              ext_id: "77c1d0c6-aa90-4fdd-a63d-1eca02cbaaed"
          - vm_disks:
              - disk_ext_id: "a9f831c3-3453-41ee-adb6-172dc27ccf7e"
              - disk_ext_id: "d66a7310-93f0-40e7-8d3f-6aa371be19d3"
              - disk_ext_id: "4eb8c1d5-4c08-4221-a5ae-242fb566fe08"
            storage_container:
              ext_id: "49e682d9-93eb-4024-8def-27b6fc0ec42e"
  register: result
  check_mode: true
  ignore_errors: true

- name: Migrate VM disks to different storage containers with check mode enabled status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response.migrate_disks.plans | length == 2
      - result.response.migrate_disks.plans[0].storage_container.ext_id == "77c1d0c6-aa90-4fdd-a63d-1eca02cbaaed"
      - result.response.migrate_disks.plans[1].storage_container.ext_id == "49e682d9-93eb-4024-8def-27b6fc0ec42e"
      - result.response.migrate_disks.plans[0].vm_disks[0].disk_ext_id == "67d66f2c-766c-42cb-b20c-d5f40a17e15e"
      - result.response.migrate_disks.plans[0].vm_disks[1].disk_ext_id == "d8bb6c6e-7c0b-4543-a9df-9d2600919934"
      - result.response.migrate_disks.plans[1].vm_disks[0].disk_ext_id == "a9f831c3-3453-41ee-adb6-172dc27ccf7e"
      - result.response.migrate_disks.plans[1].vm_disks[1].disk_ext_id == "d66a7310-93f0-40e7-8d3f-6aa371be19d3"
      - result.response.migrate_disks.plans[1].vm_disks[2].disk_ext_id == "4eb8c1d5-4c08-4221-a5ae-242fb566fe08"
      - result.vm_ext_id == vm_ext_id
    fail_msg: "VM disks migration with check mode failed"
    success_msg: "VM disks migration with check mode succeeded"

- name: Migrate VM disks to different storage containers
  nutanix.ncp.ntnx_vms_disks_migrate_v2:
    vm_ext_id: "{{ vm_ext_id }}"
    migrate_disks:
      migration_plans:
        plans:
          - vm_disks:
              - disk_ext_id: "{{ vm_disks_ext_ids[0] }}"
            storage_container:
              ext_id: "{{ storage_container_ext_ids[0] }}"
          - vm_disks:
              - disk_ext_id: "{{ vm_disks_ext_ids[1] }}"
              - disk_ext_id: "{{ vm_disks_ext_ids[2] }}"
              - disk_ext_id: "{{ vm_disks_ext_ids[3] }}"
              - disk_ext_id: "{{ vm_disks_ext_ids[4] }}"
            storage_container:
              ext_id: "{{ storage_container_ext_ids[1] }}"
  register: result
  ignore_errors: true

- name: Assert Migrate VM disks to different storage containers
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.disks | length == 5
    fail_msg: "Migrate VM disks to different storage containers failed"
    success_msg: "Migrate VM disks to different storage containers succeeded"

- name: Create disk-to-container mapping from result
  ansible.builtin.set_fact:
    disk_container_mapping: >-
      {{
        dict(result.response.disks | map(attribute='ext_id') | zip(result.response.disks | map(attribute='backing_info.storage_container.ext_id')))
      }}

- name: Assert each disk is in the correct storage container
  ansible.builtin.assert:
    that:
      - disk_container_mapping[item.disk] == item.container
    fail_msg: "Disk {{ item.disk }} not in expected container {{ item.container }}"
    success_msg: "Disk {{ item.disk }} in expected container {{ item.container }}"
  loop:
    - {
        disk: "{{ vm_disks_ext_ids[0] }}",
        container: "{{ storage_container_ext_ids[0] }}",
      }
    - {
        disk: "{{ vm_disks_ext_ids[1] }}",
        container: "{{ storage_container_ext_ids[1] }}",
      }
    - {
        disk: "{{ vm_disks_ext_ids[2] }}",
        container: "{{ storage_container_ext_ids[1] }}",
      }
    - {
        disk: "{{ vm_disks_ext_ids[3] }}",
        container: "{{ storage_container_ext_ids[1] }}",
      }
    - {
        disk: "{{ vm_disks_ext_ids[4] }}",
        container: "{{ storage_container_ext_ids[1] }}",
      }

- name: Migrate VM disks to different storage containers
  nutanix.ncp.ntnx_vms_disks_migrate_v2:
    vm_ext_id: "{{ vm_ext_id }}"
    migrate_disks:
      migration_plans:
        plans:
          - vm_disks:
              - disk_ext_id: "{{ vm_disks_ext_ids[0] }}"
              - disk_ext_id: "{{ vm_disks_ext_ids[1] }}"
              - disk_ext_id: "{{ vm_disks_ext_ids[2] }}"
            storage_container:
              ext_id: "{{ storage_container_ext_ids[0] }}"
          - vm_disks:
              - disk_ext_id: "{{ vm_disks_ext_ids[3] }}"
              - disk_ext_id: "{{ vm_disks_ext_ids[4] }}"
            storage_container:
              ext_id: "{{ storage_container_ext_ids[1] }}"
  register: result
  ignore_errors: true

- name: Assert Migrate VM disks to different storage containers
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.disks | length == 5
    fail_msg: "Migrate VM disks to different storage containers failed"
    success_msg: "Migrate VM disks to different storage containers succeeded"

- name: Create disk-to-container mapping from result
  ansible.builtin.set_fact:
    disk_container_mapping: >-
      {{
        dict(result.response.disks | map(attribute='ext_id') | zip(result.response.disks | map(attribute='backing_info.storage_container.ext_id')))
      }}

- name: Assert each disk is in the correct storage container
  ansible.builtin.assert:
    that:
      - disk_container_mapping[item.disk] == item.container
    fail_msg: "Disk {{ item.disk }} not in expected container {{ item.container }}"
    success_msg: "Disk {{ item.disk }} in expected container {{ item.container }}"
  loop:
    - {
        disk: "{{ vm_disks_ext_ids[0] }}",
        container: "{{ storage_container_ext_ids[0] }}",
      }
    - {
        disk: "{{ vm_disks_ext_ids[1] }}",
        container: "{{ storage_container_ext_ids[0] }}",
      }
    - {
        disk: "{{ vm_disks_ext_ids[2] }}",
        container: "{{ storage_container_ext_ids[0] }}",
      }
    - {
        disk: "{{ vm_disks_ext_ids[3] }}",
        container: "{{ storage_container_ext_ids[1] }}",
      }
    - {
        disk: "{{ vm_disks_ext_ids[4] }}",
        container: "{{ storage_container_ext_ids[1] }}",
      }

- name: Migrate VM disks to different storage containers with non-existing disks
  nutanix.ncp.ntnx_vms_disks_migrate_v2:
    vm_ext_id: "{{ vm_ext_id }}"
    migrate_disks:
      migration_plans:
        plans:
          - vm_disks:
              - disk_ext_id: "12345678-1234-1234-1234-112345678965"
              - disk_ext_id: "12345678-1234-1234-1234-212345678966"
            storage_container:
              ext_id: "{{ storage_container_ext_ids[0] }}"
  register: result
  ignore_errors: true

- name: Assert Migrate VM disks to different storage containers with non-existing disks
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == true
      - result.response is defined
      - result.response.error_messages | length > 0
      - result.response.status == "FAILED"
    fail_msg: "Migrate VM disks to different storage containers with non-existing disks failed"
    success_msg: "Migrate VM disks to different storage containers with non-existing disks succeeded"

- name: Migrate VM disks to different storage containers with non-existing storage container
  nutanix.ncp.ntnx_vms_disks_migrate_v2:
    vm_ext_id: "{{ vm_ext_id }}"
    migrate_disks:
      migration_plans:
        plans:
          - vm_disks:
              - disk_ext_id: "{{ vm_disks_ext_ids[0] }}"
              - disk_ext_id: "{{ vm_disks_ext_ids[1] }}"
            storage_container:
              ext_id: "12345678-1234-1234-1234-112345678965"
  register: result
  ignore_errors: true

- name: Assert Migrate VM disks to different storage containers with non-existing storage container
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == true
      - result.response is defined
      - result.response.error_messages | length > 0
      - result.response.status == "FAILED"
    fail_msg: "Migrate VM disks to different storage containers with non-existing storage container failed"
    success_msg: "Migrate VM disks to different storage containers with non-existing storage container succeeded"

- name: Delete VM
  nutanix.ncp.ntnx_vms_v2:
    state: absent
    ext_id: "{{ vm_ext_id }}"
  register: result

- name: Deletion Status
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response.status == 'SUCCEEDED'
      - result.response is defined
      - result.changed == true
      - result.failed == false
      - result.ext_id == "{{ vm_ext_id }}"
    fail_msg: "Unable to delete VM "
    success_msg: "VM is deleted successfully "

- name: Delete storage container
  nutanix.ncp.ntnx_storage_containers_v2:
    state: absent
    ext_id: "{{ storage_container_ext_id }}"
    ignore_small_files: true
  register: result
  ignore_errors: true

- name: Deletion Status
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response.status == 'SUCCEEDED'
      - result.response is defined
      - result.ext_id == storage_container_ext_id
    fail_msg: Unable to delete storage container
    success_msg: Storage container deleted successfully
