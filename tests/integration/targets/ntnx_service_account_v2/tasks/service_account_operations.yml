---
- name: Start Service Account tests
  ansible.builtin.debug:
    msg: Start Service Account tests

- name: Generate random strings
  ansible.builtin.set_fact:
    random_string: "{{ query('community.general.random_string', numbers=false, special=false, length=12) }}"

- name: Ensure Pattern Compliance
  ansible.builtin.set_fact:
    random: user_test_{{ random_string | regex_replace('[^a-zA-Z0-9]', '') }}
    users_query: ""

- name: Set todelete list
  ansible.builtin.set_fact:
    todelete: []

###############################################################################

- name: Create Service Account with check mode
  ntnx_users_v2:
    user_type: SERVICE_ACCOUNT
    username: "service_acc_1"
    email_id: "service_acc_1@email.com"
    description: "description_1"
  register: result
  ignore_errors: true
  check_mode: true

- name: Create Service Account with check mode status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response.user_type == "SERVICE_ACCOUNT"
      - result.response.username == "service_acc_1"
      - result.response.email_id == "service_acc_1@email.com"
      - result.response.description == "description_1"
    fail_msg: Create Service Account with check mode failed
    success_msg: Create Service Account with check mode passed

###############################################################################

- name: Create Service Account
  ntnx_users_v2:
    user_type: SERVICE_ACCOUNT
    username: "{{ random }}_service_acc_1"
    email_id: "{{ random }}_1@email.com"
    description: "{{ random }}_description_1"
  register: result
  ignore_errors: true

- name: Create Service Account status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
      - result.response.user_type == "SERVICE_ACCOUNT"
      - result.response.username == "{{ random }}_service_acc_1" | lower
      - result.response.email_id == "{{ random }}_1@email.com"
      - result.response.description == "{{ random }}_description_1"
      - result.response.status == "ACTIVE"
    fail_msg: Create Service Account failed
    success_msg: Create Service Account passed

- name: Adding user external ID to delete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [result.ext_id] }}"

###############################################################################

- name: Create Service Account that already exists
  ntnx_users_v2:
    user_type: SERVICE_ACCOUNT
    username: "{{ random }}_service_acc_1"
    email_id: "{{ random }}_1@email.com"
    description: "{{ random }}_description_1"
  register: result
  ignore_errors: true

- name: Create Service Account that already exists status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == true
      - result.status == 409
      - result.response.data.error is defined
      - result.response.data.error | length > 0
    fail_msg: Create Service Account that already exists failed
    success_msg: Create Service Account that already exists passed

###############################################################################

- name: Create Service Account with extra parameters
  ntnx_users_v2:
    user_type: SERVICE_ACCOUNT
    username: "{{ random }}_service_acc_2"
    first_name: "{{ random }}_firstname_2"
    last_name: "{{ random }}_lastname_2"
    display_name: "{{ random }}_displayname_2"
    password: test.Password.123
    middle_initial: "{{ random }}_middleinitial_2"
    email_id: "{{ random }}_2@email.com"
    locale: en-US
    status: ACTIVE
  register: result
  ignore_errors: true

# If we pass first_name, last_name, middle_initial, and locale it will return empty strings in them
- name: Create Service Account with extra parameters status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
      - result.ext_id is defined
      - result.response.ext_id == result.ext_id
      - result.response.user_type == "SERVICE_ACCOUNT"
      - result.response.username | lower == "{{ random }}_service_acc_2" | lower
      - result.response.first_name == ""
      - result.response.last_name == ""
      - result.response.display_name == "{{ random }}_displayname_2"
      - result.response.middle_initial == ""
      - result.response.email_id == "{{ random }}_2@email.com"
      - result.response.locale == ""
      - result.response.status == "ACTIVE"
    fail_msg: Create Service Account with extra parameters failed
    success_msg: Create Service Account with extra parameters passed

- name: Adding user external ID to delete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [result.ext_id] }}"

###############################################################################

- name: Update Service Account with check mode enabled
  ntnx_users_v2:
    ext_id: "{{ todelete[0] }}"
    email_id: "service_acc_1_updated@email.com"
    description: "description_1_updated"
  register: result
  ignore_errors: true
  check_mode: true

- name: Update Service Account with check mode enabled status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.ext_id == "{{ todelete[0] }}"
      - result.response.email_id == "service_acc_1_updated@email.com"
      - result.response.description == "description_1_updated"
    fail_msg: Update Service Account with check mode enabled failed
    success_msg: Update Service Account with check mode enabled passed

###############################################################################

- name: Update Service Account
  ntnx_users_v2:
    ext_id: "{{ todelete[0] }}"
    email_id: "{{ random }}_1_updated@email.com"
    description: "{{ random }}_description_1_updated"
  register: result
  ignore_errors: true

- name: Update Service Account status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
      - result.ext_id == "{{ todelete[0] }}"
      - result.response.email_id == "{{ random }}_1_updated@email.com"
      - result.response.description == "{{ random }}_description_1_updated"
      - result.response.username == "{{ random }}_service_acc_1" | lower
    fail_msg: Update Service Account failed
    success_msg: Update Service Account passed

###############################################################################

- name: Verify if module is idempotent if same config is provided
  ntnx_users_v2:
    ext_id: "{{ todelete[0] }}"
    email_id: "{{ random }}_1_updated@email.com"
    description: "{{ random }}_description_1_updated"
  register: result
  ignore_errors: true

- name: Verify if module is idempotent if same config is provided status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.msg == "Nothing to change."
      - result.skipped == true
    fail_msg: Verify if module is idempotent if same config is provided failed
    success_msg: Verify if module is idempotent if same config is provided passed

###############################################################################

- name: Update Service Account with extra parameters
  ntnx_users_v2:
    ext_id: "{{ todelete[1] }}"
    first_name: "{{ random }}_firstname_2_updated"
    last_name: "{{ random }}_lastname_2_updated"
    display_name: "{{ random }}_displayname_2_updated"
    middle_initial: "{{ random }}_middleinitial_2_updated"
    email_id: "{{ random }}_updated_2@email.com"
  register: result
  ignore_errors: true

# If we pass first_name, last_name, middle_initial, and locale it will always return empty strings in them
- name: Update Service Account with extra parameters status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
      - result.ext_id == "{{ todelete[1] }}"
      - result.response.first_name == ""
      - result.response.last_name == ""
      - result.response.display_name == "{{ random }}_displayname_2_updated"
      - result.response.middle_initial == ""
      - result.response.email_id == "{{ random }}_updated_2@email.com"
      - result.response.username == "{{ random }}_service_acc_2" | lower
    fail_msg: Update Service Account with extra parameters failed
    success_msg: Update Service Account with extra parameters passed

###############################################################################

- name: Update Service Account with extra parameters idempotency
  ntnx_users_v2:
    ext_id: "{{ todelete[1] }}"
    email_id: "{{ random }}_updated_2@email.com"
  register: result
  ignore_errors: true

- name: Update Service Account with extra parameters idempotency status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.msg == "Nothing to change."
      - result.skipped == true
    fail_msg: Update Service Account with extra parameters idempotency failed
    success_msg: Update Service Account with extra parameters idempotency passed

###############################################################################

- name: List all users
  ntnx_users_info_v2:
  register: users
  ignore_errors: true

- name: List all users Status
  ansible.builtin.assert:
    that:
      - users.response is defined
      - users.response | length> 0
      - users.failed == false
      - users.changed == false
    fail_msg: Unable to list all users
    success_msg: User info obtained successfully

###############################################################################

- name: Fetch only Service accounts
  ntnx_users_info_v2:
    filter: userType eq Schema.Enums.UserType'SERVICE_ACCOUNT'
  register: result
  ignore_errors: true

- name: Get all users type and remove duplicates to check if only SERVICE_ACCOUNT are fetched
  ansible.builtin.set_fact:
    user_type: "{{ result.response | map(attribute='user_type') | list | unique }}"

- name: Fetch only Service accounts Status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response | length > 0
      - user_type | length == 1
      - user_type[0] == "SERVICE_ACCOUNT"
    fail_msg: Fetch only Service accounts failed
    success_msg: Fetch only Service accounts passed

###############################################################################

- name: Fetch user info using user ext_id criteria
  ntnx_users_info_v2:
    ext_id: "{{ todelete[0] }}"
  register: result
  ignore_errors: true

- name: Fetch user info using user ext_id criteria Status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response.username == "{{ random }}_service_acc_1" | lower
      - result.response.ext_id == "{{ todelete[0] }}"
      - result.response.user_type == "SERVICE_ACCOUNT"
    fail_msg: Unable to fetch user using user ext_id criteria
    success_msg: user info obtained successfully

################################################################################

- name: Create an API key check_mode
  ntnx_users_api_key_v2:
    user_ext_id: "c1a4f2e3-8b9d-4d7e-9a6f-2e5b3c4d1f7a"
    name: "api_key_1"
    description: "description_api_key_1"
    key_type: "API_KEY"
    creation_type: "USERDEFINED"
    expiry_time: "2009-09-23T14:30:00-07:00"
    assigned_to: "admin_123"
  register: result
  ignore_errors: true
  check_mode: true

- name: Create an API key check_mode status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response.name == "api_key_1"
      - result.response.description == "description_api_key_1"
      - result.response.key_type == "API_KEY"
      - result.response.creation_type == "USERDEFINED"
      - result.response.expiry_time == "2009-09-23T14:30:00-07:00"
      - result.response.assigned_to == "admin_123"
    fail_msg: Create an API key check_mode failed
    success_msg: Create an API key check_mode passed

###############################################################################

- name: Get current time minus 5 minutes in the required format
  ansible.builtin.command: date -u -d "2 days" +"%Y-%m-%dT%H:%M:%S.%3NZ"
  register: expiry_date_time
  changed_when: false

- name: Create an API key 1
  ntnx_users_api_key_v2:
    user_ext_id: "{{ todelete[0] }}"
    name: "{{ random }}_api_key_1"
    description: "{{ random }}_description_api_key_1"
    key_type: "API_KEY"
    expiry_time: "{{ expiry_date_time.stdout }}"
  register: result
  ignore_errors: true

- name: Set actual and expected expiration time in seconds
  ansible.builtin.set_fact:
    actual_expiration_time: "{{ lookup('pipe', 'date -d ' ~ expiry_date_time.stdout ~ ' +%s') | int }}"
    expected_expiration_time: "{{ lookup('pipe', 'date -d ' ~ result.response.expiry_time ~ ' +%s') | int }}"

- name: Create an API key status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
      - result.response.name == "{{ random }}_api_key_1"
      - result.response.description == "{{ random }}_description_api_key_1"
      - result.response.key_type == "API_KEY"
      - actual_expiration_time == expected_expiration_time
      - result.user_ext_id == "{{ todelete[0] }}"
      - result.response.status == "VALID"
      - result.ext_id is defined
      - result.response.key_details is defined
      - result.response.key_details.api_key is defined
    fail_msg: Create an API key failed
    success_msg: Create an API key passed

- name: Storing ext_id of API key
  ansible.builtin.set_fact:
    api_key1_ext_id: "{{ result.ext_id }}"

# Create another API key to test list functionality
- name: Create an API key 2
  ntnx_users_api_key_v2:
    user_ext_id: "{{ todelete[0] }}"
    name: "{{ random }}_api_key_2"
    description: "{{ random }}_description_api_key_2"
    key_type: "API_KEY"
  register: result
  ignore_errors: true

- name: Create an API key status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
      - result.response.name == "{{ random }}_api_key_2"
      - result.response.description == "{{ random }}_description_api_key_2"
      - result.response.key_type == "API_KEY"
      - result.user_ext_id == "{{ todelete[0] }}"
      - result.response.status == "VALID"
      - result.ext_id is defined
      - result.response.key_details is defined
      - result.response.key_details.api_key is defined
    fail_msg: Create an API key failed
    success_msg: Create an API key passed

- name: Storing ext_id of API key
  ansible.builtin.set_fact:
    api_key2_ext_id: "{{ result.ext_id }}"

#################################################################################

- name: List all API keys
  ntnx_users_api_key_info_v2:
    user_ext_id: "{{ todelete[0] }}"
    filter: "name eq '{{ random }}_api_key_1'"
  register: result
  ignore_errors: true

- name: List all API keys status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response | length == 1
      - result.failed == false
      - result.changed == false
      - result.response[0].name == "{{ random }}_api_key_1"
      - result.response[0].ext_id == "{{ api_key1_ext_id }}"
    fail_msg: Unable to list all API keys
    success_msg: API key info obtained successfully

##################################################################################

- name: Get Details of Specific API key
  ntnx_users_api_key_info_v2:
    user_ext_id: "{{ todelete[0] }}"
    ext_id: "{{ api_key2_ext_id }}"
  register: result
  ignore_errors: true

- name: Get Details of Specific API key status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response | length > 0
      - result.failed == false
      - result.changed == false
      - result.response.name == "{{ random }}_api_key_2"
      - result.response.description == "{{ random }}_description_api_key_2"
      - result.response.key_type == "API_KEY"
      - result.response.creation_type == "USERDEFINED"
      - actual_expiration_time == expected_expiration_time
      - result.user_ext_id == "{{ todelete[0] }}"
      - result.response.ext_id == "{{ api_key2_ext_id }}"
    fail_msg: Unable to get details of specific API key
    success_msg: API key info obtained successfully

##################################################################################

- name: Revoke an API key
  ntnx_users_revoke_api_key_v2:
    user_ext_id: "{{ todelete[0] }}"
    ext_id: "{{ api_key1_ext_id }}"
    state: absent
  register: result
  ignore_errors: true

- name: Revoke an API key status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
      - result.ext_id == "{{ api_key1_ext_id }}"
      - result.user_ext_id == "{{ todelete[0] }}"
      - result.response == None
    fail_msg: Unable to revoke API key
    success_msg: API key revoked successfully

##################################################################################

- name: Delete an API key
  ntnx_users_api_key_v2:
    user_ext_id: "{{ todelete[0] }}"
    ext_id: "{{ api_key2_ext_id }}"
    state: absent
  register: result
  ignore_errors: true

- name: Delete an API key status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
      - result.ext_id == "{{ api_key2_ext_id }}"
      - result.user_ext_id == "{{ todelete[0] }}"
      - result.response == None
    fail_msg: Unable to delete API key
    success_msg: API key deleted successfully

###############################################################################

- name: Create an API key 3
  ntnx_users_api_key_v2:
    user_ext_id: "{{ todelete[0] }}"
    name: "{{ random }}_api_key_3"
    description: "{{ random }}_description_api_key_3"
    key_type: "API_KEY"
    expiry_time: "{{ expiry_date_time.stdout }}"
  register: result
  ignore_errors: true

- name: Create an API key status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.failed == false
      - result.response.name == "{{ random }}_api_key_3"
      - result.response.description == "{{ random }}_description_api_key_3"
      - result.response.key_type == "API_KEY"
      - actual_expiration_time == expected_expiration_time
      - result.user_ext_id == "{{ todelete[0] }}"
      - result.response.status == "VALID"
      - result.ext_id is defined
      - result.response.key_details is defined
      - result.response.key_details.api_key is defined
    fail_msg: Create an API key failed
    success_msg: Create an API key passed

- name: Storing ext_id of API key
  ansible.builtin.set_fact:
    api_key3_ext_id: "{{ result.ext_id }}"

- name: Store API key value
  ansible.builtin.set_fact:
    api_key_value: "{{ result.response.key_details.api_key }}"

#################################################################################
# Create an ACP and make any API call

- name: Delete created service accounts
  ntnx_users:
    state: absent
    user_uuid: "{{ item }}"
  loop: "{{ todelete }}"
  register: result
  ignore_errors: true

- name: Delete created service accounts status
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.msg == "All items completed"
      - result.results | length == todelete | length
      - item.failed == false
    fail_msg: Delete created service accounts failed
    success_msg: Delete created service accounts passed
  loop: "{{ result.results }}"
  when: todelete | length > 0 and result | length > 0

- name: Reset todelete list
  ansible.builtin.set_fact:
    todelete: []
