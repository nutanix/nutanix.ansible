---
- name: Start Key Management Server Tests
  ansible.builtin.debug:
    msg: start key management server tests

- name: Generate random name
  ansible.builtin.set_fact:
    random_name: "{{ query('community.general.random_string', numbers=false, special=false, length=12)[0] }}"

- name: Set prefix name for key management servers
  ansible.builtin.set_fact:
    prefix_name: ansible_test

- name: Set KMS name
  ansible.builtin.set_fact:
    kms_name: "{{ prefix_name }}_{{ random_name }}"

- name: Generate spec for creating key management server using check mode
  nutanix.ncp.ntnx_key_management_server_v2:
    name: "Key_Management_Server_1"
    access_information:
      endpoint_url: "https://demo-keyvault-001.vault.azure.net/"
      key_id: "key_id"
      tenant_id: "d4c8a8e5-91b3-4f7e-8c2e-77d6f4a22f11"
      client_id: "e29f9c62-3e56-41d0-b123-7f8a22c0cdef"
      client_secret: "7Z3uQ~vO4trhXk8B5M9qjwgT1pR2uC9yD1zF0wX3"
      credential_expiry_date: "2026-09-01"
  register: result
  check_mode: true
  ignore_errors: true

- name: Print result
  ansible.builtin.debug:
    var: result

- name: Assert spec generated for creating key management server using check mode
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response.name == "Key_Management_Server_1"
      - result.response.access_information is defined
      - result.response.access_information.client_id == "e29f9c62-3e56-41d0-b123-7f8a22c0cdef"
      - result.response.access_information.client_secret == "7Z3uQ~vO4trhXk8B5M9qjwgT1pR2uC9yD1zF0wX3"
      - result.response.access_information.tenant_id == "d4c8a8e5-91b3-4f7e-8c2e-77d6f4a22f11"
      - result.response.access_information.credential_expiry_date == "2026-09-01"
      - result.response.access_information.endpoint_url == "https://demo-keyvault-001.vault.azure.net/"
      - result.response.access_information.key_id == "key_id"
    fail_msg: "Failed to generate spec for creating key management server using check mode"
    success_msg: "Successfully generated spec for creating key management server using check mode"

- name: Create key management server
  nutanix.ncp.ntnx_key_management_server_v2:
    name: "{{ kms_name }}"
    access_information:
      endpoint_url: "{{ azure_kms.endpointUrl }}"
      key_id: "{{ azure_kms.keyId }}"
      tenant_id: "{{ azure_kms.tenantId }}"
      client_id: "{{ azure_kms.clientId }}"
      client_secret: "{{ azure_kms.clientSecret }}"
      credential_expiry_date: "{{ azure_kms.credentialExpiryDate }}"
  register: create_result
  ignore_errors: true

- name: Print create result
  ansible.builtin.debug:
    var: create_result

- name: Assert key management server created successfully
  ansible.builtin.assert:
    that:
      - create_result.changed == true
      - create_result.failed == false
      - create_result.ext_id is defined
      - create_result.response is defined
      - create_result.response.name == "{{ kms_name }}"
      - create_result.response.ext_id is defined
      - create_result.response.access_information is defined
      - create_result.response.access_information.client_id == "{{ azure_kms.clientId }}"
      - create_result.response.access_information.truncated_client_secret is defined
      - create_result.response.access_information.tenant_id == "{{ azure_kms.tenantId }}"
      - create_result.response.access_information.credential_expiry_date == "{{ azure_kms.credentialExpiryDate }}"
      - create_result.response.access_information.endpoint_url == "{{ azure_kms.endpointUrl }}"
      - '"{{ azure_kms.keyId }}" in "{{ create_result.response.access_information.key_id }}"'
      - create_result.task_ext_id is defined
    fail_msg: "Failed to create key management server"
    success_msg: "Successfully created key management server"

- name: Set key management server external ID
  ansible.builtin.set_fact:
    kms_ext_id: "{{ create_result.ext_id }}"

- name: Generate spec for updating key management server using check mode
  nutanix.ncp.ntnx_key_management_server_v2:
    name: "{{ kms_name }}_updated"
    ext_id: "{{ kms_ext_id }}"
    access_information:
      endpoint_url: "https://updated-keyvault-001.vault.azure.net/"
      key_id: "updated_key_id"
      tenant_id: "d4c8a8e5-1234-4f7e-8c2e-77d6f4a22f11"
      client_id: "e29f9c62-1112-41d0-b123-7f8a22c0cdef"
      client_secret: "9x2uQ~vO4trhXk8B5M9qjwgT1pR2uC9yD1zF0wX3"
      credential_expiry_date: "2026-07-08"
  register: result
  check_mode: true
  ignore_errors: true

- name: Print result
  ansible.builtin.debug:
    var: result

- name: Assert spec generated for updating key management server using check mode
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.ext_id == "{{ kms_ext_id }}"
      - result.response.name == "{{ kms_name }}_updated"
      - result.response.access_information is defined
      - result.response.access_information.client_id == "e29f9c62-1112-41d0-b123-7f8a22c0cdef"
      - result.response.access_information.client_secret == "9x2uQ~vO4trhXk8B5M9qjwgT1pR2uC9yD1zF0wX3"
      - result.response.access_information.tenant_id == "d4c8a8e5-1234-4f7e-8c2e-77d6f4a22f11"
      - result.response.access_information.credential_expiry_date == "2026-07-08"
      - result.response.access_information.endpoint_url == "https://updated-keyvault-001.vault.azure.net/"
      - result.response.access_information.key_id == "updated_key_id"
    fail_msg: "Failed to generate spec for updating key management server using check mode"
    success_msg: "Successfully generated spec for updating key management server using check mode"

- name: Update key management server
  nutanix.ncp.ntnx_key_management_server_v2:
    name: "{{ kms_name }}_updated"
    ext_id: "{{ kms_ext_id }}"
    access_information:
      endpoint_url: "{{ azure_kms.endpointUrl }}"
      key_id: "{{ azure_kms.keyId }}"
      tenant_id: "{{ azure_kms.tenantId }}"
      client_id: "{{ azure_kms.clientId }}"
      client_secret: "{{ azure_kms.clientSecret }}"
      credential_expiry_date: "{{ azure_kms.credentialExpiryDate }}"
  register: update_result
  ignore_errors: true

- name: Print update result
  ansible.builtin.debug:
    var: update_result

- name: Assert key management server updated successfully
  ansible.builtin.assert:
    that:
      - update_result.changed == true
      - update_result.failed == false
      - update_result.ext_id == "{{ kms_ext_id }}"
      - update_result.response is defined
      - update_result.response.name == "{{ kms_name }}_updated"
      - update_result.response.ext_id == "{{ kms_ext_id }}"
      - update_result.response.access_information is defined
      - update_result.response.access_information.client_id == "{{ azure_kms.clientId }}"
      - update_result.response.access_information.truncated_client_secret is defined
      - update_result.response.access_information.tenant_id == "{{ azure_kms.tenantId }}"
      - update_result.response.access_information.credential_expiry_date == "{{ azure_kms.credentialExpiryDate }}"
      - update_result.response.access_information.endpoint_url == "{{ azure_kms.endpointUrl }}"
      - '"{{ azure_kms.keyId }}" in "{{ update_result.response.access_information.key_id }}"'
      - update_result.task_ext_id is defined
    fail_msg: "Failed to update key management server"
    success_msg: "Successfully updated key management server"

- name: Check Idempotency by updating key management server with same values
  nutanix.ncp.ntnx_key_management_server_v2:
    name: "{{ kms_name }}_updated"
    ext_id: "{{ kms_ext_id }}"
    access_information:
      endpoint_url: "{{ azure_kms.endpointUrl }}"
      key_id: "{{ azure_kms.keyId }}"
      tenant_id: "{{ azure_kms.tenantId }}"
      client_id: "{{ azure_kms.clientId }}"
      client_secret: "{{ azure_kms.clientSecret }}"
      credential_expiry_date: "{{ azure_kms.credentialExpiryDate }}"
  register: idempotency_result
  ignore_errors: true

- name: Print result
  ansible.builtin.debug:
    var: idempotency_result

- name: Assert idempotency
  ansible.builtin.assert:
    that:
      - idempotency_result.msg == "Nothing to change."
      - idempotency_result.failed == false
      - idempotency_result.changed == false
      - idempotency_result.skipped == true
    fail_msg: "Idempotency check failed"
    success_msg: "Idempotency check passed"

- name: Fetch key management server using external ID
  nutanix.ncp.ntnx_key_management_server_info_v2:
    ext_id: "{{ kms_ext_id }}"
  register: fetch_result
  ignore_errors: true

- name: Print fetch result
  ansible.builtin.debug:
    var: fetch_result

- name: Assert fetch result
  ansible.builtin.assert:
    that:
      - fetch_result.changed == false
      - fetch_result.failed == false
      - fetch_result.response is defined
      - fetch_result.response.ext_id == "{{ kms_ext_id }}"
      - fetch_result.response.access_information is defined
      - fetch_result.response.access_information.client_id == "{{ azure_kms.clientId }}"
      - fetch_result.response.access_information.truncated_client_secret is defined
      - fetch_result.response.access_information.tenant_id == "{{ azure_kms.tenantId }}"
      - fetch_result.response.access_information.credential_expiry_date == "{{ azure_kms.credentialExpiryDate }}"
      - fetch_result.response.access_information.endpoint_url == "{{ azure_kms.endpointUrl }}"
      - '"{{ azure_kms.keyId }}" in "{{ fetch_result.response.access_information.key_id }}"'
    fail_msg: "Failed to fetch key management server"
    success_msg: "Successfully fetched key management server"

- name: List all key management servers
  nutanix.ncp.ntnx_key_management_server_info_v2:
  register: list_result
  ignore_errors: true

- name: Print list result
  ansible.builtin.debug:
    var: list_result

- name: Assert list result
  ansible.builtin.assert:
    that:
      - list_result.changed == false
      - list_result.failed == false
      - list_result.response is defined
      - list_result.response | length > 0
    fail_msg: "Failed to list key management servers"
    success_msg: "Successfully listed key management servers"

- name: Delete key management server with check mode
  nutanix.ncp.ntnx_key_management_server_v2:
    ext_id: "{{ kms_ext_id }}"
    state: absent
  register: result
  check_mode: true

- name: Print delete result
  ansible.builtin.debug:
    var: result

- name: Assert delete key management server with check mode
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.msg == "Key Management Server with ext_id:{{ kms_ext_id }} will be deleted."
    fail_msg: "Delete key management server with check mode failed"
    success_msg: "Delete key management server with check mode succeeded"

- name: Delete key management server
  nutanix.ncp.ntnx_key_management_server_v2:
    ext_id: "{{ kms_ext_id }}"
    state: absent
  register: delete_result
  ignore_errors: true

- name: Print delete_result
  ansible.builtin.debug:
    var: delete_result

- name: Assert key management server deleted successfully
  ansible.builtin.assert:
    that:
      - delete_result.changed == true
      - delete_result.failed == false
      - delete_result.ext_id == "{{ kms_ext_id }}"
      - delete_result.response is defined
      - delete_result.response.status == "SUCCEEDED"
    fail_msg: "Failed to delete key management server"
    success_msg: "Successfully deleted key management server"
